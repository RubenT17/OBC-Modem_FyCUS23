
OBC_FyCUS23.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fca8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c8  0800fe38  0800fe38  0001fe38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010300  08010300  000301f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010300  08010300  00020300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010308  08010308  000301f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010308  08010308  00020308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801030c  0801030c  0002030c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08010310  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dc8  200001f0  08010500  000301f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000fb8  08010500  00030fb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030220  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001dfc3  00000000  00000000  00030263  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000044b0  00000000  00000000  0004e226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  000526d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000137a  00000000  00000000  00054000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263bd  00000000  00000000  0005537a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021776  00000000  00000000  0007b737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dce46  00000000  00000000  0009cead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000081a4  00000000  00000000  00179cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  00181e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fe20 	.word	0x0800fe20

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800fe20 	.word	0x0800fe20

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <__aeabi_frsub>:
 8000c28:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c2c:	e002      	b.n	8000c34 <__addsf3>
 8000c2e:	bf00      	nop

08000c30 <__aeabi_fsub>:
 8000c30:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c34 <__addsf3>:
 8000c34:	0042      	lsls	r2, r0, #1
 8000c36:	bf1f      	itttt	ne
 8000c38:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c3c:	ea92 0f03 	teqne	r2, r3
 8000c40:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c44:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c48:	d06a      	beq.n	8000d20 <__addsf3+0xec>
 8000c4a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c4e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c52:	bfc1      	itttt	gt
 8000c54:	18d2      	addgt	r2, r2, r3
 8000c56:	4041      	eorgt	r1, r0
 8000c58:	4048      	eorgt	r0, r1
 8000c5a:	4041      	eorgt	r1, r0
 8000c5c:	bfb8      	it	lt
 8000c5e:	425b      	neglt	r3, r3
 8000c60:	2b19      	cmp	r3, #25
 8000c62:	bf88      	it	hi
 8000c64:	4770      	bxhi	lr
 8000c66:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c6a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c72:	bf18      	it	ne
 8000c74:	4240      	negne	r0, r0
 8000c76:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c7e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c82:	bf18      	it	ne
 8000c84:	4249      	negne	r1, r1
 8000c86:	ea92 0f03 	teq	r2, r3
 8000c8a:	d03f      	beq.n	8000d0c <__addsf3+0xd8>
 8000c8c:	f1a2 0201 	sub.w	r2, r2, #1
 8000c90:	fa41 fc03 	asr.w	ip, r1, r3
 8000c94:	eb10 000c 	adds.w	r0, r0, ip
 8000c98:	f1c3 0320 	rsb	r3, r3, #32
 8000c9c:	fa01 f103 	lsl.w	r1, r1, r3
 8000ca0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ca4:	d502      	bpl.n	8000cac <__addsf3+0x78>
 8000ca6:	4249      	negs	r1, r1
 8000ca8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000cb0:	d313      	bcc.n	8000cda <__addsf3+0xa6>
 8000cb2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000cb6:	d306      	bcc.n	8000cc6 <__addsf3+0x92>
 8000cb8:	0840      	lsrs	r0, r0, #1
 8000cba:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cbe:	f102 0201 	add.w	r2, r2, #1
 8000cc2:	2afe      	cmp	r2, #254	; 0xfe
 8000cc4:	d251      	bcs.n	8000d6a <__addsf3+0x136>
 8000cc6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cce:	bf08      	it	eq
 8000cd0:	f020 0001 	biceq.w	r0, r0, #1
 8000cd4:	ea40 0003 	orr.w	r0, r0, r3
 8000cd8:	4770      	bx	lr
 8000cda:	0049      	lsls	r1, r1, #1
 8000cdc:	eb40 0000 	adc.w	r0, r0, r0
 8000ce0:	3a01      	subs	r2, #1
 8000ce2:	bf28      	it	cs
 8000ce4:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000ce8:	d2ed      	bcs.n	8000cc6 <__addsf3+0x92>
 8000cea:	fab0 fc80 	clz	ip, r0
 8000cee:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cf2:	ebb2 020c 	subs.w	r2, r2, ip
 8000cf6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cfa:	bfaa      	itet	ge
 8000cfc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d00:	4252      	neglt	r2, r2
 8000d02:	4318      	orrge	r0, r3
 8000d04:	bfbc      	itt	lt
 8000d06:	40d0      	lsrlt	r0, r2
 8000d08:	4318      	orrlt	r0, r3
 8000d0a:	4770      	bx	lr
 8000d0c:	f092 0f00 	teq	r2, #0
 8000d10:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d14:	bf06      	itte	eq
 8000d16:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d1a:	3201      	addeq	r2, #1
 8000d1c:	3b01      	subne	r3, #1
 8000d1e:	e7b5      	b.n	8000c8c <__addsf3+0x58>
 8000d20:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d24:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d28:	bf18      	it	ne
 8000d2a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d2e:	d021      	beq.n	8000d74 <__addsf3+0x140>
 8000d30:	ea92 0f03 	teq	r2, r3
 8000d34:	d004      	beq.n	8000d40 <__addsf3+0x10c>
 8000d36:	f092 0f00 	teq	r2, #0
 8000d3a:	bf08      	it	eq
 8000d3c:	4608      	moveq	r0, r1
 8000d3e:	4770      	bx	lr
 8000d40:	ea90 0f01 	teq	r0, r1
 8000d44:	bf1c      	itt	ne
 8000d46:	2000      	movne	r0, #0
 8000d48:	4770      	bxne	lr
 8000d4a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d4e:	d104      	bne.n	8000d5a <__addsf3+0x126>
 8000d50:	0040      	lsls	r0, r0, #1
 8000d52:	bf28      	it	cs
 8000d54:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d58:	4770      	bx	lr
 8000d5a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d5e:	bf3c      	itt	cc
 8000d60:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d64:	4770      	bxcc	lr
 8000d66:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d6a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d72:	4770      	bx	lr
 8000d74:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d78:	bf16      	itet	ne
 8000d7a:	4608      	movne	r0, r1
 8000d7c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d80:	4601      	movne	r1, r0
 8000d82:	0242      	lsls	r2, r0, #9
 8000d84:	bf06      	itte	eq
 8000d86:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d8a:	ea90 0f01 	teqeq	r0, r1
 8000d8e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d92:	4770      	bx	lr

08000d94 <__aeabi_ui2f>:
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	e004      	b.n	8000da4 <__aeabi_i2f+0x8>
 8000d9a:	bf00      	nop

08000d9c <__aeabi_i2f>:
 8000d9c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000da0:	bf48      	it	mi
 8000da2:	4240      	negmi	r0, r0
 8000da4:	ea5f 0c00 	movs.w	ip, r0
 8000da8:	bf08      	it	eq
 8000daa:	4770      	bxeq	lr
 8000dac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000db0:	4601      	mov	r1, r0
 8000db2:	f04f 0000 	mov.w	r0, #0
 8000db6:	e01c      	b.n	8000df2 <__aeabi_l2f+0x2a>

08000db8 <__aeabi_ul2f>:
 8000db8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dbc:	bf08      	it	eq
 8000dbe:	4770      	bxeq	lr
 8000dc0:	f04f 0300 	mov.w	r3, #0
 8000dc4:	e00a      	b.n	8000ddc <__aeabi_l2f+0x14>
 8000dc6:	bf00      	nop

08000dc8 <__aeabi_l2f>:
 8000dc8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dcc:	bf08      	it	eq
 8000dce:	4770      	bxeq	lr
 8000dd0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000dd4:	d502      	bpl.n	8000ddc <__aeabi_l2f+0x14>
 8000dd6:	4240      	negs	r0, r0
 8000dd8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ddc:	ea5f 0c01 	movs.w	ip, r1
 8000de0:	bf02      	ittt	eq
 8000de2:	4684      	moveq	ip, r0
 8000de4:	4601      	moveq	r1, r0
 8000de6:	2000      	moveq	r0, #0
 8000de8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000dec:	bf08      	it	eq
 8000dee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000df2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000df6:	fabc f28c 	clz	r2, ip
 8000dfa:	3a08      	subs	r2, #8
 8000dfc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e00:	db10      	blt.n	8000e24 <__aeabi_l2f+0x5c>
 8000e02:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e06:	4463      	add	r3, ip
 8000e08:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0c:	f1c2 0220 	rsb	r2, r2, #32
 8000e10:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e14:	fa20 f202 	lsr.w	r2, r0, r2
 8000e18:	eb43 0002 	adc.w	r0, r3, r2
 8000e1c:	bf08      	it	eq
 8000e1e:	f020 0001 	biceq.w	r0, r0, #1
 8000e22:	4770      	bx	lr
 8000e24:	f102 0220 	add.w	r2, r2, #32
 8000e28:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e34:	fa21 f202 	lsr.w	r2, r1, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e42:	4770      	bx	lr

08000e44 <__aeabi_uldivmod>:
 8000e44:	b953      	cbnz	r3, 8000e5c <__aeabi_uldivmod+0x18>
 8000e46:	b94a      	cbnz	r2, 8000e5c <__aeabi_uldivmod+0x18>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	bf08      	it	eq
 8000e4c:	2800      	cmpeq	r0, #0
 8000e4e:	bf1c      	itt	ne
 8000e50:	f04f 31ff 	movne.w	r1, #4294967295
 8000e54:	f04f 30ff 	movne.w	r0, #4294967295
 8000e58:	f000 b9a6 	b.w	80011a8 <__aeabi_idiv0>
 8000e5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e64:	f000 f83c 	bl	8000ee0 <__udivmoddi4>
 8000e68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e70:	b004      	add	sp, #16
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_d2lz>:
 8000e74:	b538      	push	{r3, r4, r5, lr}
 8000e76:	2200      	movs	r2, #0
 8000e78:	2300      	movs	r3, #0
 8000e7a:	4604      	mov	r4, r0
 8000e7c:	460d      	mov	r5, r1
 8000e7e:	f7ff fe25 	bl	8000acc <__aeabi_dcmplt>
 8000e82:	b928      	cbnz	r0, 8000e90 <__aeabi_d2lz+0x1c>
 8000e84:	4620      	mov	r0, r4
 8000e86:	4629      	mov	r1, r5
 8000e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000e8c:	f000 b80a 	b.w	8000ea4 <__aeabi_d2ulz>
 8000e90:	4620      	mov	r0, r4
 8000e92:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000e96:	f000 f805 	bl	8000ea4 <__aeabi_d2ulz>
 8000e9a:	4240      	negs	r0, r0
 8000e9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ea0:	bd38      	pop	{r3, r4, r5, pc}
 8000ea2:	bf00      	nop

08000ea4 <__aeabi_d2ulz>:
 8000ea4:	b5d0      	push	{r4, r6, r7, lr}
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <__aeabi_d2ulz+0x34>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	4606      	mov	r6, r0
 8000eac:	460f      	mov	r7, r1
 8000eae:	f7ff fb9b 	bl	80005e8 <__aeabi_dmul>
 8000eb2:	f7ff fe49 	bl	8000b48 <__aeabi_d2uiz>
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	f7ff fb1c 	bl	80004f4 <__aeabi_ui2d>
 8000ebc:	4b07      	ldr	r3, [pc, #28]	; (8000edc <__aeabi_d2ulz+0x38>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	f7ff fb92 	bl	80005e8 <__aeabi_dmul>
 8000ec4:	4602      	mov	r2, r0
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	4630      	mov	r0, r6
 8000eca:	4639      	mov	r1, r7
 8000ecc:	f7ff f9d4 	bl	8000278 <__aeabi_dsub>
 8000ed0:	f7ff fe3a 	bl	8000b48 <__aeabi_d2uiz>
 8000ed4:	4621      	mov	r1, r4
 8000ed6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ed8:	3df00000 	.word	0x3df00000
 8000edc:	41f00000 	.word	0x41f00000

08000ee0 <__udivmoddi4>:
 8000ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ee4:	9e08      	ldr	r6, [sp, #32]
 8000ee6:	460d      	mov	r5, r1
 8000ee8:	4604      	mov	r4, r0
 8000eea:	460f      	mov	r7, r1
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d14a      	bne.n	8000f86 <__udivmoddi4+0xa6>
 8000ef0:	428a      	cmp	r2, r1
 8000ef2:	4694      	mov	ip, r2
 8000ef4:	d965      	bls.n	8000fc2 <__udivmoddi4+0xe2>
 8000ef6:	fab2 f382 	clz	r3, r2
 8000efa:	b143      	cbz	r3, 8000f0e <__udivmoddi4+0x2e>
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	f1c3 0220 	rsb	r2, r3, #32
 8000f04:	409f      	lsls	r7, r3
 8000f06:	fa20 f202 	lsr.w	r2, r0, r2
 8000f0a:	4317      	orrs	r7, r2
 8000f0c:	409c      	lsls	r4, r3
 8000f0e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f12:	fa1f f58c 	uxth.w	r5, ip
 8000f16:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f1a:	0c22      	lsrs	r2, r4, #16
 8000f1c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f20:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f24:	fb01 f005 	mul.w	r0, r1, r5
 8000f28:	4290      	cmp	r0, r2
 8000f2a:	d90a      	bls.n	8000f42 <__udivmoddi4+0x62>
 8000f2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f30:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f34:	f080 811c 	bcs.w	8001170 <__udivmoddi4+0x290>
 8000f38:	4290      	cmp	r0, r2
 8000f3a:	f240 8119 	bls.w	8001170 <__udivmoddi4+0x290>
 8000f3e:	3902      	subs	r1, #2
 8000f40:	4462      	add	r2, ip
 8000f42:	1a12      	subs	r2, r2, r0
 8000f44:	b2a4      	uxth	r4, r4
 8000f46:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f4a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f4e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f52:	fb00 f505 	mul.w	r5, r0, r5
 8000f56:	42a5      	cmp	r5, r4
 8000f58:	d90a      	bls.n	8000f70 <__udivmoddi4+0x90>
 8000f5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000f5e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f62:	f080 8107 	bcs.w	8001174 <__udivmoddi4+0x294>
 8000f66:	42a5      	cmp	r5, r4
 8000f68:	f240 8104 	bls.w	8001174 <__udivmoddi4+0x294>
 8000f6c:	4464      	add	r4, ip
 8000f6e:	3802      	subs	r0, #2
 8000f70:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f74:	1b64      	subs	r4, r4, r5
 8000f76:	2100      	movs	r1, #0
 8000f78:	b11e      	cbz	r6, 8000f82 <__udivmoddi4+0xa2>
 8000f7a:	40dc      	lsrs	r4, r3
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	e9c6 4300 	strd	r4, r3, [r6]
 8000f82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d908      	bls.n	8000f9c <__udivmoddi4+0xbc>
 8000f8a:	2e00      	cmp	r6, #0
 8000f8c:	f000 80ed 	beq.w	800116a <__udivmoddi4+0x28a>
 8000f90:	2100      	movs	r1, #0
 8000f92:	e9c6 0500 	strd	r0, r5, [r6]
 8000f96:	4608      	mov	r0, r1
 8000f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f9c:	fab3 f183 	clz	r1, r3
 8000fa0:	2900      	cmp	r1, #0
 8000fa2:	d149      	bne.n	8001038 <__udivmoddi4+0x158>
 8000fa4:	42ab      	cmp	r3, r5
 8000fa6:	d302      	bcc.n	8000fae <__udivmoddi4+0xce>
 8000fa8:	4282      	cmp	r2, r0
 8000faa:	f200 80f8 	bhi.w	800119e <__udivmoddi4+0x2be>
 8000fae:	1a84      	subs	r4, r0, r2
 8000fb0:	eb65 0203 	sbc.w	r2, r5, r3
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	4617      	mov	r7, r2
 8000fb8:	2e00      	cmp	r6, #0
 8000fba:	d0e2      	beq.n	8000f82 <__udivmoddi4+0xa2>
 8000fbc:	e9c6 4700 	strd	r4, r7, [r6]
 8000fc0:	e7df      	b.n	8000f82 <__udivmoddi4+0xa2>
 8000fc2:	b902      	cbnz	r2, 8000fc6 <__udivmoddi4+0xe6>
 8000fc4:	deff      	udf	#255	; 0xff
 8000fc6:	fab2 f382 	clz	r3, r2
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	f040 8090 	bne.w	80010f0 <__udivmoddi4+0x210>
 8000fd0:	1a8a      	subs	r2, r1, r2
 8000fd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fd6:	fa1f fe8c 	uxth.w	lr, ip
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000fe0:	fb07 2015 	mls	r0, r7, r5, r2
 8000fe4:	0c22      	lsrs	r2, r4, #16
 8000fe6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fea:	fb0e f005 	mul.w	r0, lr, r5
 8000fee:	4290      	cmp	r0, r2
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x124>
 8000ff2:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffa:	d202      	bcs.n	8001002 <__udivmoddi4+0x122>
 8000ffc:	4290      	cmp	r0, r2
 8000ffe:	f200 80cb 	bhi.w	8001198 <__udivmoddi4+0x2b8>
 8001002:	4645      	mov	r5, r8
 8001004:	1a12      	subs	r2, r2, r0
 8001006:	b2a4      	uxth	r4, r4
 8001008:	fbb2 f0f7 	udiv	r0, r2, r7
 800100c:	fb07 2210 	mls	r2, r7, r0, r2
 8001010:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001014:	fb0e fe00 	mul.w	lr, lr, r0
 8001018:	45a6      	cmp	lr, r4
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x14e>
 800101c:	eb1c 0404 	adds.w	r4, ip, r4
 8001020:	f100 32ff 	add.w	r2, r0, #4294967295
 8001024:	d202      	bcs.n	800102c <__udivmoddi4+0x14c>
 8001026:	45a6      	cmp	lr, r4
 8001028:	f200 80bb 	bhi.w	80011a2 <__udivmoddi4+0x2c2>
 800102c:	4610      	mov	r0, r2
 800102e:	eba4 040e 	sub.w	r4, r4, lr
 8001032:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001036:	e79f      	b.n	8000f78 <__udivmoddi4+0x98>
 8001038:	f1c1 0720 	rsb	r7, r1, #32
 800103c:	408b      	lsls	r3, r1
 800103e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001042:	ea4c 0c03 	orr.w	ip, ip, r3
 8001046:	fa05 f401 	lsl.w	r4, r5, r1
 800104a:	fa20 f307 	lsr.w	r3, r0, r7
 800104e:	40fd      	lsrs	r5, r7
 8001050:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001054:	4323      	orrs	r3, r4
 8001056:	fbb5 f8f9 	udiv	r8, r5, r9
 800105a:	fa1f fe8c 	uxth.w	lr, ip
 800105e:	fb09 5518 	mls	r5, r9, r8, r5
 8001062:	0c1c      	lsrs	r4, r3, #16
 8001064:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001068:	fb08 f50e 	mul.w	r5, r8, lr
 800106c:	42a5      	cmp	r5, r4
 800106e:	fa02 f201 	lsl.w	r2, r2, r1
 8001072:	fa00 f001 	lsl.w	r0, r0, r1
 8001076:	d90b      	bls.n	8001090 <__udivmoddi4+0x1b0>
 8001078:	eb1c 0404 	adds.w	r4, ip, r4
 800107c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001080:	f080 8088 	bcs.w	8001194 <__udivmoddi4+0x2b4>
 8001084:	42a5      	cmp	r5, r4
 8001086:	f240 8085 	bls.w	8001194 <__udivmoddi4+0x2b4>
 800108a:	f1a8 0802 	sub.w	r8, r8, #2
 800108e:	4464      	add	r4, ip
 8001090:	1b64      	subs	r4, r4, r5
 8001092:	b29d      	uxth	r5, r3
 8001094:	fbb4 f3f9 	udiv	r3, r4, r9
 8001098:	fb09 4413 	mls	r4, r9, r3, r4
 800109c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80010a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80010a4:	45a6      	cmp	lr, r4
 80010a6:	d908      	bls.n	80010ba <__udivmoddi4+0x1da>
 80010a8:	eb1c 0404 	adds.w	r4, ip, r4
 80010ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80010b0:	d26c      	bcs.n	800118c <__udivmoddi4+0x2ac>
 80010b2:	45a6      	cmp	lr, r4
 80010b4:	d96a      	bls.n	800118c <__udivmoddi4+0x2ac>
 80010b6:	3b02      	subs	r3, #2
 80010b8:	4464      	add	r4, ip
 80010ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010be:	fba3 9502 	umull	r9, r5, r3, r2
 80010c2:	eba4 040e 	sub.w	r4, r4, lr
 80010c6:	42ac      	cmp	r4, r5
 80010c8:	46c8      	mov	r8, r9
 80010ca:	46ae      	mov	lr, r5
 80010cc:	d356      	bcc.n	800117c <__udivmoddi4+0x29c>
 80010ce:	d053      	beq.n	8001178 <__udivmoddi4+0x298>
 80010d0:	b156      	cbz	r6, 80010e8 <__udivmoddi4+0x208>
 80010d2:	ebb0 0208 	subs.w	r2, r0, r8
 80010d6:	eb64 040e 	sbc.w	r4, r4, lr
 80010da:	fa04 f707 	lsl.w	r7, r4, r7
 80010de:	40ca      	lsrs	r2, r1
 80010e0:	40cc      	lsrs	r4, r1
 80010e2:	4317      	orrs	r7, r2
 80010e4:	e9c6 7400 	strd	r7, r4, [r6]
 80010e8:	4618      	mov	r0, r3
 80010ea:	2100      	movs	r1, #0
 80010ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010f0:	f1c3 0120 	rsb	r1, r3, #32
 80010f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80010f8:	fa20 f201 	lsr.w	r2, r0, r1
 80010fc:	fa25 f101 	lsr.w	r1, r5, r1
 8001100:	409d      	lsls	r5, r3
 8001102:	432a      	orrs	r2, r5
 8001104:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8001108:	fa1f fe8c 	uxth.w	lr, ip
 800110c:	fbb1 f0f7 	udiv	r0, r1, r7
 8001110:	fb07 1510 	mls	r5, r7, r0, r1
 8001114:	0c11      	lsrs	r1, r2, #16
 8001116:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800111a:	fb00 f50e 	mul.w	r5, r0, lr
 800111e:	428d      	cmp	r5, r1
 8001120:	fa04 f403 	lsl.w	r4, r4, r3
 8001124:	d908      	bls.n	8001138 <__udivmoddi4+0x258>
 8001126:	eb1c 0101 	adds.w	r1, ip, r1
 800112a:	f100 38ff 	add.w	r8, r0, #4294967295
 800112e:	d22f      	bcs.n	8001190 <__udivmoddi4+0x2b0>
 8001130:	428d      	cmp	r5, r1
 8001132:	d92d      	bls.n	8001190 <__udivmoddi4+0x2b0>
 8001134:	3802      	subs	r0, #2
 8001136:	4461      	add	r1, ip
 8001138:	1b49      	subs	r1, r1, r5
 800113a:	b292      	uxth	r2, r2
 800113c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001140:	fb07 1115 	mls	r1, r7, r5, r1
 8001144:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001148:	fb05 f10e 	mul.w	r1, r5, lr
 800114c:	4291      	cmp	r1, r2
 800114e:	d908      	bls.n	8001162 <__udivmoddi4+0x282>
 8001150:	eb1c 0202 	adds.w	r2, ip, r2
 8001154:	f105 38ff 	add.w	r8, r5, #4294967295
 8001158:	d216      	bcs.n	8001188 <__udivmoddi4+0x2a8>
 800115a:	4291      	cmp	r1, r2
 800115c:	d914      	bls.n	8001188 <__udivmoddi4+0x2a8>
 800115e:	3d02      	subs	r5, #2
 8001160:	4462      	add	r2, ip
 8001162:	1a52      	subs	r2, r2, r1
 8001164:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001168:	e738      	b.n	8000fdc <__udivmoddi4+0xfc>
 800116a:	4631      	mov	r1, r6
 800116c:	4630      	mov	r0, r6
 800116e:	e708      	b.n	8000f82 <__udivmoddi4+0xa2>
 8001170:	4639      	mov	r1, r7
 8001172:	e6e6      	b.n	8000f42 <__udivmoddi4+0x62>
 8001174:	4610      	mov	r0, r2
 8001176:	e6fb      	b.n	8000f70 <__udivmoddi4+0x90>
 8001178:	4548      	cmp	r0, r9
 800117a:	d2a9      	bcs.n	80010d0 <__udivmoddi4+0x1f0>
 800117c:	ebb9 0802 	subs.w	r8, r9, r2
 8001180:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001184:	3b01      	subs	r3, #1
 8001186:	e7a3      	b.n	80010d0 <__udivmoddi4+0x1f0>
 8001188:	4645      	mov	r5, r8
 800118a:	e7ea      	b.n	8001162 <__udivmoddi4+0x282>
 800118c:	462b      	mov	r3, r5
 800118e:	e794      	b.n	80010ba <__udivmoddi4+0x1da>
 8001190:	4640      	mov	r0, r8
 8001192:	e7d1      	b.n	8001138 <__udivmoddi4+0x258>
 8001194:	46d0      	mov	r8, sl
 8001196:	e77b      	b.n	8001090 <__udivmoddi4+0x1b0>
 8001198:	3d02      	subs	r5, #2
 800119a:	4462      	add	r2, ip
 800119c:	e732      	b.n	8001004 <__udivmoddi4+0x124>
 800119e:	4608      	mov	r0, r1
 80011a0:	e70a      	b.n	8000fb8 <__udivmoddi4+0xd8>
 80011a2:	4464      	add	r4, ip
 80011a4:	3802      	subs	r0, #2
 80011a6:	e742      	b.n	800102e <__udivmoddi4+0x14e>

080011a8 <__aeabi_idiv0>:
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <_write_Bit>:
  *            @arg GPIO_PIN_RESET: to write 0.
  *            @arg GPIO_PIN_SET: to write 1.
  * @retval None.
  */
void _write_Bit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState bit_tx)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
 80011b8:	4613      	mov	r3, r2
 80011ba:	707b      	strb	r3, [r7, #1]
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80011bc:	887b      	ldrh	r3, [r7, #2]
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f005 f820 	bl	8006208 <HAL_GPIO_WritePin>
	delayMicro(3);
 80011c8:	2003      	movs	r0, #3
 80011ca:	f002 f931 	bl	8003430 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, bit_tx);
 80011ce:	787a      	ldrb	r2, [r7, #1]
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	4619      	mov	r1, r3
 80011d4:	6878      	ldr	r0, [r7, #4]
 80011d6:	f005 f817 	bl	8006208 <HAL_GPIO_WritePin>
	delayMicro(57);
 80011da:	2039      	movs	r0, #57	; 0x39
 80011dc:	f002 f928 	bl	8003430 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80011e0:	887b      	ldrh	r3, [r7, #2]
 80011e2:	2201      	movs	r2, #1
 80011e4:	4619      	mov	r1, r3
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f005 f80e 	bl	8006208 <HAL_GPIO_WritePin>
}
 80011ec:	bf00      	nop
 80011ee:	3708      	adds	r7, #8
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <_read_Bit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval The bit read.
  */
_Bool _read_Bit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	460b      	mov	r3, r1
 80011fe:	807b      	strh	r3, [r7, #2]
	_Bool bit_rx;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8001200:	887b      	ldrh	r3, [r7, #2]
 8001202:	2200      	movs	r2, #0
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f004 fffe 	bl	8006208 <HAL_GPIO_WritePin>
	delayMicro(2);
 800120c:	2002      	movs	r0, #2
 800120e:	f002 f90f 	bl	8003430 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8001212:	887b      	ldrh	r3, [r7, #2]
 8001214:	2201      	movs	r2, #1
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f004 fff5 	bl	8006208 <HAL_GPIO_WritePin>
	delayMicro(10);
 800121e:	200a      	movs	r0, #10
 8001220:	f002 f906 	bl	8003430 <delayMicro>
	bit_rx = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin);
 8001224:	887b      	ldrh	r3, [r7, #2]
 8001226:	4619      	mov	r1, r3
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f004 ffd5 	bl	80061d8 <HAL_GPIO_ReadPin>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	bf14      	ite	ne
 8001234:	2301      	movne	r3, #1
 8001236:	2300      	moveq	r3, #0
 8001238:	73fb      	strb	r3, [r7, #15]
	delayMicro(48);
 800123a:	2030      	movs	r0, #48	; 0x30
 800123c:	f002 f8f8 	bl	8003430 <delayMicro>
	return bit_rx;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <_write_Byte>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @param  data_tx specifies the byte to be written.
  * @retval None
  */
void _write_Byte(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t data_tx)
{
 800124a:	b580      	push	{r7, lr}
 800124c:	b084      	sub	sp, #16
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
 8001252:	460b      	mov	r3, r1
 8001254:	807b      	strh	r3, [r7, #2]
 8001256:	4613      	mov	r3, r2
 8001258:	707b      	strb	r3, [r7, #1]
	uint8_t mask = 0b00000001;
 800125a:	2301      	movs	r3, #1
 800125c:	73fb      	strb	r3, [r7, #15]
	uint8_t bit_tx = data_tx & mask;
 800125e:	787a      	ldrb	r2, [r7, #1]
 8001260:	7bfb      	ldrb	r3, [r7, #15]
 8001262:	4013      	ands	r3, r2
 8001264:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i=0; i<8; i++)
 8001266:	2300      	movs	r3, #0
 8001268:	737b      	strb	r3, [r7, #13]
 800126a:	e012      	b.n	8001292 <_write_Byte+0x48>
	{
		_write_Bit(GPIOx, GPIO_Pin, bit_tx);
 800126c:	7bba      	ldrb	r2, [r7, #14]
 800126e:	887b      	ldrh	r3, [r7, #2]
 8001270:	4619      	mov	r1, r3
 8001272:	6878      	ldr	r0, [r7, #4]
 8001274:	f7ff ff9a 	bl	80011ac <_write_Bit>
		delayMicro(3);
 8001278:	2003      	movs	r0, #3
 800127a:	f002 f8d9 	bl	8003430 <delayMicro>
        mask = mask << 1;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
 8001280:	005b      	lsls	r3, r3, #1
 8001282:	73fb      	strb	r3, [r7, #15]
        bit_tx = data_tx & mask;
 8001284:	787a      	ldrb	r2, [r7, #1]
 8001286:	7bfb      	ldrb	r3, [r7, #15]
 8001288:	4013      	ands	r3, r2
 800128a:	73bb      	strb	r3, [r7, #14]
	for(uint8_t i=0; i<8; i++)
 800128c:	7b7b      	ldrb	r3, [r7, #13]
 800128e:	3301      	adds	r3, #1
 8001290:	737b      	strb	r3, [r7, #13]
 8001292:	7b7b      	ldrb	r3, [r7, #13]
 8001294:	2b07      	cmp	r3, #7
 8001296:	d9e9      	bls.n	800126c <_write_Byte+0x22>
	}
}
 8001298:	bf00      	nop
 800129a:	bf00      	nop
 800129c:	3710      	adds	r7, #16
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <_read_Byte>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval The byte read.
  */
uint8_t _read_Byte(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b084      	sub	sp, #16
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	460b      	mov	r3, r1
 80012ac:	807b      	strh	r3, [r7, #2]
	uint8_t byte_rx = 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;  i < 8; i++)
 80012b2:	2300      	movs	r3, #0
 80012b4:	73bb      	strb	r3, [r7, #14]
 80012b6:	e012      	b.n	80012de <_read_Byte+0x3c>
	{
		byte_rx |= _read_Bit(GPIOx, GPIO_Pin) << i;
 80012b8:	887b      	ldrh	r3, [r7, #2]
 80012ba:	4619      	mov	r1, r3
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff ff99 	bl	80011f4 <_read_Bit>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	7bbb      	ldrb	r3, [r7, #14]
 80012c8:	fa02 f303 	lsl.w	r3, r2, r3
 80012cc:	b25a      	sxtb	r2, r3
 80012ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	b25b      	sxtb	r3, r3
 80012d6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;  i < 8; i++)
 80012d8:	7bbb      	ldrb	r3, [r7, #14]
 80012da:	3301      	adds	r3, #1
 80012dc:	73bb      	strb	r3, [r7, #14]
 80012de:	7bbb      	ldrb	r3, [r7, #14]
 80012e0:	2b07      	cmp	r3, #7
 80012e2:	d9e9      	bls.n	80012b8 <_read_Byte+0x16>
	}
	return byte_rx;
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <DS18B20_Reset_CMD>:
  * @retval This parameter can be one of the enum values:
  *            @arg HAL_OK: if there are device(s) on the onewire communication.
  *            @arg HAL_ERROR: if there aren't device(s) on the onewire communication.
  */
HAL_StatusTypeDef DS18B20_Reset_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	460b      	mov	r3, r1
 80012f8:	807b      	strh	r3, [r7, #2]
	uint8_t fault;
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	2200      	movs	r2, #0
 80012fe:	4619      	mov	r1, r3
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f004 ff81 	bl	8006208 <HAL_GPIO_WritePin>
	delayMicro(500);
 8001306:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800130a:	f002 f891 	bl	8003430 <delayMicro>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	2201      	movs	r2, #1
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f004 ff77 	bl	8006208 <HAL_GPIO_WritePin>
	delayMicro(100);
 800131a:	2064      	movs	r0, #100	; 0x64
 800131c:	f002 f888 	bl	8003430 <delayMicro>
	fault = HAL_GPIO_ReadPin(GPIOx, GPIO_Pin); // Reset if success
 8001320:	887b      	ldrh	r3, [r7, #2]
 8001322:	4619      	mov	r1, r3
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f004 ff57 	bl	80061d8 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	73fb      	strb	r3, [r7, #15]
	delayMicro(500);
 800132e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001332:	f002 f87d 	bl	8003430 <delayMicro>
	return fault ? HAL_ERROR : HAL_OK; //true:false
 8001336:	7bfb      	ldrb	r3, [r7, #15]
 8001338:	2b00      	cmp	r3, #0
 800133a:	bf14      	ite	ne
 800133c:	2301      	movne	r3, #1
 800133e:	2300      	moveq	r3, #0
 8001340:	b2db      	uxtb	r3, r3
}
 8001342:	4618      	mov	r0, r3
 8001344:	3710      	adds	r7, #16
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <DS18B20_MatchROM_CMD>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @param	dirb specifies the 64-bit lasered ROM code of the onewire device LSBF.
  * @retval None.
  */
void DS18B20_MatchROM_CMD (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t* dirb)
{
 800134a:	b580      	push	{r7, lr}
 800134c:	b084      	sub	sp, #16
 800134e:	af00      	add	r7, sp, #0
 8001350:	60f8      	str	r0, [r7, #12]
 8001352:	460b      	mov	r3, r1
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	817b      	strh	r3, [r7, #10]
	_write_Byte(GPIOx, GPIO_Pin, DS18B20_MATCH_ROM);
 8001358:	897b      	ldrh	r3, [r7, #10]
 800135a:	2255      	movs	r2, #85	; 0x55
 800135c:	4619      	mov	r1, r3
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff ff73 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[0]);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	781a      	ldrb	r2, [r3, #0]
 8001368:	897b      	ldrh	r3, [r7, #10]
 800136a:	4619      	mov	r1, r3
 800136c:	68f8      	ldr	r0, [r7, #12]
 800136e:	f7ff ff6c 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[1]);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3301      	adds	r3, #1
 8001376:	781a      	ldrb	r2, [r3, #0]
 8001378:	897b      	ldrh	r3, [r7, #10]
 800137a:	4619      	mov	r1, r3
 800137c:	68f8      	ldr	r0, [r7, #12]
 800137e:	f7ff ff64 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[2]);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3302      	adds	r3, #2
 8001386:	781a      	ldrb	r2, [r3, #0]
 8001388:	897b      	ldrh	r3, [r7, #10]
 800138a:	4619      	mov	r1, r3
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff ff5c 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[3]);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	3303      	adds	r3, #3
 8001396:	781a      	ldrb	r2, [r3, #0]
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	4619      	mov	r1, r3
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff ff54 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[4]);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	3304      	adds	r3, #4
 80013a6:	781a      	ldrb	r2, [r3, #0]
 80013a8:	897b      	ldrh	r3, [r7, #10]
 80013aa:	4619      	mov	r1, r3
 80013ac:	68f8      	ldr	r0, [r7, #12]
 80013ae:	f7ff ff4c 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[5]);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	3305      	adds	r3, #5
 80013b6:	781a      	ldrb	r2, [r3, #0]
 80013b8:	897b      	ldrh	r3, [r7, #10]
 80013ba:	4619      	mov	r1, r3
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff ff44 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[6]);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3306      	adds	r3, #6
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	897b      	ldrh	r3, [r7, #10]
 80013ca:	4619      	mov	r1, r3
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f7ff ff3c 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, dirb[7]);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3307      	adds	r3, #7
 80013d6:	781a      	ldrb	r2, [r3, #0]
 80013d8:	897b      	ldrh	r3, [r7, #10]
 80013da:	4619      	mov	r1, r3
 80013dc:	68f8      	ldr	r0, [r7, #12]
 80013de:	f7ff ff34 	bl	800124a <_write_Byte>
}
 80013e2:	bf00      	nop
 80013e4:	3710      	adds	r7, #16
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <DS18B20_ConvertT_CMD>:
  * @retval This parameter can be one of the enum values:
  *            @arg HAL_OK: if ADC could be done.
  *            @arg HAL_ERROR: if ADC could not be performed.
  */
HAL_StatusTypeDef DS18B20_ConvertT_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b084      	sub	sp, #16
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	460b      	mov	r3, r1
 80013f4:	807b      	strh	r3, [r7, #2]
	_write_Byte(GPIOx, GPIO_Pin, DS18B20_CONVERT_T);
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	2244      	movs	r2, #68	; 0x44
 80013fa:	4619      	mov	r1, r3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff24 	bl	800124a <_write_Byte>
	for(uint32_t i=0; i<37500; i++)		// Max time conversion = 20us * 37500 = 750ms
 8001402:	2300      	movs	r3, #0
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	e00f      	b.n	8001428 <DS18B20_ConvertT_CMD+0x3e>
	{
		if (HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET)
 8001408:	887b      	ldrh	r3, [r7, #2]
 800140a:	4619      	mov	r1, r3
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f004 fee3 	bl	80061d8 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b01      	cmp	r3, #1
 8001416:	d101      	bne.n	800141c <DS18B20_ConvertT_CMD+0x32>
		{
			return HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	e00b      	b.n	8001434 <DS18B20_ConvertT_CMD+0x4a>
		}
		delayMicro(20);
 800141c:	2014      	movs	r0, #20
 800141e:	f002 f807 	bl	8003430 <delayMicro>
	for(uint32_t i=0; i<37500; i++)		// Max time conversion = 20us * 37500 = 750ms
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3301      	adds	r3, #1
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	f249 227b 	movw	r2, #37499	; 0x927b
 800142e:	4293      	cmp	r3, r2
 8001430:	d9ea      	bls.n	8001408 <DS18B20_ConvertT_CMD+0x1e>
	}
	return HAL_ERROR;
 8001432:	2301      	movs	r3, #1
}
 8001434:	4618      	mov	r0, r3
 8001436:	3710      	adds	r7, #16
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <DS18B20_ReadScratchpad_CMD>:
  *            @arg HAL_OK: if success.
  *            @arg HAL_ERROR: if not success.
  */
HAL_StatusTypeDef DS18B20_ReadScratchpad_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		uint8_t *data, uint8_t n_bytes)
{
 800143c:	b590      	push	{r4, r7, lr}
 800143e:	b087      	sub	sp, #28
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	607a      	str	r2, [r7, #4]
 8001446:	461a      	mov	r2, r3
 8001448:	460b      	mov	r3, r1
 800144a:	817b      	strh	r3, [r7, #10]
 800144c:	4613      	mov	r3, r2
 800144e:	727b      	strb	r3, [r7, #9]
	if (n_bytes<1 || n_bytes>9) return HAL_ERROR;
 8001450:	7a7b      	ldrb	r3, [r7, #9]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d002      	beq.n	800145c <DS18B20_ReadScratchpad_CMD+0x20>
 8001456:	7a7b      	ldrb	r3, [r7, #9]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d901      	bls.n	8001460 <DS18B20_ReadScratchpad_CMD+0x24>
 800145c:	2301      	movs	r3, #1
 800145e:	e01a      	b.n	8001496 <DS18B20_ReadScratchpad_CMD+0x5a>

	_write_Byte(GPIOx, GPIO_Pin, DS18B20_READ_SCRATCHPAD);
 8001460:	897b      	ldrh	r3, [r7, #10]
 8001462:	22be      	movs	r2, #190	; 0xbe
 8001464:	4619      	mov	r1, r3
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff feef 	bl	800124a <_write_Byte>
	for(uint8_t i=0; i<n_bytes; i++)
 800146c:	2300      	movs	r3, #0
 800146e:	75fb      	strb	r3, [r7, #23]
 8001470:	e00c      	b.n	800148c <DS18B20_ReadScratchpad_CMD+0x50>
	{
		data[i] = _read_Byte(GPIOx, GPIO_Pin);
 8001472:	7dfb      	ldrb	r3, [r7, #23]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	18d4      	adds	r4, r2, r3
 8001478:	897b      	ldrh	r3, [r7, #10]
 800147a:	4619      	mov	r1, r3
 800147c:	68f8      	ldr	r0, [r7, #12]
 800147e:	f7ff ff10 	bl	80012a2 <_read_Byte>
 8001482:	4603      	mov	r3, r0
 8001484:	7023      	strb	r3, [r4, #0]
	for(uint8_t i=0; i<n_bytes; i++)
 8001486:	7dfb      	ldrb	r3, [r7, #23]
 8001488:	3301      	adds	r3, #1
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	7dfa      	ldrb	r2, [r7, #23]
 800148e:	7a7b      	ldrb	r3, [r7, #9]
 8001490:	429a      	cmp	r2, r3
 8001492:	d3ee      	bcc.n	8001472 <DS18B20_ReadScratchpad_CMD+0x36>
	}
	return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	371c      	adds	r7, #28
 800149a:	46bd      	mov	sp, r7
 800149c:	bd90      	pop	{r4, r7, pc}

0800149e <DS18B20_WriteScratchpad_CMD>:
  * @param  resol specifies the resolution of the ADC onewire device.
  * @retval None.
  */
void DS18B20_WriteScratchpad_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin,
		uint8_t th_reg, uint8_t tl_reg, ds18b20_resolution_t resol)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b082      	sub	sp, #8
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	4608      	mov	r0, r1
 80014a8:	4611      	mov	r1, r2
 80014aa:	461a      	mov	r2, r3
 80014ac:	4603      	mov	r3, r0
 80014ae:	807b      	strh	r3, [r7, #2]
 80014b0:	460b      	mov	r3, r1
 80014b2:	707b      	strb	r3, [r7, #1]
 80014b4:	4613      	mov	r3, r2
 80014b6:	703b      	strb	r3, [r7, #0]
	_write_Byte(GPIOx, GPIO_Pin, DS18B20_WRITE_SCRATCHPAD);
 80014b8:	887b      	ldrh	r3, [r7, #2]
 80014ba:	224e      	movs	r2, #78	; 0x4e
 80014bc:	4619      	mov	r1, r3
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fec3 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, th_reg);
 80014c4:	787a      	ldrb	r2, [r7, #1]
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	4619      	mov	r1, r3
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f7ff febd 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, tl_reg);
 80014d0:	783a      	ldrb	r2, [r7, #0]
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	4619      	mov	r1, r3
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff feb7 	bl	800124a <_write_Byte>
	_write_Byte(GPIOx, GPIO_Pin, resol);
 80014dc:	7c3a      	ldrb	r2, [r7, #16]
 80014de:	887b      	ldrh	r3, [r7, #2]
 80014e0:	4619      	mov	r1, r3
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff feb1 	bl	800124a <_write_Byte>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <DS18B20_SkipROM_CMD>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None.
  */
void DS18B20_SkipROM_CMD(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	460b      	mov	r3, r1
 80014fa:	807b      	strh	r3, [r7, #2]
	_write_Byte(GPIOx, GPIO_Pin, DS18B20_SKIP_ROM);
 80014fc:	887b      	ldrh	r3, [r7, #2]
 80014fe:	22cc      	movs	r2, #204	; 0xcc
 8001500:	4619      	mov	r1, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fea1 	bl	800124a <_write_Byte>
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <DS18B20_SetResolution>:
  *            @arg HAL_OK: if success.
  *            @arg HAL_ERROR: if not success.
  */
HAL_StatusTypeDef DS18B20_SetResolution(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *dirb,
		ds18b20_resolution_t resol)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af02      	add	r7, sp, #8
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	607a      	str	r2, [r7, #4]
 800151a:	461a      	mov	r2, r3
 800151c:	460b      	mov	r3, r1
 800151e:	817b      	strh	r3, [r7, #10]
 8001520:	4613      	mov	r3, r2
 8001522:	727b      	strb	r3, [r7, #9]
	uint8_t data[4] = {0};
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

	if(DS18B20_Reset_CMD(GPIOx, GPIO_Pin) == HAL_ERROR)	return HAL_ERROR;
 8001528:	897b      	ldrh	r3, [r7, #10]
 800152a:	4619      	mov	r1, r3
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f7ff fede 	bl	80012ee <DS18B20_Reset_CMD>
 8001532:	4603      	mov	r3, r0
 8001534:	2b01      	cmp	r3, #1
 8001536:	d101      	bne.n	800153c <DS18B20_SetResolution+0x2c>
 8001538:	2301      	movs	r3, #1
 800153a:	e026      	b.n	800158a <DS18B20_SetResolution+0x7a>
	DS18B20_MatchROM_CMD(GPIOx, GPIO_Pin, dirb);
 800153c:	897b      	ldrh	r3, [r7, #10]
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	4619      	mov	r1, r3
 8001542:	68f8      	ldr	r0, [r7, #12]
 8001544:	f7ff ff01 	bl	800134a <DS18B20_MatchROM_CMD>
	DS18B20_ReadScratchpad_CMD(GPIOx, GPIO_Pin, data, 4);
 8001548:	f107 0214 	add.w	r2, r7, #20
 800154c:	8979      	ldrh	r1, [r7, #10]
 800154e:	2304      	movs	r3, #4
 8001550:	68f8      	ldr	r0, [r7, #12]
 8001552:	f7ff ff73 	bl	800143c <DS18B20_ReadScratchpad_CMD>

	if(DS18B20_Reset_CMD(GPIOx, GPIO_Pin) == HAL_ERROR)	return HAL_ERROR;
 8001556:	897b      	ldrh	r3, [r7, #10]
 8001558:	4619      	mov	r1, r3
 800155a:	68f8      	ldr	r0, [r7, #12]
 800155c:	f7ff fec7 	bl	80012ee <DS18B20_Reset_CMD>
 8001560:	4603      	mov	r3, r0
 8001562:	2b01      	cmp	r3, #1
 8001564:	d101      	bne.n	800156a <DS18B20_SetResolution+0x5a>
 8001566:	2301      	movs	r3, #1
 8001568:	e00f      	b.n	800158a <DS18B20_SetResolution+0x7a>
	DS18B20_MatchROM_CMD(GPIOx, GPIO_Pin, dirb);
 800156a:	897b      	ldrh	r3, [r7, #10]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	4619      	mov	r1, r3
 8001570:	68f8      	ldr	r0, [r7, #12]
 8001572:	f7ff feea 	bl	800134a <DS18B20_MatchROM_CMD>
	DS18B20_WriteScratchpad_CMD(GPIOx, GPIO_Pin, data[2], data[3], resol);
 8001576:	7dba      	ldrb	r2, [r7, #22]
 8001578:	7df8      	ldrb	r0, [r7, #23]
 800157a:	8979      	ldrh	r1, [r7, #10]
 800157c:	7a7b      	ldrb	r3, [r7, #9]
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	4603      	mov	r3, r0
 8001582:	68f8      	ldr	r0, [r7, #12]
 8001584:	f7ff ff8b 	bl	800149e <DS18B20_WriteScratchpad_CMD>

	return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3718      	adds	r7, #24
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <DS18B20_Decode_Temperature>:
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15)
  * @param  data specifies two bytes with DS18B20 temperature.
  * @retval A float value that specifies the decoded temperature.
  */
float DS18B20_Decode_Temperature (GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t *data)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b088      	sub	sp, #32
 8001596:	af00      	add	r7, sp, #0
 8001598:	60f8      	str	r0, [r7, #12]
 800159a:	460b      	mov	r3, r1
 800159c:	607a      	str	r2, [r7, #4]
 800159e:	817b      	strh	r3, [r7, #10]
	float temperature = 0.0;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	61fb      	str	r3, [r7, #28]
	uint8_t temp_LSB = data[0];
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	763b      	strb	r3, [r7, #24]
	uint8_t temp_MSB = data[1];
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	785b      	ldrb	r3, [r3, #1]
 80015b0:	75fb      	strb	r3, [r7, #23]
	uint16_t u16_temp = ((temp_MSB << 8) | temp_LSB);
 80015b2:	7dfb      	ldrb	r3, [r7, #23]
 80015b4:	021b      	lsls	r3, r3, #8
 80015b6:	b21a      	sxth	r2, r3
 80015b8:	7e3b      	ldrb	r3, [r7, #24]
 80015ba:	b21b      	sxth	r3, r3
 80015bc:	4313      	orrs	r3, r2
 80015be:	b21b      	sxth	r3, r3
 80015c0:	82bb      	strh	r3, [r7, #20]
	uint16_t mask = 0b0000000000000001;
 80015c2:	2301      	movs	r3, #1
 80015c4:	837b      	strh	r3, [r7, #26]

	for (int8_t k = -4; k < 7; k++)
 80015c6:	23fc      	movs	r3, #252	; 0xfc
 80015c8:	767b      	strb	r3, [r7, #25]
 80015ca:	e022      	b.n	8001612 <DS18B20_Decode_Temperature+0x80>
	{
		if (u16_temp & mask)
 80015cc:	8aba      	ldrh	r2, [r7, #20]
 80015ce:	8b7b      	ldrh	r3, [r7, #26]
 80015d0:	4013      	ands	r3, r2
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d013      	beq.n	8001600 <DS18B20_Decode_Temperature+0x6e>
		{
			temperature += powf(2,k);
 80015d8:	f997 3019 	ldrsb.w	r3, [r7, #25]
 80015dc:	ee07 3a90 	vmov	s15, r3
 80015e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015e4:	eef0 0a67 	vmov.f32	s1, s15
 80015e8:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 80015ec:	f00c ffce 	bl	800e58c <powf>
 80015f0:	eeb0 7a40 	vmov.f32	s14, s0
 80015f4:	edd7 7a07 	vldr	s15, [r7, #28]
 80015f8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015fc:	edc7 7a07 	vstr	s15, [r7, #28]
		}
		mask = mask << 1;
 8001600:	8b7b      	ldrh	r3, [r7, #26]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	837b      	strh	r3, [r7, #26]
	for (int8_t k = -4; k < 7; k++)
 8001606:	f997 3019 	ldrsb.w	r3, [r7, #25]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	3301      	adds	r3, #1
 800160e:	b2db      	uxtb	r3, r3
 8001610:	767b      	strb	r3, [r7, #25]
 8001612:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8001616:	2b06      	cmp	r3, #6
 8001618:	ddd8      	ble.n	80015cc <DS18B20_Decode_Temperature+0x3a>
	}
	return temperature;
 800161a:	69fb      	ldr	r3, [r7, #28]
 800161c:	ee07 3a90 	vmov	s15, r3
}
 8001620:	eeb0 0a67 	vmov.f32	s0, s15
 8001624:	3720      	adds	r7, #32
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <DS18B20_All_Convert>:
  * @retval This parameter can be one of the enum values:
  *            @arg HAL_OK: if success.
  *            @arg HAL_ERROR: if not success.
  */
HAL_StatusTypeDef DS18B20_All_Convert(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b082      	sub	sp, #8
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	460b      	mov	r3, r1
 8001634:	807b      	strh	r3, [r7, #2]
	if(DS18B20_Reset_CMD(GPIOx, GPIO_Pin) == HAL_ERROR)	return HAL_ERROR;
 8001636:	887b      	ldrh	r3, [r7, #2]
 8001638:	4619      	mov	r1, r3
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f7ff fe57 	bl	80012ee <DS18B20_Reset_CMD>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d101      	bne.n	800164a <DS18B20_All_Convert+0x20>
 8001646:	2301      	movs	r3, #1
 8001648:	e00a      	b.n	8001660 <DS18B20_All_Convert+0x36>
	DS18B20_SkipROM_CMD(GPIOx, GPIO_Pin);
 800164a:	887b      	ldrh	r3, [r7, #2]
 800164c:	4619      	mov	r1, r3
 800164e:	6878      	ldr	r0, [r7, #4]
 8001650:	f7ff ff4e 	bl	80014f0 <DS18B20_SkipROM_CMD>
	DS18B20_ConvertT_CMD(GPIOx, GPIO_Pin);
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	4619      	mov	r1, r3
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fec6 	bl	80013ea <DS18B20_ConvertT_CMD>
	return HAL_OK;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <DS18B20_Read_Temp>:
  * @param	dirb specifies the 64-bit lasered ROM code of the onewire device LSBF.
  * @retval A float value that specifies the temperature of the onewire device
  * 		or -99.0 if there was a error.
  */
float DS18B20_Read_Temp(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, uint8_t* dirb)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	60f8      	str	r0, [r7, #12]
 8001670:	460b      	mov	r3, r1
 8001672:	607a      	str	r2, [r7, #4]
 8001674:	817b      	strh	r3, [r7, #10]
	uint8_t data[2]={0};
 8001676:	2300      	movs	r3, #0
 8001678:	82bb      	strh	r3, [r7, #20]

	if(DS18B20_Reset_CMD(GPIOx, GPIO_Pin) == HAL_ERROR)	return -99.0;
 800167a:	897b      	ldrh	r3, [r7, #10]
 800167c:	4619      	mov	r1, r3
 800167e:	68f8      	ldr	r0, [r7, #12]
 8001680:	f7ff fe35 	bl	80012ee <DS18B20_Reset_CMD>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d102      	bne.n	8001690 <DS18B20_Read_Temp+0x28>
 800168a:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80016c8 <DS18B20_Read_Temp+0x60>
 800168e:	e015      	b.n	80016bc <DS18B20_Read_Temp+0x54>
	DS18B20_MatchROM_CMD(GPIOx, GPIO_Pin, dirb);
 8001690:	897b      	ldrh	r3, [r7, #10]
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	4619      	mov	r1, r3
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f7ff fe57 	bl	800134a <DS18B20_MatchROM_CMD>
	DS18B20_ReadScratchpad_CMD(GPIOx, GPIO_Pin, data, 2);
 800169c:	f107 0214 	add.w	r2, r7, #20
 80016a0:	8979      	ldrh	r1, [r7, #10]
 80016a2:	2302      	movs	r3, #2
 80016a4:	68f8      	ldr	r0, [r7, #12]
 80016a6:	f7ff fec9 	bl	800143c <DS18B20_ReadScratchpad_CMD>
	return DS18B20_Decode_Temperature(GPIOx, GPIO_Pin, data);
 80016aa:	f107 0214 	add.w	r2, r7, #20
 80016ae:	897b      	ldrh	r3, [r7, #10]
 80016b0:	4619      	mov	r1, r3
 80016b2:	68f8      	ldr	r0, [r7, #12]
 80016b4:	f7ff ff6d 	bl	8001592 <DS18B20_Decode_Temperature>
 80016b8:	eef0 7a40 	vmov.f32	s15, s0
}
 80016bc:	eeb0 0a67 	vmov.f32	s0, s15
 80016c0:	3718      	adds	r7, #24
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	c2c60000 	.word	0xc2c60000

080016cc <aocs_config_gnss>:
/**
 * Configure NEO GNSS receiver
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_config_gnss()
{
 80016cc:	b5b0      	push	{r4, r5, r7, lr}
 80016ce:	b090      	sub	sp, #64	; 0x40
 80016d0:	af00      	add	r7, sp, #0

	uint8_t dynModel[44] =
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <aocs_config_gnss+0x78>)
 80016d4:	f107 0410 	add.w	r4, r7, #16
 80016d8:	461d      	mov	r5, r3
 80016da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80016e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80016e2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80016e6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
			0x00,0x00,0x00,0x00,0x00,
			0x8F,0xD1				// Checksum
	};

//	uint8_t cno_data[11] = 		{0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x35, 0x01, 0x41, 0xAD};//0xAD};
	uint8_t no_cno_data[11] = 	{0xB5, 0x62, 0x06, 0x01, 0x03, 0x00, 0x01, 0x35, 0x00, 0x40, 0xAC};
 80016ea:	4a17      	ldr	r2, [pc, #92]	; (8001748 <aocs_config_gnss+0x7c>)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	ca07      	ldmia	r2, {r0, r1, r2}
 80016f0:	c303      	stmia	r3!, {r0, r1}
 80016f2:	801a      	strh	r2, [r3, #0]
 80016f4:	3302      	adds	r3, #2
 80016f6:	0c12      	lsrs	r2, r2, #16
 80016f8:	701a      	strb	r2, [r3, #0]

	HAL_StatusTypeDef err = HAL_UART_Transmit(GNSS_UART_HANDLE, dynModel, 44, 500);
 80016fa:	f107 0110 	add.w	r1, r7, #16
 80016fe:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001702:	222c      	movs	r2, #44	; 0x2c
 8001704:	4811      	ldr	r0, [pc, #68]	; (800174c <aocs_config_gnss+0x80>)
 8001706:	f007 fd51 	bl	80091ac <HAL_UART_Transmit>
 800170a:	4603      	mov	r3, r0
 800170c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if(err != HAL_OK) 	return err;
 8001710:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001714:	2b00      	cmp	r3, #0
 8001716:	d002      	beq.n	800171e <aocs_config_gnss+0x52>
 8001718:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800171c:	e00d      	b.n	800173a <aocs_config_gnss+0x6e>

//	err = HAL_UART_Transmit(GNSS_UART_HANDLE, cno_data, 11, 100);
//	if(err != HAL_OK) 	return err;

	HAL_UART_Transmit(GNSS_UART_HANDLE, no_cno_data, 11, 100);
 800171e:	1d39      	adds	r1, r7, #4
 8001720:	2364      	movs	r3, #100	; 0x64
 8001722:	220b      	movs	r2, #11
 8001724:	4809      	ldr	r0, [pc, #36]	; (800174c <aocs_config_gnss+0x80>)
 8001726:	f007 fd41 	bl	80091ac <HAL_UART_Transmit>
	if(err != HAL_OK) 	return err;
 800172a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800172e:	2b00      	cmp	r3, #0
 8001730:	d002      	beq.n	8001738 <aocs_config_gnss+0x6c>
 8001732:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001736:	e000      	b.n	800173a <aocs_config_gnss+0x6e>

	return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3740      	adds	r7, #64	; 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bdb0      	pop	{r4, r5, r7, pc}
 8001742:	bf00      	nop
 8001744:	0800fe38 	.word	0x0800fe38
 8001748:	0800fe64 	.word	0x0800fe64
 800174c:	200009e4 	.word	0x200009e4

08001750 <aocs_config_magnetometer>:
/**
 * Configure LIS2MDL magnetometer
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_config_magnetometer()
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
	if(lis2mdl_whoIam(&hi2c1, LIS2MDL_ADDRESS, 10) == LIS2MDL_CHIP_ID)
 8001756:	220a      	movs	r2, #10
 8001758:	213c      	movs	r1, #60	; 0x3c
 800175a:	480c      	ldr	r0, [pc, #48]	; (800178c <aocs_config_magnetometer+0x3c>)
 800175c:	f001 fc22 	bl	8002fa4 <lis2mdl_whoIam>
 8001760:	4603      	mov	r3, r0
 8001762:	2b40      	cmp	r3, #64	; 0x40
 8001764:	d10d      	bne.n	8001782 <aocs_config_magnetometer+0x32>
	{
		HAL_StatusTypeDef err = lis2mdl_config(&hi2c1, LIS2MDL_ADDRESS, 10);
 8001766:	220a      	movs	r2, #10
 8001768:	213c      	movs	r1, #60	; 0x3c
 800176a:	4808      	ldr	r0, [pc, #32]	; (800178c <aocs_config_magnetometer+0x3c>)
 800176c:	f001 fb24 	bl	8002db8 <lis2mdl_config>
 8001770:	4603      	mov	r3, r0
 8001772:	71fb      	strb	r3, [r7, #7]
    	if(err != HAL_OK) 	return err;
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <aocs_config_magnetometer+0x2e>
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	e002      	b.n	8001784 <aocs_config_magnetometer+0x34>
    	else 				return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <aocs_config_magnetometer+0x34>
	}
    else return HAL_ERROR;
 8001782:	2301      	movs	r3, #1

}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000878 	.word	0x20000878

08001790 <aocs_config_imu>:
/**
 * Configure LSM6DSO IMU
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_config_imu()
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
    if(lsm6dso_whoIam(&hi2c1, LSM6DSO_ADDRESS, 30) == LSM6DSO_CHIP_ID)
 8001796:	221e      	movs	r2, #30
 8001798:	21d4      	movs	r1, #212	; 0xd4
 800179a:	480c      	ldr	r0, [pc, #48]	; (80017cc <aocs_config_imu+0x3c>)
 800179c:	f001 fe1a 	bl	80033d4 <lsm6dso_whoIam>
 80017a0:	4603      	mov	r3, r0
 80017a2:	2b6c      	cmp	r3, #108	; 0x6c
 80017a4:	d10d      	bne.n	80017c2 <aocs_config_imu+0x32>
    {
    	HAL_StatusTypeDef err = lsm6dso_config(&hi2c1, LSM6DSO_ADDRESS, 30);
 80017a6:	221e      	movs	r2, #30
 80017a8:	21d4      	movs	r1, #212	; 0xd4
 80017aa:	4808      	ldr	r0, [pc, #32]	; (80017cc <aocs_config_imu+0x3c>)
 80017ac:	f001 fc18 	bl	8002fe0 <lsm6dso_config>
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
    	if(err != HAL_OK) 	return err;
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <aocs_config_imu+0x2e>
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	e002      	b.n	80017c4 <aocs_config_imu+0x34>
    	else 				return HAL_OK;
 80017be:	2300      	movs	r3, #0
 80017c0:	e000      	b.n	80017c4 <aocs_config_imu+0x34>
    }
    else return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
}
 80017c4:	4618      	mov	r0, r3
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000878 	.word	0x20000878

080017d0 <aocs_config_altimeter>:
/**
 * Configure MS5607 altimeter
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_config_altimeter()
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err = ms5607_reset();
 80017d6:	f002 feab 	bl	8004530 <ms5607_reset>
 80017da:	4603      	mov	r3, r0
 80017dc:	71fb      	strb	r3, [r7, #7]
	if (err != HAL_OK)	return err;
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <aocs_config_altimeter+0x18>
 80017e4:	79fb      	ldrb	r3, [r7, #7]
 80017e6:	e00d      	b.n	8001804 <aocs_config_altimeter+0x34>
	HAL_Delay(10);
 80017e8:	200a      	movs	r0, #10
 80017ea:	f003 fd81 	bl	80052f0 <HAL_Delay>

	err = ms5607_readCalibration(altimeter.calibration);
 80017ee:	4807      	ldr	r0, [pc, #28]	; (800180c <aocs_config_altimeter+0x3c>)
 80017f0:	f002 feba 	bl	8004568 <ms5607_readCalibration>
 80017f4:	4603      	mov	r3, r0
 80017f6:	71fb      	strb	r3, [r7, #7]
	if (err != HAL_OK)	return err;
 80017f8:	79fb      	ldrb	r3, [r7, #7]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <aocs_config_altimeter+0x32>
 80017fe:	79fb      	ldrb	r3, [r7, #7]
 8001800:	e000      	b.n	8001804 <aocs_config_altimeter+0x34>

	return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	20000228 	.word	0x20000228

08001810 <aocs_config_temp>:
/**
 * Configure DS18B20 temperature sensors
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_config_temp()
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef err = HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	77fb      	strb	r3, [r7, #31]
	uint8_t dir1[8] = {40,255,100,30,35,183,146,218};	// Número 4
 800181a:	4a3b      	ldr	r2, [pc, #236]	; (8001908 <aocs_config_temp+0xf8>)
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001824:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dir2[8] = {40,255,100,30,35,183,6,170};		// Número 3
 8001828:	4a38      	ldr	r2, [pc, #224]	; (800190c <aocs_config_temp+0xfc>)
 800182a:	f107 030c 	add.w	r3, r7, #12
 800182e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001832:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t dir3[8] = {40,255,100,30,35,163,223,182};	// Número 6
 8001836:	4a36      	ldr	r2, [pc, #216]	; (8001910 <aocs_config_temp+0x100>)
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800183e:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(temps.dir1, dir1, 8);
 8001842:	4b34      	ldr	r3, [pc, #208]	; (8001914 <aocs_config_temp+0x104>)
 8001844:	461a      	mov	r2, r3
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800184e:	e882 0003 	stmia.w	r2, {r0, r1}
	memcpy(temps.dir2, dir2, 8);
 8001852:	4b30      	ldr	r3, [pc, #192]	; (8001914 <aocs_config_temp+0x104>)
 8001854:	3308      	adds	r3, #8
 8001856:	f107 020c 	add.w	r2, r7, #12
 800185a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800185e:	e883 0003 	stmia.w	r3, {r0, r1}
	memcpy(temps.dir3, dir3, 8);
 8001862:	4b2c      	ldr	r3, [pc, #176]	; (8001914 <aocs_config_temp+0x104>)
 8001864:	3310      	adds	r3, #16
 8001866:	1d3a      	adds	r2, r7, #4
 8001868:	e892 0003 	ldmia.w	r2, {r0, r1}
 800186c:	e883 0003 	stmia.w	r3, {r0, r1}
	err |= DS18B20_Reset_CMD(ONEWIRE_GPIO_Port, ONEWIRE_Pin);
 8001870:	2108      	movs	r1, #8
 8001872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001876:	f7ff fd3a 	bl	80012ee <DS18B20_Reset_CMD>
 800187a:	4603      	mov	r3, r0
 800187c:	461a      	mov	r2, r3
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	4313      	orrs	r3, r2
 8001882:	77fb      	strb	r3, [r7, #31]
	err |= DS18B20_SetResolution(ONEWIRE_GPIO_Port, ONEWIRE_Pin, temps.dir1, DS18B20_RESOLUTION_12);
 8001884:	237f      	movs	r3, #127	; 0x7f
 8001886:	4a23      	ldr	r2, [pc, #140]	; (8001914 <aocs_config_temp+0x104>)
 8001888:	2108      	movs	r1, #8
 800188a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800188e:	f7ff fe3f 	bl	8001510 <DS18B20_SetResolution>
 8001892:	4603      	mov	r3, r0
 8001894:	461a      	mov	r2, r3
 8001896:	7ffb      	ldrb	r3, [r7, #31]
 8001898:	4313      	orrs	r3, r2
 800189a:	77fb      	strb	r3, [r7, #31]
	err |= DS18B20_Reset_CMD(ONEWIRE_GPIO_Port, ONEWIRE_Pin);
 800189c:	2108      	movs	r1, #8
 800189e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a2:	f7ff fd24 	bl	80012ee <DS18B20_Reset_CMD>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	7ffb      	ldrb	r3, [r7, #31]
 80018ac:	4313      	orrs	r3, r2
 80018ae:	77fb      	strb	r3, [r7, #31]
	err |= DS18B20_SetResolution(ONEWIRE_GPIO_Port, ONEWIRE_Pin, temps.dir2, DS18B20_RESOLUTION_12);
 80018b0:	237f      	movs	r3, #127	; 0x7f
 80018b2:	4a19      	ldr	r2, [pc, #100]	; (8001918 <aocs_config_temp+0x108>)
 80018b4:	2108      	movs	r1, #8
 80018b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ba:	f7ff fe29 	bl	8001510 <DS18B20_SetResolution>
 80018be:	4603      	mov	r3, r0
 80018c0:	461a      	mov	r2, r3
 80018c2:	7ffb      	ldrb	r3, [r7, #31]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	77fb      	strb	r3, [r7, #31]
	err |= DS18B20_Reset_CMD(ONEWIRE_GPIO_Port, ONEWIRE_Pin);
 80018c8:	2108      	movs	r1, #8
 80018ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018ce:	f7ff fd0e 	bl	80012ee <DS18B20_Reset_CMD>
 80018d2:	4603      	mov	r3, r0
 80018d4:	461a      	mov	r2, r3
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	4313      	orrs	r3, r2
 80018da:	77fb      	strb	r3, [r7, #31]
	err |= DS18B20_SetResolution(ONEWIRE_GPIO_Port, ONEWIRE_Pin, temps.dir3, DS18B20_RESOLUTION_12);
 80018dc:	237f      	movs	r3, #127	; 0x7f
 80018de:	4a0f      	ldr	r2, [pc, #60]	; (800191c <aocs_config_temp+0x10c>)
 80018e0:	2108      	movs	r1, #8
 80018e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018e6:	f7ff fe13 	bl	8001510 <DS18B20_SetResolution>
 80018ea:	4603      	mov	r3, r0
 80018ec:	461a      	mov	r2, r3
 80018ee:	7ffb      	ldrb	r3, [r7, #31]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	77fb      	strb	r3, [r7, #31]

	if(err != HAL_OK)	return err;
 80018f4:	7ffb      	ldrb	r3, [r7, #31]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <aocs_config_temp+0xee>
 80018fa:	7ffb      	ldrb	r3, [r7, #31]
 80018fc:	e000      	b.n	8001900 <aocs_config_temp+0xf0>
	else				return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	4618      	mov	r0, r3
 8001902:	3720      	adds	r7, #32
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}
 8001908:	0800fe70 	.word	0x0800fe70
 800190c:	0800fe78 	.word	0x0800fe78
 8001910:	0800fe80 	.word	0x0800fe80
 8001914:	20000240 	.word	0x20000240
 8001918:	20000248 	.word	0x20000248
 800191c:	20000250 	.word	0x20000250

08001920 <aocs_get_gnss>:
/**
 * Decode NMEA message into from ring buffer data
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_get_gnss()
{
 8001920:	b580      	push	{r7, lr}
 8001922:	af00      	add	r7, sp, #0
	return gnss_nmea_GetData(gnss_ring, gnss_ring_last_ini,gnss_ring_last_end, &gnss);
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <aocs_get_gnss+0x1c>)
 8001926:	6819      	ldr	r1, [r3, #0]
 8001928:	4b05      	ldr	r3, [pc, #20]	; (8001940 <aocs_get_gnss+0x20>)
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <aocs_get_gnss+0x24>)
 800192e:	4806      	ldr	r0, [pc, #24]	; (8001948 <aocs_get_gnss+0x28>)
 8001930:	f000 fac6 	bl	8001ec0 <gnss_nmea_GetData>
 8001934:	4603      	mov	r3, r0
}
 8001936:	4618      	mov	r0, r3
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000668 	.word	0x20000668
 8001940:	20000664 	.word	0x20000664
 8001944:	20000000 	.word	0x20000000
 8001948:	20000264 	.word	0x20000264

0800194c <aocs_get_mag>:
/**
 * Get megnetometer values from LIS2MDL
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_get_mag()
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b084      	sub	sp, #16
 8001950:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef err = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	71fb      	strb	r3, [r7, #7]

	uint8_t status = lis2mdl_status(&hi2c1, LIS2MDL_ADDRESS, 10);
 8001956:	220a      	movs	r2, #10
 8001958:	213c      	movs	r1, #60	; 0x3c
 800195a:	4817      	ldr	r0, [pc, #92]	; (80019b8 <aocs_get_mag+0x6c>)
 800195c:	f001 fa93 	bl	8002e86 <lis2mdl_status>
 8001960:	4603      	mov	r3, r0
 8001962:	71bb      	strb	r3, [r7, #6]
	if(status&0b00001000)
 8001964:	79bb      	ldrb	r3, [r7, #6]
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <aocs_get_mag+0x56>
	{
		err |= lis2mdl_readMag(&hi2c1, LIS2MDL_ADDRESS, 20, &mag.x, &mag.y, &mag.z);
 800196e:	4b13      	ldr	r3, [pc, #76]	; (80019bc <aocs_get_mag+0x70>)
 8001970:	9301      	str	r3, [sp, #4]
 8001972:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <aocs_get_mag+0x74>)
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	4b13      	ldr	r3, [pc, #76]	; (80019c4 <aocs_get_mag+0x78>)
 8001978:	2214      	movs	r2, #20
 800197a:	213c      	movs	r1, #60	; 0x3c
 800197c:	480e      	ldr	r0, [pc, #56]	; (80019b8 <aocs_get_mag+0x6c>)
 800197e:	f001 faa6 	bl	8002ece <lis2mdl_readMag>
 8001982:	4603      	mov	r3, r0
 8001984:	461a      	mov	r2, r3
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	4313      	orrs	r3, r2
 800198a:	71fb      	strb	r3, [r7, #7]
		err |= lis2mdl_readTemp(&hi2c1, LIS2MDL_ADDRESS, 10, &mag.temp);
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <aocs_get_mag+0x7c>)
 800198e:	220a      	movs	r2, #10
 8001990:	213c      	movs	r1, #60	; 0x3c
 8001992:	4809      	ldr	r0, [pc, #36]	; (80019b8 <aocs_get_mag+0x6c>)
 8001994:	f001 fae3 	bl	8002f5e <lis2mdl_readTemp>
 8001998:	4603      	mov	r3, r0
 800199a:	461a      	mov	r2, r3
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	4313      	orrs	r3, r2
 80019a0:	71fb      	strb	r3, [r7, #7]
	}
	if (err != HAL_OK)	return err;
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <aocs_get_mag+0x60>
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	e000      	b.n	80019ae <aocs_get_mag+0x62>
	else				return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000878 	.word	0x20000878
 80019bc:	20000220 	.word	0x20000220
 80019c0:	2000021e 	.word	0x2000021e
 80019c4:	2000021c 	.word	0x2000021c
 80019c8:	20000224 	.word	0x20000224

080019cc <aocs_get_imu>:
/**
 * Get angular and linear acceleration from LSM6DSO
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_get_imu()
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af02      	add	r7, sp, #8
	HAL_StatusTypeDef err = HAL_OK;
 80019d2:	2300      	movs	r3, #0
 80019d4:	71fb      	strb	r3, [r7, #7]

	uint8_t status = lsm6dso_readStatus(&hi2c1, LSM6DSO_ADDRESS, 10);
 80019d6:	220a      	movs	r2, #10
 80019d8:	21d4      	movs	r1, #212	; 0xd4
 80019da:	4823      	ldr	r0, [pc, #140]	; (8001a68 <aocs_get_imu+0x9c>)
 80019dc:	f001 fcd5 	bl	800338a <lsm6dso_readStatus>
 80019e0:	4603      	mov	r3, r0
 80019e2:	71bb      	strb	r3, [r7, #6]
	if(status & 0b001)
 80019e4:	79bb      	ldrb	r3, [r7, #6]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d00e      	beq.n	8001a0c <aocs_get_imu+0x40>
	{
		err |= lsm6dso_readAccel(&hi2c1, LSM6DSO_ADDRESS, 100, &imu.acell_x, &imu.acell_y, &imu.acell_z);
 80019ee:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <aocs_get_imu+0xa0>)
 80019f0:	9301      	str	r3, [sp, #4]
 80019f2:	4b1f      	ldr	r3, [pc, #124]	; (8001a70 <aocs_get_imu+0xa4>)
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	4b1f      	ldr	r3, [pc, #124]	; (8001a74 <aocs_get_imu+0xa8>)
 80019f8:	2264      	movs	r2, #100	; 0x64
 80019fa:	21d4      	movs	r1, #212	; 0xd4
 80019fc:	481a      	ldr	r0, [pc, #104]	; (8001a68 <aocs_get_imu+0x9c>)
 80019fe:	f001 fc12 	bl	8003226 <lsm6dso_readAccel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	461a      	mov	r2, r3
 8001a06:	79fb      	ldrb	r3, [r7, #7]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	71fb      	strb	r3, [r7, #7]
	}
	if(status & 0b010)
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d00e      	beq.n	8001a34 <aocs_get_imu+0x68>
	{
		err |= lsm6dso_readGyro(&hi2c1, LIS2MDL_ADDRESS, 100, &imu.gyro_x, &imu.gyro_y, &imu.gyro_z);
 8001a16:	4b18      	ldr	r3, [pc, #96]	; (8001a78 <aocs_get_imu+0xac>)
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	4b18      	ldr	r3, [pc, #96]	; (8001a7c <aocs_get_imu+0xb0>)
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <aocs_get_imu+0xb4>)
 8001a20:	2264      	movs	r2, #100	; 0x64
 8001a22:	213c      	movs	r1, #60	; 0x3c
 8001a24:	4810      	ldr	r0, [pc, #64]	; (8001a68 <aocs_get_imu+0x9c>)
 8001a26:	f001 fc40 	bl	80032aa <lsm6dso_readGyro>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	461a      	mov	r2, r3
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	71fb      	strb	r3, [r7, #7]
	}
	if(status & 0b100)
 8001a34:	79bb      	ldrb	r3, [r7, #6]
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d00a      	beq.n	8001a54 <aocs_get_imu+0x88>
	{
		err |= lsm6dso_readTemp(&hi2c1, LIS2MDL_ADDRESS, 100, &imu.temp);
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <aocs_get_imu+0xb8>)
 8001a40:	2264      	movs	r2, #100	; 0x64
 8001a42:	213c      	movs	r1, #60	; 0x3c
 8001a44:	4808      	ldr	r0, [pc, #32]	; (8001a68 <aocs_get_imu+0x9c>)
 8001a46:	f001 fc72 	bl	800332e <lsm6dso_readTemp>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	79fb      	ldrb	r3, [r7, #7]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	71fb      	strb	r3, [r7, #7]
	}
	if (err != HAL_OK)	return err;
 8001a54:	79fb      	ldrb	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <aocs_get_imu+0x92>
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	e000      	b.n	8001a60 <aocs_get_imu+0x94>
	else 				return HAL_OK;
 8001a5e:	2300      	movs	r3, #0
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	3708      	adds	r7, #8
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	20000878 	.word	0x20000878
 8001a6c:	20000210 	.word	0x20000210
 8001a70:	2000020e 	.word	0x2000020e
 8001a74:	2000020c 	.word	0x2000020c
 8001a78:	20000216 	.word	0x20000216
 8001a7c:	20000214 	.word	0x20000214
 8001a80:	20000212 	.word	0x20000212
 8001a84:	20000218 	.word	0x20000218

08001a88 <aocs_get_altimeter>:
/**
 * Get altitude, pressure and temperature from MS5607
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_get_altimeter()
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
	if(ms5607_getTempPressure(MS5607_ADC_4096, altimeter.calibration, &altimeter.temp, &altimeter.pressure) != HAL_OK)	return HAL_ERROR;
 8001a8c:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <aocs_get_altimeter+0x38>)
 8001a8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <aocs_get_altimeter+0x3c>)
 8001a90:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <aocs_get_altimeter+0x40>)
 8001a92:	2008      	movs	r0, #8
 8001a94:	f002 fda0 	bl	80045d8 <ms5607_getTempPressure>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <aocs_get_altimeter+0x1a>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00c      	b.n	8001abc <aocs_get_altimeter+0x34>
	altimeter.altitude = ms5607_getAltitude(altimeter.pressure);
 8001aa2:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <aocs_get_altimeter+0x40>)
 8001aa4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8001aac:	f002 fec4 	bl	8004838 <ms5607_getAltitude>
 8001ab0:	eef0 7a40 	vmov.f32	s15, s0
 8001ab4:	4b04      	ldr	r3, [pc, #16]	; (8001ac8 <aocs_get_altimeter+0x40>)
 8001ab6:	edc3 7a05 	vstr	s15, [r3, #20]
	return HAL_OK;
 8001aba:	2300      	movs	r3, #0
}
 8001abc:	4618      	mov	r0, r3
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	20000238 	.word	0x20000238
 8001ac4:	20000234 	.word	0x20000234
 8001ac8:	20000228 	.word	0x20000228

08001acc <aocs_get_temp>:
/**
 * Get temperature from DS18B20
 * @return HAL status
 */
inline HAL_StatusTypeDef aocs_get_temp()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0

	if(DS18B20_Reset_CMD(ONEWIRE_GPIO_Port, ONEWIRE_Pin) != HAL_OK)		return HAL_ERROR;
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ad6:	f7ff fc0a 	bl	80012ee <DS18B20_Reset_CMD>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <aocs_get_temp+0x18>
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	e04b      	b.n	8001b7c <aocs_get_temp+0xb0>
	if(DS18B20_All_Convert(ONEWIRE_GPIO_Port, ONEWIRE_Pin) != HAL_OK)	return HAL_ERROR;
 8001ae4:	2108      	movs	r1, #8
 8001ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001aea:	f7ff fd9e 	bl	800162a <DS18B20_All_Convert>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <aocs_get_temp+0x2c>
 8001af4:	2301      	movs	r3, #1
 8001af6:	e041      	b.n	8001b7c <aocs_get_temp+0xb0>
	temps.temp_up = DS18B20_Read_Temp(ONEWIRE_GPIO_Port, ONEWIRE_Pin, temps.dir1);
 8001af8:	4a21      	ldr	r2, [pc, #132]	; (8001b80 <aocs_get_temp+0xb4>)
 8001afa:	2108      	movs	r1, #8
 8001afc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b00:	f7ff fdb2 	bl	8001668 <DS18B20_Read_Temp>
 8001b04:	eef0 7a40 	vmov.f32	s15, s0
 8001b08:	4b1d      	ldr	r3, [pc, #116]	; (8001b80 <aocs_get_temp+0xb4>)
 8001b0a:	edc3 7a06 	vstr	s15, [r3, #24]
	temps.temp_battery = DS18B20_Read_Temp(ONEWIRE_GPIO_Port, ONEWIRE_Pin, temps.dir2);
 8001b0e:	4a1d      	ldr	r2, [pc, #116]	; (8001b84 <aocs_get_temp+0xb8>)
 8001b10:	2108      	movs	r1, #8
 8001b12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b16:	f7ff fda7 	bl	8001668 <DS18B20_Read_Temp>
 8001b1a:	eef0 7a40 	vmov.f32	s15, s0
 8001b1e:	4b18      	ldr	r3, [pc, #96]	; (8001b80 <aocs_get_temp+0xb4>)
 8001b20:	edc3 7a07 	vstr	s15, [r3, #28]
	temps.temp_down = DS18B20_Read_Temp(ONEWIRE_GPIO_Port, ONEWIRE_Pin, temps.dir3);
 8001b24:	4a18      	ldr	r2, [pc, #96]	; (8001b88 <aocs_get_temp+0xbc>)
 8001b26:	2108      	movs	r1, #8
 8001b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b2c:	f7ff fd9c 	bl	8001668 <DS18B20_Read_Temp>
 8001b30:	eef0 7a40 	vmov.f32	s15, s0
 8001b34:	4b12      	ldr	r3, [pc, #72]	; (8001b80 <aocs_get_temp+0xb4>)
 8001b36:	edc3 7a08 	vstr	s15, [r3, #32]

	if (temps.temp_up==DS18B20_CONVERSION_ERROR ||
 8001b3a:	4b11      	ldr	r3, [pc, #68]	; (8001b80 <aocs_get_temp+0xb4>)
 8001b3c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b40:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8001b8c <aocs_get_temp+0xc0>
 8001b44:	eef4 7a47 	vcmp.f32	s15, s14
 8001b48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b4c:	d013      	beq.n	8001b76 <aocs_get_temp+0xaa>
			temps.temp_battery==DS18B20_CONVERSION_ERROR ||
 8001b4e:	4b0c      	ldr	r3, [pc, #48]	; (8001b80 <aocs_get_temp+0xb4>)
 8001b50:	edd3 7a07 	vldr	s15, [r3, #28]
	if (temps.temp_up==DS18B20_CONVERSION_ERROR ||
 8001b54:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8001b8c <aocs_get_temp+0xc0>
 8001b58:	eef4 7a47 	vcmp.f32	s15, s14
 8001b5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b60:	d009      	beq.n	8001b76 <aocs_get_temp+0xaa>
			temps.temp_down==DS18B20_CONVERSION_ERROR )
 8001b62:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <aocs_get_temp+0xb4>)
 8001b64:	edd3 7a08 	vldr	s15, [r3, #32]
			temps.temp_battery==DS18B20_CONVERSION_ERROR ||
 8001b68:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8001b8c <aocs_get_temp+0xc0>
 8001b6c:	eef4 7a47 	vcmp.f32	s15, s14
 8001b70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b74:	d101      	bne.n	8001b7a <aocs_get_temp+0xae>
	{
		return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e000      	b.n	8001b7c <aocs_get_temp+0xb0>
	}
	else return HAL_OK;
 8001b7a:	2300      	movs	r3, #0
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	20000240 	.word	0x20000240
 8001b84:	20000248 	.word	0x20000248
 8001b88:	20000250 	.word	0x20000250
 8001b8c:	42c60000 	.word	0x42c60000

08001b90 <bus_packet_Decode>:
 * @param buffer Data buffer with a bus packet to decode
 * @param packet Pointer to bus packet structure to save data
 * @return HAL status
 */
HAL_StatusTypeDef bus_packet_Decode(uint8_t *buffer, bus_packet_t *packet)
{
 8001b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b94:	b087      	sub	sp, #28
 8001b96:	af00      	add	r7, sp, #0
 8001b98:	6078      	str	r0, [r7, #4]
 8001b9a:	6039      	str	r1, [r7, #0]
	uint8_t length = buffer[1] & 0b01111111;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	3301      	adds	r3, #1
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ba6:	75fb      	strb	r3, [r7, #23]
	uint8_t ecf_flag = (buffer[1] & 0b10000000)>>7;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3301      	adds	r3, #1
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	09db      	lsrs	r3, r3, #7
 8001bb0:	75bb      	strb	r3, [r7, #22]

	if(length-BUS_PACKET_ECF_SIZE-BUS_PACKET_HEADER_SIZE < 0)	return HAL_ERROR;
 8001bb2:	7dfb      	ldrb	r3, [r7, #23]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d801      	bhi.n	8001bbc <bus_packet_Decode+0x2c>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e07a      	b.n	8001cb2 <bus_packet_Decode+0x122>

	if (ecf_flag)	// If there is CRC, check it.
 8001bbc:	7dbb      	ldrb	r3, [r7, #22]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d05a      	beq.n	8001c78 <bus_packet_Decode+0xe8>
	{
 8001bc2:	466b      	mov	r3, sp
 8001bc4:	461e      	mov	r6, r3
		if(length-BUS_PACKET_ECF_SIZE < 0)		return HAL_ERROR;
 8001bc6:	7dfb      	ldrb	r3, [r7, #23]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d801      	bhi.n	8001bd0 <bus_packet_Decode+0x40>
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e051      	b.n	8001c74 <bus_packet_Decode+0xe4>
		uint8_t crc_data[length-BUS_PACKET_ECF_SIZE];
 8001bd0:	7dfb      	ldrb	r3, [r7, #23]
 8001bd2:	1e99      	subs	r1, r3, #2
 8001bd4:	1e4b      	subs	r3, r1, #1
 8001bd6:	613b      	str	r3, [r7, #16]
 8001bd8:	460a      	mov	r2, r1
 8001bda:	2300      	movs	r3, #0
 8001bdc:	4690      	mov	r8, r2
 8001bde:	4699      	mov	r9, r3
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bec:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bf4:	460a      	mov	r2, r1
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	4614      	mov	r4, r2
 8001bfa:	461d      	mov	r5, r3
 8001bfc:	f04f 0200 	mov.w	r2, #0
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	00eb      	lsls	r3, r5, #3
 8001c06:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001c0a:	00e2      	lsls	r2, r4, #3
 8001c0c:	460b      	mov	r3, r1
 8001c0e:	3307      	adds	r3, #7
 8001c10:	08db      	lsrs	r3, r3, #3
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	ebad 0d03 	sub.w	sp, sp, r3
 8001c18:	466b      	mov	r3, sp
 8001c1a:	3300      	adds	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
		memcpy(crc_data, buffer, length-BUS_PACKET_ECF_SIZE);
 8001c1e:	7dfb      	ldrb	r3, [r7, #23]
 8001c20:	3b02      	subs	r3, #2
 8001c22:	461a      	mov	r2, r3
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	68f8      	ldr	r0, [r7, #12]
 8001c28:	f00a fb51 	bl	800c2ce <memcpy>

#ifdef STM32_MCU
		uint16_t calculated_crc = HAL_CRC_Calculate(&hcrc, (uint32_t *)crc_data, length-BUS_PACKET_ECF_SIZE) & 0xFFFF;
 8001c2c:	7dfb      	ldrb	r3, [r7, #23]
 8001c2e:	3b02      	subs	r3, #2
 8001c30:	461a      	mov	r2, r3
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	4821      	ldr	r0, [pc, #132]	; (8001cbc <bus_packet_Decode+0x12c>)
 8001c36:	f003 fd45 	bl	80056c4 <HAL_CRC_Calculate>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	817b      	strh	r3, [r7, #10]
#else
		uint16_t calculated_crc = bus_packet_CRC16CCSDSCalculate(0, crc_data, length-BUS_PACKET_ECF_SIZE) & 0xFFFF;
#endif
		uint16_t ecf = buffer[length-BUS_PACKET_ECF_SIZE]<<8 | buffer[length-BUS_PACKET_ECF_SIZE+ 1];
 8001c3e:	7dfb      	ldrb	r3, [r7, #23]
 8001c40:	3b02      	subs	r3, #2
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	4413      	add	r3, r2
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	021b      	lsls	r3, r3, #8
 8001c4a:	b21a      	sxth	r2, r3
 8001c4c:	7dfb      	ldrb	r3, [r7, #23]
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	440b      	add	r3, r1
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	b21b      	sxth	r3, r3
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	b21b      	sxth	r3, r3
 8001c5c:	813b      	strh	r3, [r7, #8]

		if(calculated_crc == ecf)	packet->ecf = ecf;
 8001c5e:	897a      	ldrh	r2, [r7, #10]
 8001c60:	893b      	ldrh	r3, [r7, #8]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d105      	bne.n	8001c72 <bus_packet_Decode+0xe2>
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	893a      	ldrh	r2, [r7, #8]
 8001c6a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
 8001c6e:	46b5      	mov	sp, r6
 8001c70:	e002      	b.n	8001c78 <bus_packet_Decode+0xe8>
		else 						return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
		if(length-BUS_PACKET_ECF_SIZE < 0)		return HAL_ERROR;
 8001c74:	46b5      	mov	sp, r6
 8001c76:	e01c      	b.n	8001cb2 <bus_packet_Decode+0x122>
	}

	// Save data
	packet->packet_type = buffer[0]>>7;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	09db      	lsrs	r3, r3, #7
 8001c7e:	b2da      	uxtb	r2, r3
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	701a      	strb	r2, [r3, #0]
	packet->apid = buffer[0] & 0b01111111;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	705a      	strb	r2, [r3, #1]
	packet->ecf_flag = ecf_flag;
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	7dba      	ldrb	r2, [r7, #22]
 8001c96:	709a      	strb	r2, [r3, #2]
	packet->length = length;
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	7dfa      	ldrb	r2, [r7, #23]
 8001c9c:	70da      	strb	r2, [r3, #3]

	memcpy(packet->data, &buffer[BUS_PACKET_HEADER_SIZE], length-BUS_PACKET_ECF_SIZE-BUS_PACKET_HEADER_SIZE);
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	1d18      	adds	r0, r3, #4
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	1c99      	adds	r1, r3, #2
 8001ca6:	7dfb      	ldrb	r3, [r7, #23]
 8001ca8:	3b04      	subs	r3, #4
 8001caa:	461a      	mov	r2, r3
 8001cac:	f00a fb0f 	bl	800c2ce <memcpy>

	return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	371c      	adds	r7, #28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001cbc:	20000854 	.word	0x20000854

08001cc0 <bus_packet_EncodePacketize>:
 * @param data_length Data length
 * @param buffer_out Pointer to a data buffer for to be transmitted
 * @return HAL status
 */
HAL_StatusTypeDef bus_packet_EncodePacketize(uint8_t type, uint8_t apid, uint8_t ecf_flag, uint8_t *data, uint32_t data_length, uint8_t *buffer_out)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	4603      	mov	r3, r0
 8001cca:	71fb      	strb	r3, [r7, #7]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	71bb      	strb	r3, [r7, #6]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	717b      	strb	r3, [r7, #5]
	uint32_t length = data_length + BUS_PACKET_HEADER_SIZE + BUS_PACKET_ECF_SIZE;
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	3304      	adds	r3, #4
 8001cd8:	60fb      	str	r3, [r7, #12]

	if(length > BUS_PACKET_BUS_SIZE)	return HAL_ERROR;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	2b7f      	cmp	r3, #127	; 0x7f
 8001cde:	d901      	bls.n	8001ce4 <bus_packet_EncodePacketize+0x24>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e03d      	b.n	8001d60 <bus_packet_EncodePacketize+0xa0>

	memcpy(&buffer_out[BUS_PACKET_HEADER_SIZE], data, data_length);
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	6839      	ldr	r1, [r7, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f00a faee 	bl	800c2ce <memcpy>


	buffer_out[0] = (type<<7) | (apid & 0b01111111);
 8001cf2:	79fb      	ldrb	r3, [r7, #7]
 8001cf4:	01db      	lsls	r3, r3, #7
 8001cf6:	b25a      	sxtb	r2, r3
 8001cf8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cfc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d00:	b25b      	sxtb	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b25b      	sxtb	r3, r3
 8001d06:	b2da      	uxtb	r2, r3
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	701a      	strb	r2, [r3, #0]
	buffer_out[1] = (ecf_flag<<7) | (length & 0b01111111);
 8001d0c:	797b      	ldrb	r3, [r7, #5]
 8001d0e:	01db      	lsls	r3, r3, #7
 8001d10:	b2d9      	uxtb	r1, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	430a      	orrs	r2, r1
 8001d22:	b2d2      	uxtb	r2, r2
 8001d24:	701a      	strb	r2, [r3, #0]

	if (ecf_flag)	// There is CRC?
 8001d26:	797b      	ldrb	r3, [r7, #5]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d018      	beq.n	8001d5e <bus_packet_EncodePacketize+0x9e>
	{
#ifdef STM32_MCU
		uint16_t ecf = HAL_CRC_Calculate(&hcrc, (uint32_t *)buffer_out, length-BUS_PACKET_ECF_SIZE);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	3b02      	subs	r3, #2
 8001d30:	461a      	mov	r2, r3
 8001d32:	69f9      	ldr	r1, [r7, #28]
 8001d34:	480c      	ldr	r0, [pc, #48]	; (8001d68 <bus_packet_EncodePacketize+0xa8>)
 8001d36:	f003 fcc5 	bl	80056c4 <HAL_CRC_Calculate>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	817b      	strh	r3, [r7, #10]
#else
		uint16_t ecf = bus_packet_CRC16CCSDSCalculate(0, buffer_out, length-BUS_PACKET_ECF_SIZE);
#endif
		buffer_out[length-BUS_PACKET_ECF_SIZE] = ecf>>8;
 8001d3e:	897b      	ldrh	r3, [r7, #10]
 8001d40:	0a1b      	lsrs	r3, r3, #8
 8001d42:	b299      	uxth	r1, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	3b02      	subs	r3, #2
 8001d48:	69fa      	ldr	r2, [r7, #28]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	b2ca      	uxtb	r2, r1
 8001d4e:	701a      	strb	r2, [r3, #0]
		buffer_out[length-BUS_PACKET_ECF_SIZE+1] = ecf & 0xFF;
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	69fa      	ldr	r2, [r7, #28]
 8001d56:	4413      	add	r3, r2
 8001d58:	897a      	ldrh	r2, [r7, #10]
 8001d5a:	b2d2      	uxtb	r2, r2
 8001d5c:	701a      	strb	r2, [r3, #0]
	}

	return HAL_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3710      	adds	r7, #16
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	20000854 	.word	0x20000854

08001d6c <bus_packet_SyncFrameDetect>:
 * @param flag Last flag of your Sync frame
 * @param received_data Current data received
 * @return Current flag of your Sync frame
 */
bus_sync_flag_t bus_packet_SyncFrameDetect(bus_sync_flag_t flag, uint8_t received_data)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	460a      	mov	r2, r1
 8001d76:	71fb      	strb	r3, [r7, #7]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	71bb      	strb	r3, [r7, #6]
  switch(flag)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d026      	beq.n	8001dd0 <bus_packet_SyncFrameDetect+0x64>
 8001d82:	2b08      	cmp	r3, #8
 8001d84:	dc09      	bgt.n	8001d9a <bus_packet_SyncFrameDetect+0x2e>
 8001d86:	2b02      	cmp	r3, #2
 8001d88:	d012      	beq.n	8001db0 <bus_packet_SyncFrameDetect+0x44>
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	d018      	beq.n	8001dc0 <bus_packet_SyncFrameDetect+0x54>
 8001d8e:	e004      	b.n	8001d9a <bus_packet_SyncFrameDetect+0x2e>
    break;

  case BUS_PACKET_SYNC_2:
    if (received_data != BUS_PACKET_FRAME_SYNC[1])
    {
      goto _first_sync_byte;
 8001d90:	bf00      	nop
 8001d92:	e002      	b.n	8001d9a <bus_packet_SyncFrameDetect+0x2e>
    break;

  case BUS_PACKET_SYNC_3:
    if (received_data != BUS_PACKET_FRAME_SYNC[2])
    {
      goto _first_sync_byte;
 8001d94:	bf00      	nop
 8001d96:	e000      	b.n	8001d9a <bus_packet_SyncFrameDetect+0x2e>
    break;

  case BUS_PACKET_SYNC_4:
    if (received_data != BUS_PACKET_FRAME_SYNC[3])
    {
      goto _first_sync_byte;
 8001d98:	bf00      	nop
    if (received_data != BUS_PACKET_FRAME_SYNC[0])
 8001d9a:	221a      	movs	r2, #26
 8001d9c:	79bb      	ldrb	r3, [r7, #6]
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d002      	beq.n	8001da8 <bus_packet_SyncFrameDetect+0x3c>
      flag = BUS_PACKET_SYNC_FIND;
 8001da2:	2301      	movs	r3, #1
 8001da4:	71fb      	strb	r3, [r7, #7]
    break;
 8001da6:	e01b      	b.n	8001de0 <bus_packet_SyncFrameDetect+0x74>
    else flag = (bus_sync_flag_t)(flag << 1);
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	71fb      	strb	r3, [r7, #7]
    break;
 8001dae:	e017      	b.n	8001de0 <bus_packet_SyncFrameDetect+0x74>
    if (received_data != BUS_PACKET_FRAME_SYNC[1])
 8001db0:	22cf      	movs	r2, #207	; 0xcf
 8001db2:	79bb      	ldrb	r3, [r7, #6]
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d1eb      	bne.n	8001d90 <bus_packet_SyncFrameDetect+0x24>
    else flag = (bus_sync_flag_t)(flag << 1);
 8001db8:	79fb      	ldrb	r3, [r7, #7]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	71fb      	strb	r3, [r7, #7]
    break;
 8001dbe:	e00f      	b.n	8001de0 <bus_packet_SyncFrameDetect+0x74>
    if (received_data != BUS_PACKET_FRAME_SYNC[2])
 8001dc0:	22fc      	movs	r2, #252	; 0xfc
 8001dc2:	79bb      	ldrb	r3, [r7, #6]
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d1e5      	bne.n	8001d94 <bus_packet_SyncFrameDetect+0x28>
    else flag = (bus_sync_flag_t)(flag << 1);
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	71fb      	strb	r3, [r7, #7]
    break;
 8001dce:	e007      	b.n	8001de0 <bus_packet_SyncFrameDetect+0x74>
    if (received_data != BUS_PACKET_FRAME_SYNC[3])
 8001dd0:	221d      	movs	r2, #29
 8001dd2:	79bb      	ldrb	r3, [r7, #6]
 8001dd4:	4293      	cmp	r3, r2
 8001dd6:	d1df      	bne.n	8001d98 <bus_packet_SyncFrameDetect+0x2c>
    }
    else flag = (bus_sync_flag_t)(flag << 1);
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	005b      	lsls	r3, r3, #1
 8001ddc:	71fb      	strb	r3, [r7, #7]
    break;
 8001dde:	bf00      	nop
  }
  return flag;
 8001de0:	79fb      	ldrb	r3, [r7, #7]
  			HAL_UART_Receive_IT(huart, &buffer_in[buffer_pos], 1);
  		else Error_Handler();
  	}
  }
  */
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
	...

08001df0 <bus_packet_CRC16CCSDSConfig>:
/**
 * Configuration of CRC in a STM32 microcontroller
 * @return HAL status
 */
HAL_StatusTypeDef bus_packet_CRC16CCSDSConfig()
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
	if(HAL_CRC_DeInit(&hcrc) != HAL_OK)
 8001df4:	4819      	ldr	r0, [pc, #100]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001df6:	f003 fc35 	bl	8005664 <HAL_CRC_DeInit>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <bus_packet_CRC16CCSDSConfig+0x14>
			return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e028      	b.n	8001e56 <bus_packet_CRC16CCSDSConfig+0x66>
	hcrc.Instance = CRC;
 8001e04:	4b15      	ldr	r3, [pc, #84]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e06:	4a16      	ldr	r2, [pc, #88]	; (8001e60 <bus_packet_CRC16CCSDSConfig+0x70>)
 8001e08:	601a      	str	r2, [r3, #0]
	hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8001e0a:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	711a      	strb	r2, [r3, #4]
	hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8001e10:	4b12      	ldr	r3, [pc, #72]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	715a      	strb	r2, [r3, #5]
	hcrc.Init.InitValue = 0;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
	hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	615a      	str	r2, [r3, #20]
	hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	619a      	str	r2, [r3, #24]
	hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	621a      	str	r2, [r3, #32]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e30:	f003 fbb4 	bl	800559c <HAL_CRC_Init>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d001      	beq.n	8001e3e <bus_packet_CRC16CCSDSConfig+0x4e>
		return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00b      	b.n	8001e56 <bus_packet_CRC16CCSDSConfig+0x66>
	if(HAL_CRCEx_Polynomial_Set(&hcrc, 0x1021, CRC_POLYLENGTH_16B) != HAL_OK)
 8001e3e:	2208      	movs	r2, #8
 8001e40:	f241 0121 	movw	r1, #4129	; 0x1021
 8001e44:	4805      	ldr	r0, [pc, #20]	; (8001e5c <bus_packet_CRC16CCSDSConfig+0x6c>)
 8001e46:	f003 fd51 	bl	80058ec <HAL_CRCEx_Polynomial_Set>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d001      	beq.n	8001e54 <bus_packet_CRC16CCSDSConfig+0x64>
		return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <bus_packet_CRC16CCSDSConfig+0x66>
	else return HAL_OK;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	20000854 	.word	0x20000854
 8001e60:	40023000 	.word	0x40023000

08001e64 <hex2int>:
 * Convert hexadecimal to integer
 * @param c Char to check
 * @return Integer number
 */
static inline int8_t hex2int(char c)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9')		return c - '0';
 8001e6e:	79fb      	ldrb	r3, [r7, #7]
 8001e70:	2b2f      	cmp	r3, #47	; 0x2f
 8001e72:	d907      	bls.n	8001e84 <hex2int+0x20>
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	2b39      	cmp	r3, #57	; 0x39
 8001e78:	d804      	bhi.n	8001e84 <hex2int+0x20>
 8001e7a:	79fb      	ldrb	r3, [r7, #7]
 8001e7c:	3b30      	subs	r3, #48	; 0x30
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	b25b      	sxtb	r3, r3
 8001e82:	e016      	b.n	8001eb2 <hex2int+0x4e>
    else if (c >= 'A' && c <= 'F')	return c - 'A' + 10;
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2b40      	cmp	r3, #64	; 0x40
 8001e88:	d907      	bls.n	8001e9a <hex2int+0x36>
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	2b46      	cmp	r3, #70	; 0x46
 8001e8e:	d804      	bhi.n	8001e9a <hex2int+0x36>
 8001e90:	79fb      	ldrb	r3, [r7, #7]
 8001e92:	3b37      	subs	r3, #55	; 0x37
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	b25b      	sxtb	r3, r3
 8001e98:	e00b      	b.n	8001eb2 <hex2int+0x4e>
    else if (c >= 'a' && c <= 'f')	return c - 'a' + 10;
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	2b60      	cmp	r3, #96	; 0x60
 8001e9e:	d907      	bls.n	8001eb0 <hex2int+0x4c>
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	2b66      	cmp	r3, #102	; 0x66
 8001ea4:	d804      	bhi.n	8001eb0 <hex2int+0x4c>
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	3b57      	subs	r3, #87	; 0x57
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	b25b      	sxtb	r3, r3
 8001eae:	e000      	b.n	8001eb2 <hex2int+0x4e>
    else							return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	370c      	adds	r7, #12
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <gnss_nmea_GetData>:
 * @param end_pos End position of NMEA sentence
 * @param gnss Pointer to GNSS NMEA message structure for saving sentence
 * @return HAL status
 */
HAL_StatusTypeDef gnss_nmea_GetData(uint8_t *ring, uint32_t ini_pos, uint32_t end_pos, gnss_nmea_t *gnss)
{
 8001ec0:	b590      	push	{r4, r7, lr}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	60f8      	str	r0, [r7, #12]
 8001ec8:	60b9      	str	r1, [r7, #8]
 8001eca:	607a      	str	r2, [r7, #4]
 8001ecc:	603b      	str	r3, [r7, #0]
	static char safe_ring[MAX_LENGTH_NMEA];	// para que no se pierda la info
	if(ring[ini_pos]!='$' || ring[end_pos]!='\n')
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b24      	cmp	r3, #36	; 0x24
 8001ed8:	d105      	bne.n	8001ee6 <gnss_nmea_GetData+0x26>
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b0a      	cmp	r3, #10
 8001ee4:	d001      	beq.n	8001eea <gnss_nmea_GetData+0x2a>
		return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e2af      	b.n	800244a <gnss_nmea_GetData+0x58a>


	// Guardado en safe ring
	uint8_t payload_end = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	75fb      	strb	r3, [r7, #23]

	if(ini_pos>end_pos)
 8001eee:	68ba      	ldr	r2, [r7, #8]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	429a      	cmp	r2, r3
 8001ef4:	d932      	bls.n	8001f5c <gnss_nmea_GetData+0x9c>
	{
		if((GNSS_RING_BUFFER_SIZE-ini_pos) + (end_pos+1) > MAX_LENGTH_NMEA)
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	f203 4301 	addw	r3, r3, #1025	; 0x401
 8001f00:	2b50      	cmp	r3, #80	; 0x50
 8001f02:	d901      	bls.n	8001f08 <gnss_nmea_GetData+0x48>
			return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e2a0      	b.n	800244a <gnss_nmea_GetData+0x58a>
		memcpy(safe_ring, &ring[ini_pos], GNSS_RING_BUFFER_SIZE-ini_pos);
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	18d1      	adds	r1, r2, r3
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001f14:	461a      	mov	r2, r3
 8001f16:	487f      	ldr	r0, [pc, #508]	; (8002114 <gnss_nmea_GetData+0x254>)
 8001f18:	f00a f9d9 	bl	800c2ce <memcpy>
		if(end_pos==0)	safe_ring[GNSS_RING_BUFFER_SIZE-ini_pos]=ring[end_pos];
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d108      	bne.n	8001f34 <gnss_nmea_GetData+0x74>
 8001f22:	68fa      	ldr	r2, [r7, #12]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	441a      	add	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001f2e:	7811      	ldrb	r1, [r2, #0]
 8001f30:	4a78      	ldr	r2, [pc, #480]	; (8002114 <gnss_nmea_GetData+0x254>)
 8001f32:	54d1      	strb	r1, [r2, r3]
		memcpy(&safe_ring[GNSS_RING_BUFFER_SIZE-ini_pos], &ring[0], end_pos+1);
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8001f3a:	4a76      	ldr	r2, [pc, #472]	; (8002114 <gnss_nmea_GetData+0x254>)
 8001f3c:	1898      	adds	r0, r3, r2
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	3301      	adds	r3, #1
 8001f42:	461a      	mov	r2, r3
 8001f44:	68f9      	ldr	r1, [r7, #12]
 8001f46:	f00a f9c2 	bl	800c2ce <memcpy>
		payload_end = (GNSS_RING_BUFFER_SIZE - ini_pos) + (end_pos+1) - 5;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	b2da      	uxtb	r2, r3
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	1ad3      	subs	r3, r2, r3
 8001f54:	b2db      	uxtb	r3, r3
 8001f56:	3b04      	subs	r3, #4
 8001f58:	75fb      	strb	r3, [r7, #23]
 8001f5a:	e019      	b.n	8001f90 <gnss_nmea_GetData+0xd0>
	}
	else
	{
		if((end_pos - ini_pos) > MAX_LENGTH_NMEA)
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	2b50      	cmp	r3, #80	; 0x50
 8001f64:	d901      	bls.n	8001f6a <gnss_nmea_GetData+0xaa>
			return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e26f      	b.n	800244a <gnss_nmea_GetData+0x58a>
		memcpy(safe_ring, &ring[ini_pos], 1+end_pos-ini_pos);
 8001f6a:	68fa      	ldr	r2, [r7, #12]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	18d1      	adds	r1, r2, r3
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	3301      	adds	r3, #1
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4866      	ldr	r0, [pc, #408]	; (8002114 <gnss_nmea_GetData+0x254>)
 8001f7c:	f00a f9a7 	bl	800c2ce <memcpy>
		payload_end = (1+end_pos-ini_pos) - 5;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	b2db      	uxtb	r3, r3
 8001f8c:	3b04      	subs	r3, #4
 8001f8e:	75fb      	strb	r3, [r7, #23]
	}



	// Obtener el checksum en hexadecimal
	int8_t upper = hex2int(safe_ring[payload_end+1]);
 8001f90:	7dfb      	ldrb	r3, [r7, #23]
 8001f92:	3301      	adds	r3, #1
 8001f94:	4a5f      	ldr	r2, [pc, #380]	; (8002114 <gnss_nmea_GetData+0x254>)
 8001f96:	5cd3      	ldrb	r3, [r2, r3]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff ff63 	bl	8001e64 <hex2int>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	75bb      	strb	r3, [r7, #22]
    if (upper == -1)
 8001fa2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001faa:	d101      	bne.n	8001fb0 <gnss_nmea_GetData+0xf0>
    	return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e24c      	b.n	800244a <gnss_nmea_GetData+0x58a>
    int8_t lower = hex2int(safe_ring[payload_end+2]);
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	4a57      	ldr	r2, [pc, #348]	; (8002114 <gnss_nmea_GetData+0x254>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7ff ff53 	bl	8001e64 <hex2int>
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	757b      	strb	r3, [r7, #21]
    if (lower == -1)
 8001fc2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fca:	d101      	bne.n	8001fd0 <gnss_nmea_GetData+0x110>
    	return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e23c      	b.n	800244a <gnss_nmea_GetData+0x58a>
    uint8_t expected = upper << 4 | lower;
 8001fd0:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	b25a      	sxtb	r2, r3
 8001fd8:	7d7b      	ldrb	r3, [r7, #21]
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b25b      	sxtb	r3, r3
 8001fde:	753b      	strb	r3, [r7, #20]

    // Calculate checksum
    uint8_t checksum = 0x00;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	74fb      	strb	r3, [r7, #19]
    for(uint8_t i=1;  i<payload_end; i++)	checksum ^= safe_ring[i];
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	74bb      	strb	r3, [r7, #18]
 8001fe8:	e008      	b.n	8001ffc <gnss_nmea_GetData+0x13c>
 8001fea:	7cbb      	ldrb	r3, [r7, #18]
 8001fec:	4a49      	ldr	r2, [pc, #292]	; (8002114 <gnss_nmea_GetData+0x254>)
 8001fee:	5cd2      	ldrb	r2, [r2, r3]
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	4053      	eors	r3, r2
 8001ff4:	74fb      	strb	r3, [r7, #19]
 8001ff6:	7cbb      	ldrb	r3, [r7, #18]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	74bb      	strb	r3, [r7, #18]
 8001ffc:	7cba      	ldrb	r2, [r7, #18]
 8001ffe:	7dfb      	ldrb	r3, [r7, #23]
 8002000:	429a      	cmp	r2, r3
 8002002:	d3f2      	bcc.n	8001fea <gnss_nmea_GetData+0x12a>

    if(expected!=checksum)
 8002004:	7d3a      	ldrb	r2, [r7, #20]
 8002006:	7cfb      	ldrb	r3, [r7, #19]
 8002008:	429a      	cmp	r2, r3
 800200a:	d001      	beq.n	8002010 <gnss_nmea_GetData+0x150>
    	return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e21c      	b.n	800244a <gnss_nmea_GetData+0x58a>


	// Interpretar sentencia

    static char *p;
    p = &safe_ring[3];
 8002010:	4b41      	ldr	r3, [pc, #260]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002012:	4a42      	ldr	r2, [pc, #264]	; (800211c <gnss_nmea_GetData+0x25c>)
 8002014:	601a      	str	r2, [r3, #0]
    if(!strncmp(p, "RMC", 3))
 8002016:	4b40      	ldr	r3, [pc, #256]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2203      	movs	r2, #3
 800201c:	4940      	ldr	r1, [pc, #256]	; (8002120 <gnss_nmea_GetData+0x260>)
 800201e:	4618      	mov	r0, r3
 8002020:	f00a f8cf 	bl	800c1c2 <strncmp>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	f040 80fd 	bne.w	8002226 <gnss_nmea_GetData+0x366>
    {
    	p+=3;
 800202c:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <gnss_nmea_GetData+0x258>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	3303      	adds	r3, #3
 8002032:	4a39      	ldr	r2, [pc, #228]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002034:	6013      	str	r3, [r2, #0]
		gnss->rmc->time = PARSE_FLOAT(p);
 8002036:	4b38      	ldr	r3, [pc, #224]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681c      	ldr	r4, [r3, #0]
 8002040:	4935      	ldr	r1, [pc, #212]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002042:	4610      	mov	r0, r2
 8002044:	f009 fc9e 	bl	800b984 <strtof>
 8002048:	eef0 7a40 	vmov.f32	s15, s0
 800204c:	edc4 7a00 	vstr	s15, [r4]
		gnss->rmc->status = PARSE_CHAR(p);
 8002050:	4b31      	ldr	r3, [pc, #196]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	7852      	ldrb	r2, [r2, #1]
 800205a:	711a      	strb	r2, [r3, #4]
 800205c:	4b2e      	ldr	r3, [pc, #184]	; (8002118 <gnss_nmea_GetData+0x258>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	3301      	adds	r3, #1
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b2c      	cmp	r3, #44	; 0x2c
 8002066:	d005      	beq.n	8002074 <gnss_nmea_GetData+0x1b4>
 8002068:	4b2b      	ldr	r3, [pc, #172]	; (8002118 <gnss_nmea_GetData+0x258>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	3302      	adds	r3, #2
 800206e:	4a2a      	ldr	r2, [pc, #168]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002070:	6013      	str	r3, [r2, #0]
 8002072:	e004      	b.n	800207e <gnss_nmea_GetData+0x1be>
 8002074:	4b28      	ldr	r3, [pc, #160]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	3301      	adds	r3, #1
 800207a:	4a27      	ldr	r2, [pc, #156]	; (8002118 <gnss_nmea_GetData+0x258>)
 800207c:	6013      	str	r3, [r2, #0]
		if(gnss->rmc->status != 'A')	return HAL_ERROR;
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	791b      	ldrb	r3, [r3, #4]
 8002084:	2b41      	cmp	r3, #65	; 0x41
 8002086:	d001      	beq.n	800208c <gnss_nmea_GetData+0x1cc>
 8002088:	2301      	movs	r3, #1
 800208a:	e1de      	b.n	800244a <gnss_nmea_GetData+0x58a>
		gnss->rmc->lat = PARSE_FLOAT(p);
 800208c:	4b22      	ldr	r3, [pc, #136]	; (8002118 <gnss_nmea_GetData+0x258>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1c5a      	adds	r2, r3, #1
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681c      	ldr	r4, [r3, #0]
 8002096:	4920      	ldr	r1, [pc, #128]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002098:	4610      	mov	r0, r2
 800209a:	f009 fc73 	bl	800b984 <strtof>
 800209e:	eef0 7a40 	vmov.f32	s15, s0
 80020a2:	edc4 7a02 	vstr	s15, [r4, #8]
		gnss->rmc->ns = PARSE_CHAR(p);
 80020a6:	4b1c      	ldr	r3, [pc, #112]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	7852      	ldrb	r2, [r2, #1]
 80020b0:	731a      	strb	r2, [r3, #12]
 80020b2:	4b19      	ldr	r3, [pc, #100]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	3301      	adds	r3, #1
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	2b2c      	cmp	r3, #44	; 0x2c
 80020bc:	d005      	beq.n	80020ca <gnss_nmea_GetData+0x20a>
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	3302      	adds	r3, #2
 80020c4:	4a14      	ldr	r2, [pc, #80]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020c6:	6013      	str	r3, [r2, #0]
 80020c8:	e004      	b.n	80020d4 <gnss_nmea_GetData+0x214>
 80020ca:	4b13      	ldr	r3, [pc, #76]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	4a11      	ldr	r2, [pc, #68]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020d2:	6013      	str	r3, [r2, #0]
		gnss->rmc->lon = PARSE_FLOAT(p);
 80020d4:	4b10      	ldr	r3, [pc, #64]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681c      	ldr	r4, [r3, #0]
 80020de:	490e      	ldr	r1, [pc, #56]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020e0:	4610      	mov	r0, r2
 80020e2:	f009 fc4f 	bl	800b984 <strtof>
 80020e6:	eef0 7a40 	vmov.f32	s15, s0
 80020ea:	edc4 7a04 	vstr	s15, [r4, #16]
		gnss->rmc->ew = PARSE_CHAR(p);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	7852      	ldrb	r2, [r2, #1]
 80020f8:	751a      	strb	r2, [r3, #20]
 80020fa:	4b07      	ldr	r3, [pc, #28]	; (8002118 <gnss_nmea_GetData+0x258>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	3301      	adds	r3, #1
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b2c      	cmp	r3, #44	; 0x2c
 8002104:	d00e      	beq.n	8002124 <gnss_nmea_GetData+0x264>
 8002106:	4b04      	ldr	r3, [pc, #16]	; (8002118 <gnss_nmea_GetData+0x258>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	3302      	adds	r3, #2
 800210c:	4a02      	ldr	r2, [pc, #8]	; (8002118 <gnss_nmea_GetData+0x258>)
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	e00d      	b.n	800212e <gnss_nmea_GetData+0x26e>
 8002112:	bf00      	nop
 8002114:	200006c8 	.word	0x200006c8
 8002118:	20000718 	.word	0x20000718
 800211c:	200006cb 	.word	0x200006cb
 8002120:	0800fe88 	.word	0x0800fe88
 8002124:	4b95      	ldr	r3, [pc, #596]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	3301      	adds	r3, #1
 800212a:	4a94      	ldr	r2, [pc, #592]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800212c:	6013      	str	r3, [r2, #0]
		gnss->rmc->speed = PARSE_FLOAT(p);
 800212e:	4b93      	ldr	r3, [pc, #588]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	1c5a      	adds	r2, r3, #1
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	681c      	ldr	r4, [r3, #0]
 8002138:	4990      	ldr	r1, [pc, #576]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800213a:	4610      	mov	r0, r2
 800213c:	f009 fc22 	bl	800b984 <strtof>
 8002140:	eef0 7a40 	vmov.f32	s15, s0
 8002144:	edc4 7a06 	vstr	s15, [r4, #24]
		gnss->rmc->cog = PARSE_FLOAT(p);
 8002148:	4b8c      	ldr	r3, [pc, #560]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	1c5a      	adds	r2, r3, #1
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	681c      	ldr	r4, [r3, #0]
 8002152:	498a      	ldr	r1, [pc, #552]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002154:	4610      	mov	r0, r2
 8002156:	f009 fc15 	bl	800b984 <strtof>
 800215a:	eef0 7a40 	vmov.f32	s15, s0
 800215e:	edc4 7a07 	vstr	s15, [r4, #28]
		gnss->rmc->date = PARSE_INT(p);
 8002162:	4b86      	ldr	r3, [pc, #536]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	3301      	adds	r3, #1
 8002168:	220a      	movs	r2, #10
 800216a:	4984      	ldr	r1, [pc, #528]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800216c:	4618      	mov	r0, r3
 800216e:	f009 fce1 	bl	800bb34 <strtoul>
 8002172:	4602      	mov	r2, r0
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	621a      	str	r2, [r3, #32]
		gnss->rmc->mv = PARSE_FLOAT(p);
 800217a:	4b80      	ldr	r3, [pc, #512]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1c5a      	adds	r2, r3, #1
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	681c      	ldr	r4, [r3, #0]
 8002184:	497d      	ldr	r1, [pc, #500]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002186:	4610      	mov	r0, r2
 8002188:	f009 fbfc 	bl	800b984 <strtof>
 800218c:	eef0 7a40 	vmov.f32	s15, s0
 8002190:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
		gnss->rmc->mvEW = PARSE_CHAR(p);
 8002194:	4b79      	ldr	r3, [pc, #484]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002196:	681a      	ldr	r2, [r3, #0]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	7852      	ldrb	r2, [r2, #1]
 800219e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 80021a2:	4b76      	ldr	r3, [pc, #472]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	3301      	adds	r3, #1
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b2c      	cmp	r3, #44	; 0x2c
 80021ac:	d005      	beq.n	80021ba <gnss_nmea_GetData+0x2fa>
 80021ae:	4b73      	ldr	r3, [pc, #460]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	3302      	adds	r3, #2
 80021b4:	4a71      	ldr	r2, [pc, #452]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021b6:	6013      	str	r3, [r2, #0]
 80021b8:	e004      	b.n	80021c4 <gnss_nmea_GetData+0x304>
 80021ba:	4b70      	ldr	r3, [pc, #448]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	3301      	adds	r3, #1
 80021c0:	4a6e      	ldr	r2, [pc, #440]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021c2:	6013      	str	r3, [r2, #0]
		gnss->rmc->posMode = PARSE_CHAR(p);
 80021c4:	4b6d      	ldr	r3, [pc, #436]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	7852      	ldrb	r2, [r2, #1]
 80021ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
 80021d2:	4b6a      	ldr	r3, [pc, #424]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	3301      	adds	r3, #1
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b2c      	cmp	r3, #44	; 0x2c
 80021dc:	d005      	beq.n	80021ea <gnss_nmea_GetData+0x32a>
 80021de:	4b67      	ldr	r3, [pc, #412]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	3302      	adds	r3, #2
 80021e4:	4a65      	ldr	r2, [pc, #404]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e004      	b.n	80021f4 <gnss_nmea_GetData+0x334>
 80021ea:	4b64      	ldr	r3, [pc, #400]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	3301      	adds	r3, #1
 80021f0:	4a62      	ldr	r2, [pc, #392]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021f2:	6013      	str	r3, [r2, #0]
		gnss->rmc->navStatus = PARSE_CHAR(p);
 80021f4:	4b61      	ldr	r3, [pc, #388]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80021f6:	681a      	ldr	r2, [r3, #0]
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	7852      	ldrb	r2, [r2, #1]
 80021fe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 8002202:	4b5e      	ldr	r3, [pc, #376]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	2b2c      	cmp	r3, #44	; 0x2c
 800220c:	d005      	beq.n	800221a <gnss_nmea_GetData+0x35a>
 800220e:	4b5b      	ldr	r3, [pc, #364]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	3302      	adds	r3, #2
 8002214:	4a59      	ldr	r2, [pc, #356]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002216:	6013      	str	r3, [r2, #0]
 8002218:	e116      	b.n	8002448 <gnss_nmea_GetData+0x588>
 800221a:	4b58      	ldr	r3, [pc, #352]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a56      	ldr	r2, [pc, #344]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002222:	6013      	str	r3, [r2, #0]
 8002224:	e110      	b.n	8002448 <gnss_nmea_GetData+0x588>
    }

    else if(!strncmp(p, "GGA", 3))
 8002226:	4b55      	ldr	r3, [pc, #340]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2203      	movs	r2, #3
 800222c:	4954      	ldr	r1, [pc, #336]	; (8002380 <gnss_nmea_GetData+0x4c0>)
 800222e:	4618      	mov	r0, r3
 8002230:	f009 ffc7 	bl	800c1c2 <strncmp>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	f040 80ee 	bne.w	8002418 <gnss_nmea_GetData+0x558>
    {
    	p+=3;
 800223c:	4b4f      	ldr	r3, [pc, #316]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3303      	adds	r3, #3
 8002242:	4a4e      	ldr	r2, [pc, #312]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002244:	6013      	str	r3, [r2, #0]
		gnss->gga->time = PARSE_FLOAT(p);
 8002246:	4b4d      	ldr	r3, [pc, #308]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	1c5a      	adds	r2, r3, #1
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	685c      	ldr	r4, [r3, #4]
 8002250:	494a      	ldr	r1, [pc, #296]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002252:	4610      	mov	r0, r2
 8002254:	f009 fb96 	bl	800b984 <strtof>
 8002258:	eef0 7a40 	vmov.f32	s15, s0
 800225c:	edc4 7a00 	vstr	s15, [r4]
		gnss->gga->lat = PARSE_FLOAT(p);
 8002260:	4b46      	ldr	r3, [pc, #280]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1c5a      	adds	r2, r3, #1
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685c      	ldr	r4, [r3, #4]
 800226a:	4944      	ldr	r1, [pc, #272]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800226c:	4610      	mov	r0, r2
 800226e:	f009 fb89 	bl	800b984 <strtof>
 8002272:	eef0 7a40 	vmov.f32	s15, s0
 8002276:	edc4 7a01 	vstr	s15, [r4, #4]
		gnss->gga->ns = PARSE_CHAR(p);
 800227a:	4b40      	ldr	r3, [pc, #256]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	7852      	ldrb	r2, [r2, #1]
 8002284:	721a      	strb	r2, [r3, #8]
 8002286:	4b3d      	ldr	r3, [pc, #244]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	3301      	adds	r3, #1
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	2b2c      	cmp	r3, #44	; 0x2c
 8002290:	d005      	beq.n	800229e <gnss_nmea_GetData+0x3de>
 8002292:	4b3a      	ldr	r3, [pc, #232]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3302      	adds	r3, #2
 8002298:	4a38      	ldr	r2, [pc, #224]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800229a:	6013      	str	r3, [r2, #0]
 800229c:	e004      	b.n	80022a8 <gnss_nmea_GetData+0x3e8>
 800229e:	4b37      	ldr	r3, [pc, #220]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	3301      	adds	r3, #1
 80022a4:	4a35      	ldr	r2, [pc, #212]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022a6:	6013      	str	r3, [r2, #0]
		gnss->gga->lon = PARSE_FLOAT(p);
 80022a8:	4b34      	ldr	r3, [pc, #208]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1c5a      	adds	r2, r3, #1
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685c      	ldr	r4, [r3, #4]
 80022b2:	4932      	ldr	r1, [pc, #200]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022b4:	4610      	mov	r0, r2
 80022b6:	f009 fb65 	bl	800b984 <strtof>
 80022ba:	eef0 7a40 	vmov.f32	s15, s0
 80022be:	edc4 7a03 	vstr	s15, [r4, #12]
		gnss->gga->ew = PARSE_CHAR(p);
 80022c2:	4b2e      	ldr	r3, [pc, #184]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	7852      	ldrb	r2, [r2, #1]
 80022cc:	741a      	strb	r2, [r3, #16]
 80022ce:	4b2b      	ldr	r3, [pc, #172]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	3301      	adds	r3, #1
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b2c      	cmp	r3, #44	; 0x2c
 80022d8:	d005      	beq.n	80022e6 <gnss_nmea_GetData+0x426>
 80022da:	4b28      	ldr	r3, [pc, #160]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	3302      	adds	r3, #2
 80022e0:	4a26      	ldr	r2, [pc, #152]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022e2:	6013      	str	r3, [r2, #0]
 80022e4:	e004      	b.n	80022f0 <gnss_nmea_GetData+0x430>
 80022e6:	4b25      	ldr	r3, [pc, #148]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	3301      	adds	r3, #1
 80022ec:	4a23      	ldr	r2, [pc, #140]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022ee:	6013      	str	r3, [r2, #0]
		gnss->gga->quality = PARSE_INT(p);
 80022f0:	4b22      	ldr	r3, [pc, #136]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	3301      	adds	r3, #1
 80022f6:	220a      	movs	r2, #10
 80022f8:	4920      	ldr	r1, [pc, #128]	; (800237c <gnss_nmea_GetData+0x4bc>)
 80022fa:	4618      	mov	r0, r3
 80022fc:	f009 fc1a 	bl	800bb34 <strtoul>
 8002300:	4602      	mov	r2, r0
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	b252      	sxtb	r2, r2
 8002308:	745a      	strb	r2, [r3, #17]
		gnss->gga->numSV = PARSE_INT(p);
 800230a:	4b1c      	ldr	r3, [pc, #112]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	3301      	adds	r3, #1
 8002310:	220a      	movs	r2, #10
 8002312:	491a      	ldr	r1, [pc, #104]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002314:	4618      	mov	r0, r3
 8002316:	f009 fc0d 	bl	800bb34 <strtoul>
 800231a:	4602      	mov	r2, r0
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	b2d2      	uxtb	r2, r2
 8002322:	749a      	strb	r2, [r3, #18]
		gnss->gga->hdop = PARSE_FLOAT(p);
 8002324:	4b15      	ldr	r3, [pc, #84]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	1c5a      	adds	r2, r3, #1
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685c      	ldr	r4, [r3, #4]
 800232e:	4913      	ldr	r1, [pc, #76]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002330:	4610      	mov	r0, r2
 8002332:	f009 fb27 	bl	800b984 <strtof>
 8002336:	eef0 7a40 	vmov.f32	s15, s0
 800233a:	edc4 7a05 	vstr	s15, [r4, #20]
		gnss->gga->alt = PARSE_FLOAT(p);
 800233e:	4b0f      	ldr	r3, [pc, #60]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685c      	ldr	r4, [r3, #4]
 8002348:	490c      	ldr	r1, [pc, #48]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800234a:	4610      	mov	r0, r2
 800234c:	f009 fb1a 	bl	800b984 <strtof>
 8002350:	eef0 7a40 	vmov.f32	s15, s0
 8002354:	edc4 7a06 	vstr	s15, [r4, #24]
		gnss->gga->altUnit = PARSE_CHAR(p);
 8002358:	4b08      	ldr	r3, [pc, #32]	; (800237c <gnss_nmea_GetData+0x4bc>)
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	7852      	ldrb	r2, [r2, #1]
 8002362:	771a      	strb	r2, [r3, #28]
 8002364:	4b05      	ldr	r3, [pc, #20]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	3301      	adds	r3, #1
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b2c      	cmp	r3, #44	; 0x2c
 800236e:	d009      	beq.n	8002384 <gnss_nmea_GetData+0x4c4>
 8002370:	4b02      	ldr	r3, [pc, #8]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	3302      	adds	r3, #2
 8002376:	4a01      	ldr	r2, [pc, #4]	; (800237c <gnss_nmea_GetData+0x4bc>)
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	e008      	b.n	800238e <gnss_nmea_GetData+0x4ce>
 800237c:	20000718 	.word	0x20000718
 8002380:	0800fe8c 	.word	0x0800fe8c
 8002384:	4b33      	ldr	r3, [pc, #204]	; (8002454 <gnss_nmea_GetData+0x594>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	3301      	adds	r3, #1
 800238a:	4a32      	ldr	r2, [pc, #200]	; (8002454 <gnss_nmea_GetData+0x594>)
 800238c:	6013      	str	r3, [r2, #0]
		gnss->gga->sep = PARSE_FLOAT(p);
 800238e:	4b31      	ldr	r3, [pc, #196]	; (8002454 <gnss_nmea_GetData+0x594>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1c5a      	adds	r2, r3, #1
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685c      	ldr	r4, [r3, #4]
 8002398:	492e      	ldr	r1, [pc, #184]	; (8002454 <gnss_nmea_GetData+0x594>)
 800239a:	4610      	mov	r0, r2
 800239c:	f009 faf2 	bl	800b984 <strtof>
 80023a0:	eef0 7a40 	vmov.f32	s15, s0
 80023a4:	edc4 7a08 	vstr	s15, [r4, #32]
		gnss->gga->sepUnit= PARSE_CHAR(p);
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	781a      	ldrb	r2, [r3, #0]
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	ee07 2a90 	vmov	s15, r2
 80023b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023bc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
 80023c0:	4b24      	ldr	r3, [pc, #144]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3301      	adds	r3, #1
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b2c      	cmp	r3, #44	; 0x2c
 80023ca:	d005      	beq.n	80023d8 <gnss_nmea_GetData+0x518>
 80023cc:	4b21      	ldr	r3, [pc, #132]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	3302      	adds	r3, #2
 80023d2:	4a20      	ldr	r2, [pc, #128]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	e004      	b.n	80023e2 <gnss_nmea_GetData+0x522>
 80023d8:	4b1e      	ldr	r3, [pc, #120]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	3301      	adds	r3, #1
 80023de:	4a1d      	ldr	r2, [pc, #116]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023e0:	6013      	str	r3, [r2, #0]
		gnss->gga->diffAge = PARSE_FLOAT(p);
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	1c5a      	adds	r2, r3, #1
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685c      	ldr	r4, [r3, #4]
 80023ec:	4919      	ldr	r1, [pc, #100]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023ee:	4610      	mov	r0, r2
 80023f0:	f009 fac8 	bl	800b984 <strtof>
 80023f4:	eef0 7a40 	vmov.f32	s15, s0
 80023f8:	edc4 7a0a 	vstr	s15, [r4, #40]	; 0x28
		gnss->gga->diffStation = PARSE_FLOAT(p);
 80023fc:	4b15      	ldr	r3, [pc, #84]	; (8002454 <gnss_nmea_GetData+0x594>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	1c5a      	adds	r2, r3, #1
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685c      	ldr	r4, [r3, #4]
 8002406:	4913      	ldr	r1, [pc, #76]	; (8002454 <gnss_nmea_GetData+0x594>)
 8002408:	4610      	mov	r0, r2
 800240a:	f009 fabb 	bl	800b984 <strtof>
 800240e:	eef0 7a40 	vmov.f32	s15, s0
 8002412:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
 8002416:	e017      	b.n	8002448 <gnss_nmea_GetData+0x588>
    }

    else if (!strncmp(p, "GSA", 3))
 8002418:	4b0e      	ldr	r3, [pc, #56]	; (8002454 <gnss_nmea_GetData+0x594>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2203      	movs	r2, #3
 800241e:	490e      	ldr	r1, [pc, #56]	; (8002458 <gnss_nmea_GetData+0x598>)
 8002420:	4618      	mov	r0, r3
 8002422:	f009 fece 	bl	800c1c2 <strncmp>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d101      	bne.n	8002430 <gnss_nmea_GetData+0x570>
    {
    	return HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	e00c      	b.n	800244a <gnss_nmea_GetData+0x58a>
    	PARSE_FLOAT(p);
    	PARSE_FLOAT(p);
//    	PARSE_CHAR(p);
    }

    else if (!strncmp(p, "GST", 3))
 8002430:	4b08      	ldr	r3, [pc, #32]	; (8002454 <gnss_nmea_GetData+0x594>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2203      	movs	r2, #3
 8002436:	4909      	ldr	r1, [pc, #36]	; (800245c <gnss_nmea_GetData+0x59c>)
 8002438:	4618      	mov	r0, r3
 800243a:	f009 fec2 	bl	800c1c2 <strncmp>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d101      	bne.n	8002448 <gnss_nmea_GetData+0x588>
    {
    	return HAL_OK;
 8002444:	2300      	movs	r3, #0
 8002446:	e000      	b.n	800244a <gnss_nmea_GetData+0x58a>
    	PARSE_FLOAT(p);
    	PARSE_FLOAT(p);
    }


    return HAL_OK;
 8002448:	2300      	movs	r3, #0

}
 800244a:	4618      	mov	r0, r3
 800244c:	371c      	adds	r7, #28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd90      	pop	{r4, r7, pc}
 8002452:	bf00      	nop
 8002454:	20000718 	.word	0x20000718
 8002458:	0800fe90 	.word	0x0800fe90
 800245c:	0800fe94 	.word	0x0800fe94

08002460 <bus_packet_GetLength>:
void bus_packet_Packetize(uint8_t *buffer, bus_packet_t *packet);
HAL_StatusTypeDef bus_packet_EncodePacketize(uint8_t type, uint8_t apid, uint8_t ecf_flag, uint8_t *data, uint32_t data_length, uint8_t *buffer_out);

bus_sync_flag_t bus_packet_SyncFrameDetect(bus_sync_flag_t flag, uint8_t received_data);

static inline uint8_t bus_packet_GetLength(uint8_t *buffer) {return buffer[1]&0b01111111;}
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3301      	adds	r3, #1
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <float2bytes>:
 * Float to byte array conversion
 * @param value Float value
 * @param buffer Pointer to byte array
 */
static inline void float2bytes(float value, uint8_t *buffer)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	ed87 0a01 	vstr	s0, [r7, #4]
 800248a:	6038      	str	r0, [r7, #0]
    uint8_t *fpointer = (uint8_t *)&value;
 800248c:	1d3b      	adds	r3, r7, #4
 800248e:	60fb      	str	r3, [r7, #12]
    buffer[0] = fpointer[0];
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	781a      	ldrb	r2, [r3, #0]
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	701a      	strb	r2, [r3, #0]
    buffer[1] = fpointer[1];
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	3301      	adds	r3, #1
 800249c:	68fa      	ldr	r2, [r7, #12]
 800249e:	7852      	ldrb	r2, [r2, #1]
 80024a0:	701a      	strb	r2, [r3, #0]
    buffer[2] = fpointer[2];
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	3302      	adds	r3, #2
 80024a6:	68fa      	ldr	r2, [r7, #12]
 80024a8:	7892      	ldrb	r2, [r2, #2]
 80024aa:	701a      	strb	r2, [r3, #0]
    buffer[3] = fpointer[3];
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	3303      	adds	r3, #3
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	78d2      	ldrb	r2, [r2, #3]
 80024b4:	701a      	strb	r2, [r3, #0]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr

080024c2 <u16t2bytes>:
 * 16-bit unsigned integer to byte array conversion
 * @param value 16-bit unsigned integer
 * @param buffer Pointer to byte array
 */
static inline void u16t2bytes(uint16_t value, uint8_t *buffer)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	4603      	mov	r3, r0
 80024ca:	6039      	str	r1, [r7, #0]
 80024cc:	80fb      	strh	r3, [r7, #6]
    buffer[1] = (value>>8) & 0xFF;
 80024ce:	88fb      	ldrh	r3, [r7, #6]
 80024d0:	0a1b      	lsrs	r3, r3, #8
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	3301      	adds	r3, #1
 80024d8:	b2d2      	uxtb	r2, r2
 80024da:	701a      	strb	r2, [r3, #0]
    buffer[0] = value & 0xFF;
 80024dc:	88fb      	ldrh	r3, [r7, #6]
 80024de:	b2da      	uxtb	r2, r3
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	701a      	strb	r2, [r3, #0]
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <dataRequired2bytes>:
 * @param requirements Data required. See tc_required_data_t
 * @param pdata Pointer to byte array
 * @return Length of byte array
 */
uint8_t dataRequired2bytes(tc_required_data_t requirements, uint8_t *pdata)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	6039      	str	r1, [r7, #0]
 80024fa:	80fb      	strh	r3, [r7, #6]
	uint8_t *ini = pdata;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	60fb      	str	r3, [r7, #12]
	u16t2bytes(requirements, pdata); pdata+=2; // 2 Bytes
 8002500:	88fb      	ldrh	r3, [r7, #6]
 8002502:	6839      	ldr	r1, [r7, #0]
 8002504:	4618      	mov	r0, r3
 8002506:	f7ff ffdc 	bl	80024c2 <u16t2bytes>
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	3302      	adds	r3, #2
 800250e:	603b      	str	r3, [r7, #0]
	if(requirements&REQUIRED_DATA_GNSS)	// 18 Bytes
 8002510:	88fb      	ldrh	r3, [r7, #6]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d03f      	beq.n	800259a <dataRequired2bytes+0xaa>
	{
		float2bytes(gnss.rmc->lat, pdata); pdata+=4;
 800251a:	4baa      	ldr	r3, [pc, #680]	; (80027c4 <dataRequired2bytes+0x2d4>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002522:	6838      	ldr	r0, [r7, #0]
 8002524:	eeb0 0a67 	vmov.f32	s0, s15
 8002528:	f7ff ffaa 	bl	8002480 <float2bytes>
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3304      	adds	r3, #4
 8002530:	603b      	str	r3, [r7, #0]
		*pdata = gnss.rmc->ns; pdata++;
 8002532:	4ba4      	ldr	r3, [pc, #656]	; (80027c4 <dataRequired2bytes+0x2d4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	7b1a      	ldrb	r2, [r3, #12]
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	3301      	adds	r3, #1
 8002540:	603b      	str	r3, [r7, #0]
		float2bytes(gnss.rmc->lon, pdata); pdata+=4;
 8002542:	4ba0      	ldr	r3, [pc, #640]	; (80027c4 <dataRequired2bytes+0x2d4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	edd3 7a04 	vldr	s15, [r3, #16]
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	eeb0 0a67 	vmov.f32	s0, s15
 8002550:	f7ff ff96 	bl	8002480 <float2bytes>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	3304      	adds	r3, #4
 8002558:	603b      	str	r3, [r7, #0]
		*pdata = gnss.rmc->ew; pdata++;
 800255a:	4b9a      	ldr	r3, [pc, #616]	; (80027c4 <dataRequired2bytes+0x2d4>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	7d1a      	ldrb	r2, [r3, #20]
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	701a      	strb	r2, [r3, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	3301      	adds	r3, #1
 8002568:	603b      	str	r3, [r7, #0]
		float2bytes(gnss.gga->alt, pdata); pdata+=4;
 800256a:	4b96      	ldr	r3, [pc, #600]	; (80027c4 <dataRequired2bytes+0x2d4>)
 800256c:	685b      	ldr	r3, [r3, #4]
 800256e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002572:	6838      	ldr	r0, [r7, #0]
 8002574:	eeb0 0a67 	vmov.f32	s0, s15
 8002578:	f7ff ff82 	bl	8002480 <float2bytes>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	3304      	adds	r3, #4
 8002580:	603b      	str	r3, [r7, #0]
		float2bytes(gnss.gga->sep, pdata); pdata+=4;
 8002582:	4b90      	ldr	r3, [pc, #576]	; (80027c4 <dataRequired2bytes+0x2d4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	edd3 7a08 	vldr	s15, [r3, #32]
 800258a:	6838      	ldr	r0, [r7, #0]
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	f7ff ff76 	bl	8002480 <float2bytes>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3304      	adds	r3, #4
 8002598:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_ACELL) // 6 Bytes
 800259a:	88fb      	ldrh	r3, [r7, #6]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d020      	beq.n	80025e6 <dataRequired2bytes+0xf6>
	{
		u16t2bytes(imu.acell_x, pdata); pdata+=2;
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <dataRequired2bytes+0x2d8>)
 80025a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	6839      	ldr	r1, [r7, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff ff87 	bl	80024c2 <u16t2bytes>
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	3302      	adds	r3, #2
 80025b8:	603b      	str	r3, [r7, #0]
		u16t2bytes(imu.acell_y, pdata); pdata+=2;
 80025ba:	4b83      	ldr	r3, [pc, #524]	; (80027c8 <dataRequired2bytes+0x2d8>)
 80025bc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	6839      	ldr	r1, [r7, #0]
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff7c 	bl	80024c2 <u16t2bytes>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	3302      	adds	r3, #2
 80025ce:	603b      	str	r3, [r7, #0]
		u16t2bytes(imu.acell_z, pdata); pdata+=2;
 80025d0:	4b7d      	ldr	r3, [pc, #500]	; (80027c8 <dataRequired2bytes+0x2d8>)
 80025d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80025d6:	b29b      	uxth	r3, r3
 80025d8:	6839      	ldr	r1, [r7, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7ff ff71 	bl	80024c2 <u16t2bytes>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	3302      	adds	r3, #2
 80025e4:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_GYRO) // 6 Bytes
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	f003 0304 	and.w	r3, r3, #4
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d020      	beq.n	8002632 <dataRequired2bytes+0x142>
	{
		u16t2bytes(imu.gyro_x, pdata); pdata+=2;
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <dataRequired2bytes+0x2d8>)
 80025f2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	6839      	ldr	r1, [r7, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f7ff ff61 	bl	80024c2 <u16t2bytes>
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	3302      	adds	r3, #2
 8002604:	603b      	str	r3, [r7, #0]
		u16t2bytes(imu.gyro_y, pdata); pdata+=2;
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <dataRequired2bytes+0x2d8>)
 8002608:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800260c:	b29b      	uxth	r3, r3
 800260e:	6839      	ldr	r1, [r7, #0]
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff56 	bl	80024c2 <u16t2bytes>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	3302      	adds	r3, #2
 800261a:	603b      	str	r3, [r7, #0]
		u16t2bytes(imu.gyro_z, pdata); pdata+=2;
 800261c:	4b6a      	ldr	r3, [pc, #424]	; (80027c8 <dataRequired2bytes+0x2d8>)
 800261e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002622:	b29b      	uxth	r3, r3
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff ff4b 	bl	80024c2 <u16t2bytes>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3302      	adds	r3, #2
 8002630:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_MAGNETOMETER) // 6 Bytes
 8002632:	88fb      	ldrh	r3, [r7, #6]
 8002634:	f003 0308 	and.w	r3, r3, #8
 8002638:	2b00      	cmp	r3, #0
 800263a:	d020      	beq.n	800267e <dataRequired2bytes+0x18e>
	{
		u16t2bytes(mag.x, pdata); pdata+=2;
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <dataRequired2bytes+0x2dc>)
 800263e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002642:	b29b      	uxth	r3, r3
 8002644:	6839      	ldr	r1, [r7, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff3b 	bl	80024c2 <u16t2bytes>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	3302      	adds	r3, #2
 8002650:	603b      	str	r3, [r7, #0]
		u16t2bytes(mag.y, pdata); pdata+=2;
 8002652:	4b5e      	ldr	r3, [pc, #376]	; (80027cc <dataRequired2bytes+0x2dc>)
 8002654:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002658:	b29b      	uxth	r3, r3
 800265a:	6839      	ldr	r1, [r7, #0]
 800265c:	4618      	mov	r0, r3
 800265e:	f7ff ff30 	bl	80024c2 <u16t2bytes>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	3302      	adds	r3, #2
 8002666:	603b      	str	r3, [r7, #0]
		u16t2bytes(mag.z, pdata); pdata+=2;
 8002668:	4b58      	ldr	r3, [pc, #352]	; (80027cc <dataRequired2bytes+0x2dc>)
 800266a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800266e:	b29b      	uxth	r3, r3
 8002670:	6839      	ldr	r1, [r7, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff25 	bl	80024c2 <u16t2bytes>
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	3302      	adds	r3, #2
 800267c:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_PRESSURE) // 4 Bytes
 800267e:	88fb      	ldrh	r3, [r7, #6]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00a      	beq.n	800269e <dataRequired2bytes+0x1ae>
	{
		float2bytes(altimeter.pressure, pdata); pdata+=4;
 8002688:	4b51      	ldr	r3, [pc, #324]	; (80027d0 <dataRequired2bytes+0x2e0>)
 800268a:	edd3 7a04 	vldr	s15, [r3, #16]
 800268e:	6838      	ldr	r0, [r7, #0]
 8002690:	eeb0 0a67 	vmov.f32	s0, s15
 8002694:	f7ff fef4 	bl	8002480 <float2bytes>
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	3304      	adds	r3, #4
 800269c:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_TEMPERATURE_OUTDOOR) // 4 Bytes
 800269e:	88fb      	ldrh	r3, [r7, #6]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d00a      	beq.n	80026be <dataRequired2bytes+0x1ce>
	{
		float2bytes(altimeter.temp, pdata); pdata+=4;
 80026a8:	4b49      	ldr	r3, [pc, #292]	; (80027d0 <dataRequired2bytes+0x2e0>)
 80026aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80026ae:	6838      	ldr	r0, [r7, #0]
 80026b0:	eeb0 0a67 	vmov.f32	s0, s15
 80026b4:	f7ff fee4 	bl	8002480 <float2bytes>
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	3304      	adds	r3, #4
 80026bc:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_TEMPERATURE_UP) // 4 Bytes 1
 80026be:	88fb      	ldrh	r3, [r7, #6]
 80026c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <dataRequired2bytes+0x1ee>
	{
		float2bytes(temps.temp_up, pdata); pdata+=4;
 80026c8:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <dataRequired2bytes+0x2e4>)
 80026ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80026ce:	6838      	ldr	r0, [r7, #0]
 80026d0:	eeb0 0a67 	vmov.f32	s0, s15
 80026d4:	f7ff fed4 	bl	8002480 <float2bytes>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	3304      	adds	r3, #4
 80026dc:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_TEMPERATURE_BATTERY) // 4 Bytes 2
 80026de:	88fb      	ldrh	r3, [r7, #6]
 80026e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d00a      	beq.n	80026fe <dataRequired2bytes+0x20e>
	{
		float2bytes(temps.temp_battery, pdata); pdata+=4;
 80026e8:	4b3a      	ldr	r3, [pc, #232]	; (80027d4 <dataRequired2bytes+0x2e4>)
 80026ea:	edd3 7a07 	vldr	s15, [r3, #28]
 80026ee:	6838      	ldr	r0, [r7, #0]
 80026f0:	eeb0 0a67 	vmov.f32	s0, s15
 80026f4:	f7ff fec4 	bl	8002480 <float2bytes>
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	3304      	adds	r3, #4
 80026fc:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_TEMPERATURE_DOWN) // 4 Bytes 3
 80026fe:	88fb      	ldrh	r3, [r7, #6]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00a      	beq.n	800271e <dataRequired2bytes+0x22e>
	{
		float2bytes(temps.temp_down, pdata); pdata+=4;
 8002708:	4b32      	ldr	r3, [pc, #200]	; (80027d4 <dataRequired2bytes+0x2e4>)
 800270a:	edd3 7a08 	vldr	s15, [r3, #32]
 800270e:	6838      	ldr	r0, [r7, #0]
 8002710:	eeb0 0a67 	vmov.f32	s0, s15
 8002714:	f7ff feb4 	bl	8002480 <float2bytes>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	3304      	adds	r3, #4
 800271c:	603b      	str	r3, [r7, #0]
	}
	// 58 bytes hasta aquí

	if(requirements&REQUIRED_DATA_PV_VOLTAGE) // 2 Bytes
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002724:	2b00      	cmp	r3, #0
 8002726:	d008      	beq.n	800273a <dataRequired2bytes+0x24a>
	{
		u16t2bytes(eps.v_in, pdata); pdata+=2;
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <dataRequired2bytes+0x2e8>)
 800272a:	881b      	ldrh	r3, [r3, #0]
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f7ff fec7 	bl	80024c2 <u16t2bytes>
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	3302      	adds	r3, #2
 8002738:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_PV_CURRENT) // 2 Bytes
 800273a:	88fb      	ldrh	r3, [r7, #6]
 800273c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d008      	beq.n	8002756 <dataRequired2bytes+0x266>
	{
		u16t2bytes(eps.i_in, pdata); pdata+=2;
 8002744:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <dataRequired2bytes+0x2e8>)
 8002746:	891b      	ldrh	r3, [r3, #8]
 8002748:	6839      	ldr	r1, [r7, #0]
 800274a:	4618      	mov	r0, r3
 800274c:	f7ff feb9 	bl	80024c2 <u16t2bytes>
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	3302      	adds	r3, #2
 8002754:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_BATTERY_VOLTAGE) // 2 Bytes
 8002756:	88fb      	ldrh	r3, [r7, #6]
 8002758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800275c:	2b00      	cmp	r3, #0
 800275e:	d008      	beq.n	8002772 <dataRequired2bytes+0x282>
	{
		u16t2bytes(eps.v_bat, pdata); pdata+=2;
 8002760:	4b1d      	ldr	r3, [pc, #116]	; (80027d8 <dataRequired2bytes+0x2e8>)
 8002762:	889b      	ldrh	r3, [r3, #4]
 8002764:	6839      	ldr	r1, [r7, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff feab 	bl	80024c2 <u16t2bytes>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	3302      	adds	r3, #2
 8002770:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_BATTERY_CURRENT) // 2 Bytes
 8002772:	88fb      	ldrh	r3, [r7, #6]
 8002774:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d008      	beq.n	800278e <dataRequired2bytes+0x29e>
	{
		u16t2bytes(eps.i_bat, pdata); pdata+=2;
 800277c:	4b16      	ldr	r3, [pc, #88]	; (80027d8 <dataRequired2bytes+0x2e8>)
 800277e:	88db      	ldrh	r3, [r3, #6]
 8002780:	6839      	ldr	r1, [r7, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f7ff fe9d 	bl	80024c2 <u16t2bytes>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	3302      	adds	r3, #2
 800278c:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_BATTERY_CHARGING) // 2 Bytes
 800278e:	88fb      	ldrh	r3, [r7, #6]
 8002790:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d008      	beq.n	80027aa <dataRequired2bytes+0x2ba>
	{
		u16t2bytes(eps.charge_state, pdata); pdata+=2;
 8002798:	4b0f      	ldr	r3, [pc, #60]	; (80027d8 <dataRequired2bytes+0x2e8>)
 800279a:	8a5b      	ldrh	r3, [r3, #18]
 800279c:	6839      	ldr	r1, [r7, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7ff fe8f 	bl	80024c2 <u16t2bytes>
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	3302      	adds	r3, #2
 80027a8:	603b      	str	r3, [r7, #0]
	}
	if(requirements&REQUIRED_DATA_BATTERY_DIETEMP) // 2 Bytes
 80027aa:	88fb      	ldrh	r3, [r7, #6]
 80027ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d015      	beq.n	80027e0 <dataRequired2bytes+0x2f0>
	{
		u16t2bytes(eps.die_temp, pdata); pdata+=2;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <dataRequired2bytes+0x2e8>)
 80027b6:	899b      	ldrh	r3, [r3, #12]
 80027b8:	6839      	ldr	r1, [r7, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fe81 	bl	80024c2 <u16t2bytes>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	e00b      	b.n	80027dc <dataRequired2bytes+0x2ec>
 80027c4:	20000000 	.word	0x20000000
 80027c8:	2000020c 	.word	0x2000020c
 80027cc:	2000021c 	.word	0x2000021c
 80027d0:	20000228 	.word	0x20000228
 80027d4:	20000240 	.word	0x20000240
 80027d8:	20000824 	.word	0x20000824
 80027dc:	3302      	adds	r3, #2
 80027de:	603b      	str	r3, [r7, #0]
	}
	// 58+12 bytes hasta aquí

	if(requirements&REQUIRED_DATA_CURRENT_TIME) // 4 Bytes
 80027e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	da0b      	bge.n	8002800 <dataRequired2bytes+0x310>
	{
		float2bytes(gnss.rmc->time, pdata); pdata+=4;
 80027e8:	4b09      	ldr	r3, [pc, #36]	; (8002810 <dataRequired2bytes+0x320>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	6838      	ldr	r0, [r7, #0]
 80027f2:	eeb0 0a67 	vmov.f32	s0, s15
 80027f6:	f7ff fe43 	bl	8002480 <float2bytes>
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	3304      	adds	r3, #4
 80027fe:	603b      	str	r3, [r7, #0]
	}
	// 58+12+4 bytes hasta aquí

	return (pdata-ini);
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	1ad3      	subs	r3, r2, r3
 8002806:	b2db      	uxtb	r3, r3
}
 8002808:	4618      	mov	r0, r3
 800280a:	3710      	adds	r7, #16
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	20000000 	.word	0x20000000

08002814 <check_status>:

/**
 * Check status of different subsystems and components
 */
void check_status()
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	if(sc_status.obc&OBC_ERROR_OTHER);
	if(sc_status.obc&OBC_ERROR_GNSS);
	if(sc_status.obc&OBC_ERROR_IMU)			aocs_config_imu();
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <check_status+0x48>)
 800281a:	881b      	ldrh	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <check_status+0x14>
 8002824:	f7fe ffb4 	bl	8001790 <aocs_config_imu>
	if(sc_status.obc&OBC_ERROR_MAG)			aocs_config_magnetometer();
 8002828:	4b0c      	ldr	r3, [pc, #48]	; (800285c <check_status+0x48>)
 800282a:	881b      	ldrh	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d001      	beq.n	8002838 <check_status+0x24>
 8002834:	f7fe ff8c 	bl	8001750 <aocs_config_magnetometer>
	if(sc_status.obc&OBC_ERROR_ALTIM)		aocs_config_altimeter();
 8002838:	4b08      	ldr	r3, [pc, #32]	; (800285c <check_status+0x48>)
 800283a:	881b      	ldrh	r3, [r3, #0]
 800283c:	f003 0310 	and.w	r3, r3, #16
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <check_status+0x34>
 8002844:	f7fe ffc4 	bl	80017d0 <aocs_config_altimeter>
	if(sc_status.obc&OBC_ERROR_TEMPS)		aocs_config_temp();
 8002848:	4b04      	ldr	r3, [pc, #16]	; (800285c <check_status+0x48>)
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	f003 0320 	and.w	r3, r3, #32
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <check_status+0x44>
 8002854:	f7fe ffdc 	bl	8001810 <aocs_config_temp>
	if(sc_status.obc&OBC_ERROR_RX_EPS);
	if(sc_status.obc&OBC_ERROR_TX_EPS);
	if(sc_status.obc&OBC_ERROR_RX_MODEM);
	if(sc_status.obc&OBC_ERROR_TX_MODEM);
	if(sc_status.obc&OBC_ERROR_PUBX);
}
 8002858:	bf00      	nop
 800285a:	bd80      	pop	{r7, pc}
 800285c:	2000081c 	.word	0x2000081c

08002860 <send_TM>:
/**
 * Send telemetry data to modem for transmission to ground
 * @return HAL status
 */
HAL_StatusTypeDef send_TM()
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
 8002864:	4b0a      	ldr	r3, [pc, #40]	; (8002890 <send_TM+0x30>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
	memcpy(modem_buffer_tx, BUS_PACKET_FRAME_SYNC, 4);
 800286a:	4b0a      	ldr	r3, [pc, #40]	; (8002894 <send_TM+0x34>)
 800286c:	601a      	str	r2, [r3, #0]
	return HAL_UART_Transmit_DMA(MODEM_UART_HANDLE, modem_buffer_tx, (bus_packet_GetLength(modem_data_tx) + BUS_PACKET_FRAME_SYNC_SIZE));
 800286e:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <send_TM+0x38>)
 8002870:	4618      	mov	r0, r3
 8002872:	f7ff fdf5 	bl	8002460 <bus_packet_GetLength>
 8002876:	4603      	mov	r3, r0
 8002878:	b29b      	uxth	r3, r3
 800287a:	3304      	adds	r3, #4
 800287c:	b29b      	uxth	r3, r3
 800287e:	461a      	mov	r2, r3
 8002880:	4904      	ldr	r1, [pc, #16]	; (8002894 <send_TM+0x34>)
 8002882:	4806      	ldr	r0, [pc, #24]	; (800289c <send_TM+0x3c>)
 8002884:	f006 fd7c 	bl	8009380 <HAL_UART_Transmit_DMA>
 8002888:	4603      	mov	r3, r0
}
 800288a:	4618      	mov	r0, r3
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	0800fea8 	.word	0x0800fea8
 8002894:	2000071c 	.word	0x2000071c
 8002898:	20000720 	.word	0x20000720
 800289c:	200008dc 	.word	0x200008dc

080028a0 <send_programmed_TM>:
/**
 * Send programmed telemetry data to modem for transmission to ground
 * @return HAL status
 */
HAL_StatusTypeDef send_programmed_TM()
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af02      	add	r7, sp, #8
	static uint8_t data_length;
	HAL_StatusTypeDef err;
	data_length = dataRequired2bytes(programmed_tm, buffer_data);
 80028a6:	4b1c      	ldr	r3, [pc, #112]	; (8002918 <send_programmed_TM+0x78>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	491c      	ldr	r1, [pc, #112]	; (800291c <send_programmed_TM+0x7c>)
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fe1f 	bl	80024f0 <dataRequired2bytes>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b1a      	ldr	r3, [pc, #104]	; (8002920 <send_programmed_TM+0x80>)
 80028b8:	701a      	strb	r2, [r3, #0]

	err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_PROGRAMMED_TELEMETRY,
 80028ba:	4b19      	ldr	r3, [pc, #100]	; (8002920 <send_programmed_TM+0x80>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <send_programmed_TM+0x84>)
 80028c2:	9301      	str	r3, [sp, #4]
 80028c4:	9200      	str	r2, [sp, #0]
 80028c6:	4b15      	ldr	r3, [pc, #84]	; (800291c <send_programmed_TM+0x7c>)
 80028c8:	2201      	movs	r2, #1
 80028ca:	2100      	movs	r1, #0
 80028cc:	2000      	movs	r0, #0
 80028ce:	f7ff f9f7 	bl	8001cc0 <bus_packet_EncodePacketize>
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
			BUS_PACKET_ECF_EXIST, buffer_data, data_length,
			modem_data_tx);
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d108      	bne.n	80028ee <send_programmed_TM+0x4e>

	err = send_TM();
 80028dc:	f7ff ffc0 	bl	8002860 <send_TM>
 80028e0:	4603      	mov	r3, r0
 80028e2:	71fb      	strb	r3, [r7, #7]
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 80028e4:	79fb      	ldrb	r3, [r7, #7]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d103      	bne.n	80028f2 <send_programmed_TM+0x52>

	return HAL_OK;
 80028ea:	2300      	movs	r3, #0
 80028ec:	e00f      	b.n	800290e <send_programmed_TM+0x6e>
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 80028ee:	bf00      	nop
 80028f0:	e000      	b.n	80028f4 <send_programmed_TM+0x54>
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 80028f2:	bf00      	nop

	ERROR_PROCCESING_TC:
	bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_REPORT_FAULT_TC,
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <send_programmed_TM+0x84>)
 80028f6:	9301      	str	r3, [sp, #4]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9300      	str	r3, [sp, #0]
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <send_programmed_TM+0x7c>)
 80028fe:	2201      	movs	r2, #1
 8002900:	2110      	movs	r1, #16
 8002902:	2000      	movs	r0, #0
 8002904:	f7ff f9dc 	bl	8001cc0 <bus_packet_EncodePacketize>
			BUS_PACKET_ECF_EXIST, buffer_data, 0, modem_data_tx);
	send_TM();
 8002908:	f7ff ffaa 	bl	8002860 <send_TM>
	return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008
 800291c:	200007a0 	.word	0x200007a0
 8002920:	20000838 	.word	0x20000838
 8002924:	20000720 	.word	0x20000720

08002928 <send_data_saving>:
/**
 * Send telemetry data to modem for saving data
 * @return HAL status
 */
HAL_StatusTypeDef send_data_saving()
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b084      	sub	sp, #16
 800292c:	af02      	add	r7, sp, #8
	static uint8_t data_length;
	HAL_StatusTypeDef err;
	data_length = dataRequired2bytes(REQUIRED_DATA_ALL, buffer_data);
 800292e:	491b      	ldr	r1, [pc, #108]	; (800299c <send_data_saving+0x74>)
 8002930:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8002934:	f7ff fddc 	bl	80024f0 <dataRequired2bytes>
 8002938:	4603      	mov	r3, r0
 800293a:	461a      	mov	r2, r3
 800293c:	4b18      	ldr	r3, [pc, #96]	; (80029a0 <send_data_saving+0x78>)
 800293e:	701a      	strb	r2, [r3, #0]

	err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TC, APID_BUS_DATA_SAVING,
 8002940:	4b17      	ldr	r3, [pc, #92]	; (80029a0 <send_data_saving+0x78>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	461a      	mov	r2, r3
 8002946:	4b17      	ldr	r3, [pc, #92]	; (80029a4 <send_data_saving+0x7c>)
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	9200      	str	r2, [sp, #0]
 800294c:	4b13      	ldr	r3, [pc, #76]	; (800299c <send_data_saving+0x74>)
 800294e:	2201      	movs	r2, #1
 8002950:	2146      	movs	r1, #70	; 0x46
 8002952:	2001      	movs	r0, #1
 8002954:	f7ff f9b4 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002958:	4603      	mov	r3, r0
 800295a:	71fb      	strb	r3, [r7, #7]
			BUS_PACKET_ECF_EXIST, buffer_data, data_length,
			modem_data_tx);
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d108      	bne.n	8002974 <send_data_saving+0x4c>

	err = send_TM();
 8002962:	f7ff ff7d 	bl	8002860 <send_TM>
 8002966:	4603      	mov	r3, r0
 8002968:	71fb      	strb	r3, [r7, #7]
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d103      	bne.n	8002978 <send_data_saving+0x50>

	return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e00f      	b.n	8002994 <send_data_saving+0x6c>
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002974:	bf00      	nop
 8002976:	e000      	b.n	800297a <send_data_saving+0x52>
	if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002978:	bf00      	nop

	ERROR_PROCCESING_TC:
	bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_REPORT_FAULT_TC,
 800297a:	4b0a      	ldr	r3, [pc, #40]	; (80029a4 <send_data_saving+0x7c>)
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	2300      	movs	r3, #0
 8002980:	9300      	str	r3, [sp, #0]
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <send_data_saving+0x74>)
 8002984:	2201      	movs	r2, #1
 8002986:	2110      	movs	r1, #16
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff f999 	bl	8001cc0 <bus_packet_EncodePacketize>
			BUS_PACKET_ECF_EXIST, buffer_data, 0, modem_data_tx);
	send_TM();
 800298e:	f7ff ff67 	bl	8002860 <send_TM>
	return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	200007a0 	.word	0x200007a0
 80029a0:	20000839 	.word	0x20000839
 80029a4:	20000720 	.word	0x20000720

080029a8 <send_ack>:
 * Send ACK
 * @param huart UART handle to send packet.
 * @return HAL status
 */
HAL_StatusTypeDef send_ack(UART_HandleTypeDef *huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b086      	sub	sp, #24
 80029ac:	af02      	add	r7, sp, #8
 80029ae:	6078      	str	r0, [r7, #4]
	static uint8_t data[10];

	HAL_StatusTypeDef err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_BUS_ACK,
 80029b0:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <send_ack+0x58>)
 80029b2:	9301      	str	r3, [sp, #4]
 80029b4:	2300      	movs	r3, #0
 80029b6:	9300      	str	r3, [sp, #0]
 80029b8:	2300      	movs	r3, #0
 80029ba:	2201      	movs	r2, #1
 80029bc:	2151      	movs	r1, #81	; 0x51
 80029be:	2000      	movs	r0, #0
 80029c0:	f7ff f97e 	bl	8001cc0 <bus_packet_EncodePacketize>
 80029c4:	4603      	mov	r3, r0
 80029c6:	73fb      	strb	r3, [r7, #15]
			BUS_PACKET_ECF_EXIST, (uint8_t *)NULL, 0,
			data+BUS_PACKET_DATA_SIZE);
	if(err != HAL_OK) return err;
 80029c8:	7bfb      	ldrb	r3, [r7, #15]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <send_ack+0x2a>
 80029ce:	7bfb      	ldrb	r3, [r7, #15]
 80029d0:	e012      	b.n	80029f8 <send_ack+0x50>
 80029d2:	4b0c      	ldr	r3, [pc, #48]	; (8002a04 <send_ack+0x5c>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
	memcpy(data, BUS_PACKET_FRAME_SYNC, 4);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <send_ack+0x60>)
 80029da:	601a      	str	r2, [r3, #0]
	return HAL_UART_Transmit(huart, data, (bus_packet_GetLength(data+BUS_PACKET_DATA_SIZE) + BUS_PACKET_FRAME_SYNC_SIZE), 2);
 80029dc:	4b08      	ldr	r3, [pc, #32]	; (8002a00 <send_ack+0x58>)
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fd3e 	bl	8002460 <bus_packet_GetLength>
 80029e4:	4603      	mov	r3, r0
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3304      	adds	r3, #4
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	2302      	movs	r3, #2
 80029ee:	4906      	ldr	r1, [pc, #24]	; (8002a08 <send_ack+0x60>)
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f006 fbdb 	bl	80091ac <HAL_UART_Transmit>
 80029f6:	4603      	mov	r3, r0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	200008b7 	.word	0x200008b7
 8002a04:	0800fea8 	.word	0x0800fea8
 8002a08:	2000083c 	.word	0x2000083c

08002a0c <send_nack>:
 * Send NACK
 * @param huart UART handle to send packet.
 * @return HAL status
 */
HAL_StatusTypeDef send_nack(UART_HandleTypeDef *huart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b086      	sub	sp, #24
 8002a10:	af02      	add	r7, sp, #8
 8002a12:	6078      	str	r0, [r7, #4]
	static uint8_t data[10];

	 HAL_StatusTypeDef err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_BUS_NACK,
 8002a14:	4b13      	ldr	r3, [pc, #76]	; (8002a64 <send_nack+0x58>)
 8002a16:	9301      	str	r3, [sp, #4]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2150      	movs	r1, #80	; 0x50
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7ff f94c 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	73fb      	strb	r3, [r7, #15]
			BUS_PACKET_ECF_EXIST, (uint8_t *)NULL, 0,
			data+BUS_PACKET_DATA_SIZE);
	if(err != HAL_OK) return err;
 8002a2c:	7bfb      	ldrb	r3, [r7, #15]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d001      	beq.n	8002a36 <send_nack+0x2a>
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
 8002a34:	e012      	b.n	8002a5c <send_nack+0x50>
 8002a36:	4b0c      	ldr	r3, [pc, #48]	; (8002a68 <send_nack+0x5c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	461a      	mov	r2, r3
	memcpy(data, BUS_PACKET_FRAME_SYNC, 4);
 8002a3c:	4b0b      	ldr	r3, [pc, #44]	; (8002a6c <send_nack+0x60>)
 8002a3e:	601a      	str	r2, [r3, #0]
	return HAL_UART_Transmit(huart, data, (bus_packet_GetLength(data+BUS_PACKET_DATA_SIZE) + BUS_PACKET_FRAME_SYNC_SIZE), 2);
 8002a40:	4b08      	ldr	r3, [pc, #32]	; (8002a64 <send_nack+0x58>)
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fd0c 	bl	8002460 <bus_packet_GetLength>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	2302      	movs	r3, #2
 8002a52:	4906      	ldr	r1, [pc, #24]	; (8002a6c <send_nack+0x60>)
 8002a54:	6878      	ldr	r0, [r7, #4]
 8002a56:	f006 fba9 	bl	80091ac <HAL_UART_Transmit>
 8002a5a:	4603      	mov	r3, r0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3710      	adds	r7, #16
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	200008c3 	.word	0x200008c3
 8002a68:	0800fea8 	.word	0x0800fea8
 8002a6c:	20000848 	.word	0x20000848

08002a70 <intelliOBC_TC>:
 * Intelligence for a received telecommand
 * @param apid Received APID
 * @param data Received data
 */
void intelliOBC_TC(apid_t apid, uint8_t *data)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	4603      	mov	r3, r0
 8002a78:	6039      	str	r1, [r7, #0]
 8002a7a:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef err;
	switch (apid)
 8002a7c:	79fb      	ldrb	r3, [r7, #7]
 8002a7e:	2b31      	cmp	r3, #49	; 0x31
 8002a80:	dc2e      	bgt.n	8002ae0 <intelliOBC_TC+0x70>
 8002a82:	2b20      	cmp	r3, #32
 8002a84:	f2c0 8131 	blt.w	8002cea <intelliOBC_TC+0x27a>
 8002a88:	3b20      	subs	r3, #32
 8002a8a:	2b11      	cmp	r3, #17
 8002a8c:	f200 812d 	bhi.w	8002cea <intelliOBC_TC+0x27a>
 8002a90:	a201      	add	r2, pc, #4	; (adr r2, 8002a98 <intelliOBC_TC+0x28>)
 8002a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a96:	bf00      	nop
 8002a98:	08002ae9 	.word	0x08002ae9
 8002a9c:	08002aed 	.word	0x08002aed
 8002aa0:	08002b1f 	.word	0x08002b1f
 8002aa4:	08002b51 	.word	0x08002b51
 8002aa8:	08002b83 	.word	0x08002b83
 8002aac:	08002ceb 	.word	0x08002ceb
 8002ab0:	08002ceb 	.word	0x08002ceb
 8002ab4:	08002ceb 	.word	0x08002ceb
 8002ab8:	08002ceb 	.word	0x08002ceb
 8002abc:	08002ceb 	.word	0x08002ceb
 8002ac0:	08002ceb 	.word	0x08002ceb
 8002ac4:	08002ceb 	.word	0x08002ceb
 8002ac8:	08002ceb 	.word	0x08002ceb
 8002acc:	08002ceb 	.word	0x08002ceb
 8002ad0:	08002ceb 	.word	0x08002ceb
 8002ad4:	08002ceb 	.word	0x08002ceb
 8002ad8:	08002c15 	.word	0x08002c15
 8002adc:	08002bdb 	.word	0x08002bdb
 8002ae0:	2b64      	cmp	r3, #100	; 0x64
 8002ae2:	f000 80d6 	beq.w	8002c92 <intelliOBC_TC+0x222>
 8002ae6:	e100      	b.n	8002cea <intelliOBC_TC+0x27a>
	{

	case APID_TC_PROGRAMMED_TELECOMMAND:
		asm("NOP");
 8002ae8:	bf00      	nop
		break;
 8002aea:	e114      	b.n	8002d16 <intelliOBC_TC+0x2a6>

	case APID_TC_REQUIRED_REPORT_OBC:
		err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_REPORT_OBC, BUS_PACKET_ECF_EXIST,
 8002aec:	4b8c      	ldr	r3, [pc, #560]	; (8002d20 <intelliOBC_TC+0x2b0>)
 8002aee:	9301      	str	r3, [sp, #4]
 8002af0:	2302      	movs	r3, #2
 8002af2:	9300      	str	r3, [sp, #0]
 8002af4:	4b8b      	ldr	r3, [pc, #556]	; (8002d24 <intelliOBC_TC+0x2b4>)
 8002af6:	2201      	movs	r2, #1
 8002af8:	2101      	movs	r1, #1
 8002afa:	2000      	movs	r0, #0
 8002afc:	f7ff f8e0 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002b00:	4603      	mov	r3, r0
 8002b02:	73fb      	strb	r3, [r7, #15]
				(uint8_t *)&sc_status.obc, 2, modem_data_tx);
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002b04:	7bfb      	ldrb	r3, [r7, #15]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f040 80e2 	bne.w	8002cd0 <intelliOBC_TC+0x260>

		err = send_TM();
 8002b0c:	f7ff fea8 	bl	8002860 <send_TM>
 8002b10:	4603      	mov	r3, r0
 8002b12:	73fb      	strb	r3, [r7, #15]
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002b14:	7bfb      	ldrb	r3, [r7, #15]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 80f4 	beq.w	8002d04 <intelliOBC_TC+0x294>
 8002b1c:	e0e5      	b.n	8002cea <intelliOBC_TC+0x27a>

		break;

	case APID_TC_REQUIRED_REPORT_EPS:
		err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_REPORT_EPS, BUS_PACKET_ECF_EXIST,
 8002b1e:	4b80      	ldr	r3, [pc, #512]	; (8002d20 <intelliOBC_TC+0x2b0>)
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	2302      	movs	r3, #2
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	4b80      	ldr	r3, [pc, #512]	; (8002d28 <intelliOBC_TC+0x2b8>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	2000      	movs	r0, #0
 8002b2e:	f7ff f8c7 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002b32:	4603      	mov	r3, r0
 8002b34:	73fb      	strb	r3, [r7, #15]
				(uint8_t *)&sc_status.eps, 2, modem_data_tx);
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002b36:	7bfb      	ldrb	r3, [r7, #15]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f040 80cb 	bne.w	8002cd4 <intelliOBC_TC+0x264>

		err = send_TM();
 8002b3e:	f7ff fe8f 	bl	8002860 <send_TM>
 8002b42:	4603      	mov	r3, r0
 8002b44:	73fb      	strb	r3, [r7, #15]
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002b46:	7bfb      	ldrb	r3, [r7, #15]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80dd 	beq.w	8002d08 <intelliOBC_TC+0x298>
 8002b4e:	e0cc      	b.n	8002cea <intelliOBC_TC+0x27a>

		break;

	case APID_TC_REQUIRED_REPORT_MODEM:
		err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_REPORT_MODEM, BUS_PACKET_ECF_EXIST,
 8002b50:	4b73      	ldr	r3, [pc, #460]	; (8002d20 <intelliOBC_TC+0x2b0>)
 8002b52:	9301      	str	r3, [sp, #4]
 8002b54:	2302      	movs	r3, #2
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	4b74      	ldr	r3, [pc, #464]	; (8002d2c <intelliOBC_TC+0x2bc>)
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	2103      	movs	r1, #3
 8002b5e:	2000      	movs	r0, #0
 8002b60:	f7ff f8ae 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002b64:	4603      	mov	r3, r0
 8002b66:	73fb      	strb	r3, [r7, #15]
				(uint8_t *)&sc_status.modem, 2, modem_data_tx);
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002b68:	7bfb      	ldrb	r3, [r7, #15]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	f040 80b4 	bne.w	8002cd8 <intelliOBC_TC+0x268>

		err = send_TM();
 8002b70:	f7ff fe76 	bl	8002860 <send_TM>
 8002b74:	4603      	mov	r3, r0
 8002b76:	73fb      	strb	r3, [r7, #15]
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002b78:	7bfb      	ldrb	r3, [r7, #15]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 80c6 	beq.w	8002d0c <intelliOBC_TC+0x29c>
 8002b80:	e0b3      	b.n	8002cea <intelliOBC_TC+0x27a>

		break;

	case APID_TC_REQUIRED_DATA:
		asm("NOP");
 8002b82:	bf00      	nop
		uint16_t required = data[0]<<8 | data[1];
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	021b      	lsls	r3, r3, #8
 8002b8a:	b21a      	sxth	r2, r3
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	3301      	adds	r3, #1
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	b21b      	sxth	r3, r3
 8002b94:	4313      	orrs	r3, r2
 8002b96:	b21b      	sxth	r3, r3
 8002b98:	81bb      	strh	r3, [r7, #12]
		uint8_t data_length = dataRequired2bytes(required, buffer_data);
 8002b9a:	89bb      	ldrh	r3, [r7, #12]
 8002b9c:	4964      	ldr	r1, [pc, #400]	; (8002d30 <intelliOBC_TC+0x2c0>)
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff fca6 	bl	80024f0 <dataRequired2bytes>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	72fb      	strb	r3, [r7, #11]
		err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_LAST_DATA_REQUIRED,
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
 8002baa:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <intelliOBC_TC+0x2b0>)
 8002bac:	9201      	str	r2, [sp, #4]
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	4b5f      	ldr	r3, [pc, #380]	; (8002d30 <intelliOBC_TC+0x2c0>)
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	2000      	movs	r0, #0
 8002bb8:	f7ff f882 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	73fb      	strb	r3, [r7, #15]
				BUS_PACKET_ECF_EXIST, buffer_data, data_length, modem_data_tx);
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002bc0:	7bfb      	ldrb	r3, [r7, #15]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	f040 808a 	bne.w	8002cdc <intelliOBC_TC+0x26c>

		err = send_TM();
 8002bc8:	f7ff fe4a 	bl	8002860 <send_TM>
 8002bcc:	4603      	mov	r3, r0
 8002bce:	73fb      	strb	r3, [r7, #15]
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002bd0:	7bfb      	ldrb	r3, [r7, #15]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 809c 	beq.w	8002d10 <intelliOBC_TC+0x2a0>
 8002bd8:	e087      	b.n	8002cea <intelliOBC_TC+0x27a>

		break;

	case APID_TC_ARE_YOU_ALIVE:
		memcpy(buffer_data, (uint8_t *)"FyCUS 2023", 10);
 8002bda:	220a      	movs	r2, #10
 8002bdc:	4955      	ldr	r1, [pc, #340]	; (8002d34 <intelliOBC_TC+0x2c4>)
 8002bde:	4854      	ldr	r0, [pc, #336]	; (8002d30 <intelliOBC_TC+0x2c0>)
 8002be0:	f009 fb75 	bl	800c2ce <memcpy>
		err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_LAST_DATA_REQUIRED,
 8002be4:	4b4e      	ldr	r3, [pc, #312]	; (8002d20 <intelliOBC_TC+0x2b0>)
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	230a      	movs	r3, #10
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	4b50      	ldr	r3, [pc, #320]	; (8002d30 <intelliOBC_TC+0x2c0>)
 8002bee:	2201      	movs	r2, #1
 8002bf0:	2104      	movs	r1, #4
 8002bf2:	2000      	movs	r0, #0
 8002bf4:	f7ff f864 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	73fb      	strb	r3, [r7, #15]
				BUS_PACKET_ECF_EXIST, buffer_data, 10, modem_data_tx);
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d16e      	bne.n	8002ce0 <intelliOBC_TC+0x270>

		err = send_TM();
 8002c02:	f7ff fe2d 	bl	8002860 <send_TM>
 8002c06:	4603      	mov	r3, r0
 8002c08:	73fb      	strb	r3, [r7, #15]
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002c0a:	7bfb      	ldrb	r3, [r7, #15]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	f000 8081 	beq.w	8002d14 <intelliOBC_TC+0x2a4>
 8002c12:	e06a      	b.n	8002cea <intelliOBC_TC+0x27a>

		break;


	case APID_TC_SET_PROGRMMED_TELEMETRY:
		if((data[2]>MAX_TM_TIME) || (data[2]<MIN_TM_TIME))		goto ERROR_PROCCESING_TC;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	3302      	adds	r3, #2
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b3c      	cmp	r3, #60	; 0x3c
 8002c1c:	d862      	bhi.n	8002ce4 <intelliOBC_TC+0x274>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	3302      	adds	r3, #2
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b02      	cmp	r3, #2
 8002c26:	d95d      	bls.n	8002ce4 <intelliOBC_TC+0x274>
		programmed_tm = data[0]<<8 | data[1] | REQUIRED_DATA_GNSS;
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	021b      	lsls	r3, r3, #8
 8002c2e:	b21a      	sxth	r2, r3
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	3301      	adds	r3, #1
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	b21b      	sxth	r3, r3
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	b21b      	sxth	r3, r3
 8002c3c:	f043 0301 	orr.w	r3, r3, #1
 8002c40:	b21b      	sxth	r3, r3
 8002c42:	b29a      	uxth	r2, r3
 8002c44:	4b3c      	ldr	r3, [pc, #240]	; (8002d38 <intelliOBC_TC+0x2c8>)
 8002c46:	801a      	strh	r2, [r3, #0]
		  __HAL_TIM_SET_COUNTER(PRIMARY_TIM_HANDLE, 0);
 8002c48:	4b3c      	ldr	r3, [pc, #240]	; (8002d3c <intelliOBC_TC+0x2cc>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	625a      	str	r2, [r3, #36]	; 0x24
		__HAL_TIM_SET_AUTORELOAD(PRIMARY_TIM_HANDLE, (uint16_t)((data[2]*10000/5)-1));
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	3302      	adds	r3, #2
 8002c54:	781b      	ldrb	r3, [r3, #0]
 8002c56:	b29b      	uxth	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	0152      	lsls	r2, r2, #5
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4413      	add	r3, r2
 8002c62:	011b      	lsls	r3, r3, #4
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	4b34      	ldr	r3, [pc, #208]	; (8002d3c <intelliOBC_TC+0x2cc>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	3302      	adds	r3, #2
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	461a      	mov	r2, r3
 8002c7a:	0152      	lsls	r2, r2, #5
 8002c7c:	1ad2      	subs	r2, r2, r3
 8002c7e:	0092      	lsls	r2, r2, #2
 8002c80:	4413      	add	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	b29b      	uxth	r3, r3
 8002c86:	3b01      	subs	r3, #1
 8002c88:	b29b      	uxth	r3, r3
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b2b      	ldr	r3, [pc, #172]	; (8002d3c <intelliOBC_TC+0x2cc>)
 8002c8e:	60da      	str	r2, [r3, #12]
		break;
 8002c90:	e041      	b.n	8002d16 <intelliOBC_TC+0x2a6>

	case APID_BUS_GET_CURRENT_TIME:
		float2bytes(gnss.rmc->time, buffer_data);
 8002c92:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <intelliOBC_TC+0x2d0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	edd3 7a00 	vldr	s15, [r3]
 8002c9a:	4825      	ldr	r0, [pc, #148]	; (8002d30 <intelliOBC_TC+0x2c0>)
 8002c9c:	eeb0 0a67 	vmov.f32	s0, s15
 8002ca0:	f7ff fbee 	bl	8002480 <float2bytes>
		err = bus_packet_EncodePacketize(BUS_PACKET_TYPE_TC, APID_BUS_SET_CURRENT_TIME,
 8002ca4:	4b1e      	ldr	r3, [pc, #120]	; (8002d20 <intelliOBC_TC+0x2b0>)
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2304      	movs	r3, #4
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	4b20      	ldr	r3, [pc, #128]	; (8002d30 <intelliOBC_TC+0x2c0>)
 8002cae:	2201      	movs	r2, #1
 8002cb0:	2165      	movs	r1, #101	; 0x65
 8002cb2:	2001      	movs	r0, #1
 8002cb4:	f7ff f804 	bl	8001cc0 <bus_packet_EncodePacketize>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	73fb      	strb	r3, [r7, #15]
				BUS_PACKET_ECF_EXIST, buffer_data, 4, modem_data_tx);
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002cbc:	7bfb      	ldrb	r3, [r7, #15]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d112      	bne.n	8002ce8 <intelliOBC_TC+0x278>

		err = send_TM();
 8002cc2:	f7ff fdcd 	bl	8002860 <send_TM>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	73fb      	strb	r3, [r7, #15]
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002cca:	7bfb      	ldrb	r3, [r7, #15]
 8002ccc:	2b00      	cmp	r3, #0
//	case APID_BUS_SET_CURRENT_TIME:



	default:	// Send Fault TC
		ERROR_PROCCESING_TC:
 8002cce:	e00c      	b.n	8002cea <intelliOBC_TC+0x27a>
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002cd0:	bf00      	nop
 8002cd2:	e00a      	b.n	8002cea <intelliOBC_TC+0x27a>
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002cd4:	bf00      	nop
 8002cd6:	e008      	b.n	8002cea <intelliOBC_TC+0x27a>
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002cd8:	bf00      	nop
 8002cda:	e006      	b.n	8002cea <intelliOBC_TC+0x27a>
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002cdc:	bf00      	nop
 8002cde:	e004      	b.n	8002cea <intelliOBC_TC+0x27a>
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002ce0:	bf00      	nop
 8002ce2:	e002      	b.n	8002cea <intelliOBC_TC+0x27a>
		if((data[2]>MAX_TM_TIME) || (data[2]<MIN_TM_TIME))		goto ERROR_PROCCESING_TC;
 8002ce4:	bf00      	nop
 8002ce6:	e000      	b.n	8002cea <intelliOBC_TC+0x27a>
		if(err != HAL_OK)	goto ERROR_PROCCESING_TC;
 8002ce8:	bf00      	nop
		bus_packet_EncodePacketize(BUS_PACKET_TYPE_TM, APID_TM_REPORT_FAULT_TC,
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <intelliOBC_TC+0x2b0>)
 8002cec:	9301      	str	r3, [sp, #4]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9300      	str	r3, [sp, #0]
 8002cf2:	4b0f      	ldr	r3, [pc, #60]	; (8002d30 <intelliOBC_TC+0x2c0>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	2000      	movs	r0, #0
 8002cfa:	f7fe ffe1 	bl	8001cc0 <bus_packet_EncodePacketize>
				BUS_PACKET_ECF_EXIST, buffer_data, 0, modem_data_tx);
		send_TM();
 8002cfe:	f7ff fdaf 	bl	8002860 <send_TM>
		break;
 8002d02:	e008      	b.n	8002d16 <intelliOBC_TC+0x2a6>
		break;
 8002d04:	bf00      	nop
 8002d06:	e006      	b.n	8002d16 <intelliOBC_TC+0x2a6>
		break;
 8002d08:	bf00      	nop
 8002d0a:	e004      	b.n	8002d16 <intelliOBC_TC+0x2a6>
		break;
 8002d0c:	bf00      	nop
 8002d0e:	e002      	b.n	8002d16 <intelliOBC_TC+0x2a6>
		break;
 8002d10:	bf00      	nop
 8002d12:	e000      	b.n	8002d16 <intelliOBC_TC+0x2a6>
		break;
 8002d14:	bf00      	nop
	}
}
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	20000720 	.word	0x20000720
 8002d24:	2000081c 	.word	0x2000081c
 8002d28:	2000081e 	.word	0x2000081e
 8002d2c:	20000820 	.word	0x20000820
 8002d30:	200007a0 	.word	0x200007a0
 8002d34:	0800fe98 	.word	0x0800fe98
 8002d38:	20000008 	.word	0x20000008
 8002d3c:	20000bb0 	.word	0x20000bb0
 8002d40:	20000000 	.word	0x20000000

08002d44 <intelliOBC_TM>:
 * Intelligence for a received telemetry
 * @param apid Received APID
 * @param data Received data
 */
void intelliOBC_TM(uint8_t apid, uint8_t *data)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	6039      	str	r1, [r7, #0]
 8002d4e:	71fb      	strb	r3, [r7, #7]
	switch (apid)
 8002d50:	79fb      	ldrb	r3, [r7, #7]
 8002d52:	2b43      	cmp	r3, #67	; 0x43
 8002d54:	d013      	beq.n	8002d7e <intelliOBC_TM+0x3a>
 8002d56:	2b43      	cmp	r3, #67	; 0x43
 8002d58:	dc25      	bgt.n	8002da6 <intelliOBC_TM+0x62>
 8002d5a:	2b40      	cmp	r3, #64	; 0x40
 8002d5c:	d01d      	beq.n	8002d9a <intelliOBC_TM+0x56>
 8002d5e:	2b42      	cmp	r3, #66	; 0x42
 8002d60:	d121      	bne.n	8002da6 <intelliOBC_TM+0x62>
	{

	case APID_BUS_REPORT_EPS:
		sc_status.eps = data[0]<<8 | data[1];
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	021b      	lsls	r3, r3, #8
 8002d68:	b21a      	sxth	r2, r3
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	b21b      	sxth	r3, r3
 8002d72:	4313      	orrs	r3, r2
 8002d74:	b21b      	sxth	r3, r3
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	4b0d      	ldr	r3, [pc, #52]	; (8002db0 <intelliOBC_TM+0x6c>)
 8002d7a:	805a      	strh	r2, [r3, #2]
		break;
 8002d7c:	e014      	b.n	8002da8 <intelliOBC_TM+0x64>

	case APID_BUS_REPORT_MODEM:
		sc_status.modem = data[0]<<8 | data[1];
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	021b      	lsls	r3, r3, #8
 8002d84:	b21a      	sxth	r2, r3
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	b21b      	sxth	r3, r3
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	b21b      	sxth	r3, r3
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	4b06      	ldr	r3, [pc, #24]	; (8002db0 <intelliOBC_TM+0x6c>)
 8002d96:	809a      	strh	r2, [r3, #4]
		break;
 8002d98:	e006      	b.n	8002da8 <intelliOBC_TM+0x64>

	case APID_BUS_PROGRAMMED_TELEMETRY:
		memcpy(&eps, data, EPS_DATA_LENGTH);
 8002d9a:	2214      	movs	r2, #20
 8002d9c:	6839      	ldr	r1, [r7, #0]
 8002d9e:	4805      	ldr	r0, [pc, #20]	; (8002db4 <intelliOBC_TM+0x70>)
 8002da0:	f009 fa95 	bl	800c2ce <memcpy>
		break;
 8002da4:	e000      	b.n	8002da8 <intelliOBC_TM+0x64>

	case APID_BUS_REPORT_OBC:
	case APID_TM_PROGRAMMED_TELEMETRY:
	default:
		break;
 8002da6:	bf00      	nop
	}
}
 8002da8:	bf00      	nop
 8002daa:	3708      	adds	r7, #8
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	2000081c 	.word	0x2000081c
 8002db4:	20000824 	.word	0x20000824

08002db8 <lis2mdl_config>:
 * @param DevAddress Device address
 * @param Timeout Timeout duration
 * @return HAL status
 */
HAL_StatusTypeDef lis2mdl_config(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b08a      	sub	sp, #40	; 0x28
 8002dbc:	af04      	add	r7, sp, #16
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	460b      	mov	r3, r1
 8002dc2:	607a      	str	r2, [r7, #4]
 8002dc4:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef err = HAL_OK;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	75fb      	strb	r3, [r7, #23]
	Timeout = Timeout/4;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	089b      	lsrs	r3, r3, #2
 8002dce:	607b      	str	r3, [r7, #4]
	uint8_t data = 0;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	75bb      	strb	r3, [r7, #22]

	// Active Zyxda to DRDY pin
	data = 0b00010001;
 8002dd4:	2311      	movs	r3, #17
 8002dd6:	75bb      	strb	r3, [r7, #22]
	err = HAL_I2C_Mem_Write(hi2c, DevAddress, LIS2MDL_CFG_REG_C, 1, &data, 1, Timeout);
 8002dd8:	8979      	ldrh	r1, [r7, #10]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	2301      	movs	r3, #1
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	f107 0316 	add.w	r3, r7, #22
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2301      	movs	r3, #1
 8002dea:	2262      	movs	r2, #98	; 0x62
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f003 fccf 	bl	8006790 <HAL_I2C_Mem_Write>
 8002df2:	4603      	mov	r3, r0
 8002df4:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002df6:	7dfb      	ldrb	r3, [r7, #23]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d001      	beq.n	8002e00 <lis2mdl_config+0x48>
 8002dfc:	7dfb      	ldrb	r3, [r7, #23]
 8002dfe:	e03e      	b.n	8002e7e <lis2mdl_config+0xc6>
	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LIS2MDL_CFG_REG_C, 1, &data, 1, Timeout);
 8002e00:	8979      	ldrh	r1, [r7, #10]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	9302      	str	r3, [sp, #8]
 8002e06:	2301      	movs	r3, #1
 8002e08:	9301      	str	r3, [sp, #4]
 8002e0a:	f107 0316 	add.w	r3, r7, #22
 8002e0e:	9300      	str	r3, [sp, #0]
 8002e10:	2301      	movs	r3, #1
 8002e12:	2262      	movs	r2, #98	; 0x62
 8002e14:	68f8      	ldr	r0, [r7, #12]
 8002e16:	f003 fdcf 	bl	80069b8 <HAL_I2C_Mem_Read>
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002e1e:	7dfb      	ldrb	r3, [r7, #23]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d001      	beq.n	8002e28 <lis2mdl_config+0x70>
 8002e24:	7dfb      	ldrb	r3, [r7, #23]
 8002e26:	e02a      	b.n	8002e7e <lis2mdl_config+0xc6>

	// Configure the output data rate and the measurement configuration
	data = 0b10000000;
 8002e28:	2380      	movs	r3, #128	; 0x80
 8002e2a:	75bb      	strb	r3, [r7, #22]
	err = HAL_I2C_Mem_Write(hi2c, DevAddress, LIS2MDL_CFG_REG_A, 1, &data, 1, Timeout);
 8002e2c:	8979      	ldrh	r1, [r7, #10]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	9302      	str	r3, [sp, #8]
 8002e32:	2301      	movs	r3, #1
 8002e34:	9301      	str	r3, [sp, #4]
 8002e36:	f107 0316 	add.w	r3, r7, #22
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	2260      	movs	r2, #96	; 0x60
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f003 fca5 	bl	8006790 <HAL_I2C_Mem_Write>
 8002e46:	4603      	mov	r3, r0
 8002e48:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002e4a:	7dfb      	ldrb	r3, [r7, #23]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <lis2mdl_config+0x9c>
 8002e50:	7dfb      	ldrb	r3, [r7, #23]
 8002e52:	e014      	b.n	8002e7e <lis2mdl_config+0xc6>
	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LIS2MDL_CFG_REG_A, 1, &data, 1, Timeout);
 8002e54:	8979      	ldrh	r1, [r7, #10]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	9302      	str	r3, [sp, #8]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	9301      	str	r3, [sp, #4]
 8002e5e:	f107 0316 	add.w	r3, r7, #22
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	2301      	movs	r3, #1
 8002e66:	2260      	movs	r2, #96	; 0x60
 8002e68:	68f8      	ldr	r0, [r7, #12]
 8002e6a:	f003 fda5 	bl	80069b8 <HAL_I2C_Mem_Read>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002e72:	7dfb      	ldrb	r3, [r7, #23]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d001      	beq.n	8002e7c <lis2mdl_config+0xc4>
 8002e78:	7dfb      	ldrb	r3, [r7, #23]
 8002e7a:	e000      	b.n	8002e7e <lis2mdl_config+0xc6>


//	err  = HAL_I2C_Mem_Write(hi2c, DevAddress, LIS2MDL_INT_CRTL_REG, 1, (uint8_t *)0b11100001, 1, Timeout);
//	if(err != HAL_OK) return err;

	return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <lis2mdl_status>:
 * @param DevAddress Device address
 * @param Timeout Timeout duration
 * @return HAL status
 */
uint8_t lis2mdl_status(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b08a      	sub	sp, #40	; 0x28
 8002e8a:	af04      	add	r7, sp, #16
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	460b      	mov	r3, r1
 8002e90:	607a      	str	r2, [r7, #4]
 8002e92:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef err = HAL_OK;
 8002e94:	2300      	movs	r3, #0
 8002e96:	75fb      	strb	r3, [r7, #23]
	uint8_t data = 0;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	75bb      	strb	r3, [r7, #22]
	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LIS2MDL_STATUS_REG, 1, &data, 1, Timeout);
 8002e9c:	8979      	ldrh	r1, [r7, #10]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	9302      	str	r3, [sp, #8]
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	9301      	str	r3, [sp, #4]
 8002ea6:	f107 0316 	add.w	r3, r7, #22
 8002eaa:	9300      	str	r3, [sp, #0]
 8002eac:	2301      	movs	r3, #1
 8002eae:	2267      	movs	r2, #103	; 0x67
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f003 fd81 	bl	80069b8 <HAL_I2C_Mem_Read>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002eba:	7dfb      	ldrb	r3, [r7, #23]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <lis2mdl_status+0x3e>
 8002ec0:	7dfb      	ldrb	r3, [r7, #23]
 8002ec2:	e000      	b.n	8002ec6 <lis2mdl_status+0x40>

	return data;
 8002ec4:	7dbb      	ldrb	r3, [r7, #22]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <lis2mdl_readMag>:
 * @param y Pointer to y-axis value
 * @param z Pointer to z-axis value
 * @return HAL status
 */
HAL_StatusTypeDef lis2mdl_readMag(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, int16_t *x, int16_t *y, int16_t *z)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b08a      	sub	sp, #40	; 0x28
 8002ed2:	af04      	add	r7, sp, #16
 8002ed4:	60f8      	str	r0, [r7, #12]
 8002ed6:	607a      	str	r2, [r7, #4]
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	460b      	mov	r3, r1
 8002edc:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef err = HAL_OK;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	75fb      	strb	r3, [r7, #23]

	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LIS2MDL_OUTX_L_REG, 1, (uint8_t *)x, 2, Timeout);
 8002ee2:	8979      	ldrh	r1, [r7, #10]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	9302      	str	r3, [sp, #8]
 8002ee8:	2302      	movs	r3, #2
 8002eea:	9301      	str	r3, [sp, #4]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	9300      	str	r3, [sp, #0]
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2268      	movs	r2, #104	; 0x68
 8002ef4:	68f8      	ldr	r0, [r7, #12]
 8002ef6:	f003 fd5f 	bl	80069b8 <HAL_I2C_Mem_Read>
 8002efa:	4603      	mov	r3, r0
 8002efc:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002efe:	7dfb      	ldrb	r3, [r7, #23]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <lis2mdl_readMag+0x3a>
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	e026      	b.n	8002f56 <lis2mdl_readMag+0x88>

	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LIS2MDL_OUTY_L_REG, 1, (uint8_t *)y, 2, Timeout);
 8002f08:	8979      	ldrh	r1, [r7, #10]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	9302      	str	r3, [sp, #8]
 8002f0e:	2302      	movs	r3, #2
 8002f10:	9301      	str	r3, [sp, #4]
 8002f12:	6a3b      	ldr	r3, [r7, #32]
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	2301      	movs	r3, #1
 8002f18:	226a      	movs	r2, #106	; 0x6a
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f003 fd4c 	bl	80069b8 <HAL_I2C_Mem_Read>
 8002f20:	4603      	mov	r3, r0
 8002f22:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002f24:	7dfb      	ldrb	r3, [r7, #23]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <lis2mdl_readMag+0x60>
 8002f2a:	7dfb      	ldrb	r3, [r7, #23]
 8002f2c:	e013      	b.n	8002f56 <lis2mdl_readMag+0x88>

	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LIS2MDL_OUTZ_L_REG, 1, (uint8_t *)z, 2, Timeout);
 8002f2e:	8979      	ldrh	r1, [r7, #10]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	9302      	str	r3, [sp, #8]
 8002f34:	2302      	movs	r3, #2
 8002f36:	9301      	str	r3, [sp, #4]
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	226c      	movs	r2, #108	; 0x6c
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f003 fd39 	bl	80069b8 <HAL_I2C_Mem_Read>
 8002f46:	4603      	mov	r3, r0
 8002f48:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <lis2mdl_readMag+0x86>
 8002f50:	7dfb      	ldrb	r3, [r7, #23]
 8002f52:	e000      	b.n	8002f56 <lis2mdl_readMag+0x88>


	return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}

08002f5e <lis2mdl_readTemp>:
 * @param Timeout Timeout duration
 * @param temp Pointer to temperature
 * @return HAL status
 */
HAL_StatusTypeDef lis2mdl_readTemp(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, float *temp)
{
 8002f5e:	b580      	push	{r7, lr}
 8002f60:	b08a      	sub	sp, #40	; 0x28
 8002f62:	af04      	add	r7, sp, #16
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	603b      	str	r3, [r7, #0]
 8002f6a:	460b      	mov	r3, r1
 8002f6c:	817b      	strh	r3, [r7, #10]
	uint8_t data[2];
	HAL_StatusTypeDef err = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	75fb      	strb	r3, [r7, #23]

	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LIS2MDL_TEMP_OUT_L_REG, 1, data, 2, Timeout);
 8002f72:	8979      	ldrh	r1, [r7, #10]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	9302      	str	r3, [sp, #8]
 8002f78:	2302      	movs	r3, #2
 8002f7a:	9301      	str	r3, [sp, #4]
 8002f7c:	f107 0314 	add.w	r3, r7, #20
 8002f80:	9300      	str	r3, [sp, #0]
 8002f82:	2301      	movs	r3, #1
 8002f84:	226e      	movs	r2, #110	; 0x6e
 8002f86:	68f8      	ldr	r0, [r7, #12]
 8002f88:	f003 fd16 	bl	80069b8 <HAL_I2C_Mem_Read>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8002f90:	7dfb      	ldrb	r3, [r7, #23]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d001      	beq.n	8002f9a <lis2mdl_readTemp+0x3c>
 8002f96:	7dfb      	ldrb	r3, [r7, #23]
 8002f98:	e000      	b.n	8002f9c <lis2mdl_readTemp+0x3e>


	return HAL_OK;
 8002f9a:	2300      	movs	r3, #0

}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3718      	adds	r7, #24
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <lis2mdl_whoIam>:
 * @param DevAddress Device address
 * @param Timeout Timeout duration
 * @return Device response
 */
uint8_t lis2mdl_whoIam(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08a      	sub	sp, #40	; 0x28
 8002fa8:	af04      	add	r7, sp, #16
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	460b      	mov	r3, r1
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	817b      	strh	r3, [r7, #10]
	uint8_t id=0;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c1, DevAddress, LIS2MDL_WHO_AM_I, 1, &id, 1, Timeout);
 8002fb6:	8979      	ldrh	r1, [r7, #10]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	9302      	str	r3, [sp, #8]
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	9301      	str	r3, [sp, #4]
 8002fc0:	f107 0317 	add.w	r3, r7, #23
 8002fc4:	9300      	str	r3, [sp, #0]
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	224f      	movs	r2, #79	; 0x4f
 8002fca:	4804      	ldr	r0, [pc, #16]	; (8002fdc <lis2mdl_whoIam+0x38>)
 8002fcc:	f003 fcf4 	bl	80069b8 <HAL_I2C_Mem_Read>
	return id;
 8002fd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3718      	adds	r7, #24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000878 	.word	0x20000878

08002fe0 <lsm6dso_config>:
 * @param DevAddress Device address
 * @param Timeout Timeout duration
 * @return HAL status
 */
HAL_StatusTypeDef lsm6dso_config(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b08a      	sub	sp, #40	; 0x28
 8002fe4:	af04      	add	r7, sp, #16
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	460b      	mov	r3, r1
 8002fea:	607a      	str	r2, [r7, #4]
 8002fec:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef err = 0;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	75fb      	strb	r3, [r7, #23]
//
//	// Configuración de interrupciones y Data Update
//	err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_CTRL3_C, 1, (uint8_t *)0b00000100, 1, Timeout);
//	if(err != HAL_OK) return err;

	uint8_t data = -1;
 8002ff2:	23ff      	movs	r3, #255	; 0xff
 8002ff4:	75bb      	strb	r3, [r7, #22]

	// INT1 -> accel data ready
	err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_INT1_CTRL, 1, (uint8_t *)0b00000001, 1, Timeout);
 8002ff6:	8979      	ldrh	r1, [r7, #10]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	9302      	str	r3, [sp, #8]
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	2301      	movs	r3, #1
 8003002:	9300      	str	r3, [sp, #0]
 8003004:	2301      	movs	r3, #1
 8003006:	220d      	movs	r2, #13
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f003 fbc1 	bl	8006790 <HAL_I2C_Mem_Write>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d001      	beq.n	800301c <lsm6dso_config+0x3c>
 8003018:	7dfb      	ldrb	r3, [r7, #23]
 800301a:	e100      	b.n	800321e <lsm6dso_config+0x23e>

	// INT2 -> gyro data ready
	err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_INT2_CTRL, 1, (uint8_t *)0b00000010, 1, Timeout);
 800301c:	8979      	ldrh	r1, [r7, #10]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	9302      	str	r3, [sp, #8]
 8003022:	2301      	movs	r3, #1
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	2302      	movs	r3, #2
 8003028:	9300      	str	r3, [sp, #0]
 800302a:	2301      	movs	r3, #1
 800302c:	220e      	movs	r2, #14
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f003 fbae 	bl	8006790 <HAL_I2C_Mem_Write>
 8003034:	4603      	mov	r3, r0
 8003036:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8003038:	7dfb      	ldrb	r3, [r7, #23]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <lsm6dso_config+0x62>
 800303e:	7dfb      	ldrb	r3, [r7, #23]
 8003040:	e0ed      	b.n	800321e <lsm6dso_config+0x23e>

	// Configuración de Acelerómetro
	if(err==0)
 8003042:	7dfb      	ldrb	r3, [r7, #23]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d122      	bne.n	800308e <lsm6dso_config+0xae>
	{	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_CTRL1_XL, 1, &data, 1, Timeout);
 8003048:	8979      	ldrh	r1, [r7, #10]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	9302      	str	r3, [sp, #8]
 800304e:	2301      	movs	r3, #1
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	f107 0316 	add.w	r3, r7, #22
 8003056:	9300      	str	r3, [sp, #0]
 8003058:	2301      	movs	r3, #1
 800305a:	2210      	movs	r2, #16
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f003 fcab 	bl	80069b8 <HAL_I2C_Mem_Read>
 8003062:	4603      	mov	r3, r0
 8003064:	75fb      	strb	r3, [r7, #23]
		if(err==0)
 8003066:	7dfb      	ldrb	r3, [r7, #23]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d110      	bne.n	800308e <lsm6dso_config+0xae>
		{
			data = LSM6DSO_XL_ODR_12Hz5<<4 | LSM6DSO_4g<<2 | LPF2_XL_DIS<<1 | 0;
 800306c:	2318      	movs	r3, #24
 800306e:	75bb      	strb	r3, [r7, #22]
			err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_CTRL1_XL, 1, &data, 1, Timeout);
 8003070:	8979      	ldrh	r1, [r7, #10]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	9302      	str	r3, [sp, #8]
 8003076:	2301      	movs	r3, #1
 8003078:	9301      	str	r3, [sp, #4]
 800307a:	f107 0316 	add.w	r3, r7, #22
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	2301      	movs	r3, #1
 8003082:	2210      	movs	r2, #16
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f003 fb83 	bl	8006790 <HAL_I2C_Mem_Write>
 800308a:	4603      	mov	r3, r0
 800308c:	75fb      	strb	r3, [r7, #23]
		}
	}

	// Configuración de Gyro
	if(err==0)
 800308e:	7dfb      	ldrb	r3, [r7, #23]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d122      	bne.n	80030da <lsm6dso_config+0xfa>
	{	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_CTRL2_G, 1, &data, 1, Timeout);
 8003094:	8979      	ldrh	r1, [r7, #10]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	9302      	str	r3, [sp, #8]
 800309a:	2301      	movs	r3, #1
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	f107 0316 	add.w	r3, r7, #22
 80030a2:	9300      	str	r3, [sp, #0]
 80030a4:	2301      	movs	r3, #1
 80030a6:	2211      	movs	r2, #17
 80030a8:	68f8      	ldr	r0, [r7, #12]
 80030aa:	f003 fc85 	bl	80069b8 <HAL_I2C_Mem_Read>
 80030ae:	4603      	mov	r3, r0
 80030b0:	75fb      	strb	r3, [r7, #23]
		if(err==0)
 80030b2:	7dfb      	ldrb	r3, [r7, #23]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d110      	bne.n	80030da <lsm6dso_config+0xfa>
		{
			data = LSM6DSO_GY_ODR_12Hz5<<4 | LSM6DSO_250dps<<1  | 0;
 80030b8:	2310      	movs	r3, #16
 80030ba:	75bb      	strb	r3, [r7, #22]
			err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_CTRL2_G, 1, &data, 1, Timeout);
 80030bc:	8979      	ldrh	r1, [r7, #10]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	9302      	str	r3, [sp, #8]
 80030c2:	2301      	movs	r3, #1
 80030c4:	9301      	str	r3, [sp, #4]
 80030c6:	f107 0316 	add.w	r3, r7, #22
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	2301      	movs	r3, #1
 80030ce:	2211      	movs	r2, #17
 80030d0:	68f8      	ldr	r0, [r7, #12]
 80030d2:	f003 fb5d 	bl	8006790 <HAL_I2C_Mem_Write>
 80030d6:	4603      	mov	r3, r0
 80030d8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if(err==0)
 80030da:	7dfb      	ldrb	r3, [r7, #23]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d125      	bne.n	800312c <lsm6dso_config+0x14c>
	{	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_CTRL9_XL, 1, &data, 1, Timeout);
 80030e0:	8979      	ldrh	r1, [r7, #10]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	9302      	str	r3, [sp, #8]
 80030e6:	2301      	movs	r3, #1
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	f107 0316 	add.w	r3, r7, #22
 80030ee:	9300      	str	r3, [sp, #0]
 80030f0:	2301      	movs	r3, #1
 80030f2:	2218      	movs	r2, #24
 80030f4:	68f8      	ldr	r0, [r7, #12]
 80030f6:	f003 fc5f 	bl	80069b8 <HAL_I2C_Mem_Read>
 80030fa:	4603      	mov	r3, r0
 80030fc:	75fb      	strb	r3, [r7, #23]
		if(err==0)
 80030fe:	7dfb      	ldrb	r3, [r7, #23]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d113      	bne.n	800312c <lsm6dso_config+0x14c>
		{
			data |= 0b00000010;
 8003104:	7dbb      	ldrb	r3, [r7, #22]
 8003106:	f043 0302 	orr.w	r3, r3, #2
 800310a:	b2db      	uxtb	r3, r3
 800310c:	75bb      	strb	r3, [r7, #22]
			err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_CTRL9_XL, 1, &data, 1, Timeout);
 800310e:	8979      	ldrh	r1, [r7, #10]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	9302      	str	r3, [sp, #8]
 8003114:	2301      	movs	r3, #1
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	f107 0316 	add.w	r3, r7, #22
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	2301      	movs	r3, #1
 8003120:	2218      	movs	r2, #24
 8003122:	68f8      	ldr	r0, [r7, #12]
 8003124:	f003 fb34 	bl	8006790 <HAL_I2C_Mem_Write>
 8003128:	4603      	mov	r3, r0
 800312a:	75fb      	strb	r3, [r7, #23]
		}
	}
	if(err==0)
 800312c:	7dfb      	ldrb	r3, [r7, #23]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d122      	bne.n	8003178 <lsm6dso_config+0x198>
	{
		err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_I3C_BUS_AVB, 1, &data, 1, Timeout);
 8003132:	8979      	ldrh	r1, [r7, #10]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	9302      	str	r3, [sp, #8]
 8003138:	2301      	movs	r3, #1
 800313a:	9301      	str	r3, [sp, #4]
 800313c:	f107 0316 	add.w	r3, r7, #22
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2301      	movs	r3, #1
 8003144:	2262      	movs	r2, #98	; 0x62
 8003146:	68f8      	ldr	r0, [r7, #12]
 8003148:	f003 fc36 	bl	80069b8 <HAL_I2C_Mem_Read>
 800314c:	4603      	mov	r3, r0
 800314e:	75fb      	strb	r3, [r7, #23]
		if(err==0)
 8003150:	7dfb      	ldrb	r3, [r7, #23]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d110      	bne.n	8003178 <lsm6dso_config+0x198>
		{
			data &= 0b00000000;
 8003156:	2300      	movs	r3, #0
 8003158:	75bb      	strb	r3, [r7, #22]
			err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_I3C_BUS_AVB, 1, &data, 1, Timeout);
 800315a:	8979      	ldrh	r1, [r7, #10]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	9302      	str	r3, [sp, #8]
 8003160:	2301      	movs	r3, #1
 8003162:	9301      	str	r3, [sp, #4]
 8003164:	f107 0316 	add.w	r3, r7, #22
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	2301      	movs	r3, #1
 800316c:	2262      	movs	r2, #98	; 0x62
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f003 fb0e 	bl	8006790 <HAL_I2C_Mem_Write>
 8003174:	4603      	mov	r3, r0
 8003176:	75fb      	strb	r3, [r7, #23]
		}
	}
	if(err==0)
 8003178:	7dfb      	ldrb	r3, [r7, #23]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d125      	bne.n	80031ca <lsm6dso_config+0x1ea>
	{
		err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_CTRL3_C, 1, &data, 1, Timeout);
 800317e:	8979      	ldrh	r1, [r7, #10]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	9302      	str	r3, [sp, #8]
 8003184:	2301      	movs	r3, #1
 8003186:	9301      	str	r3, [sp, #4]
 8003188:	f107 0316 	add.w	r3, r7, #22
 800318c:	9300      	str	r3, [sp, #0]
 800318e:	2301      	movs	r3, #1
 8003190:	2212      	movs	r2, #18
 8003192:	68f8      	ldr	r0, [r7, #12]
 8003194:	f003 fc10 	bl	80069b8 <HAL_I2C_Mem_Read>
 8003198:	4603      	mov	r3, r0
 800319a:	75fb      	strb	r3, [r7, #23]
		if(err==0)
 800319c:	7dfb      	ldrb	r3, [r7, #23]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d113      	bne.n	80031ca <lsm6dso_config+0x1ea>
		{
			data |= 0b01000100;
 80031a2:	7dbb      	ldrb	r3, [r7, #22]
 80031a4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	75bb      	strb	r3, [r7, #22]
			err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_CTRL3_C, 1, &data, 1, Timeout);
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	9302      	str	r3, [sp, #8]
 80031b2:	2301      	movs	r3, #1
 80031b4:	9301      	str	r3, [sp, #4]
 80031b6:	f107 0316 	add.w	r3, r7, #22
 80031ba:	9300      	str	r3, [sp, #0]
 80031bc:	2301      	movs	r3, #1
 80031be:	2212      	movs	r2, #18
 80031c0:	68f8      	ldr	r0, [r7, #12]
 80031c2:	f003 fae5 	bl	8006790 <HAL_I2C_Mem_Write>
 80031c6:	4603      	mov	r3, r0
 80031c8:	75fb      	strb	r3, [r7, #23]
		}
	}
	if(err==0)
 80031ca:	7dfb      	ldrb	r3, [r7, #23]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d125      	bne.n	800321c <lsm6dso_config+0x23c>
	{
		err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_FIFO_CTRL4, 1, &data, 1, Timeout);
 80031d0:	8979      	ldrh	r1, [r7, #10]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	9302      	str	r3, [sp, #8]
 80031d6:	2301      	movs	r3, #1
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	f107 0316 	add.w	r3, r7, #22
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2301      	movs	r3, #1
 80031e2:	220a      	movs	r2, #10
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f003 fbe7 	bl	80069b8 <HAL_I2C_Mem_Read>
 80031ea:	4603      	mov	r3, r0
 80031ec:	75fb      	strb	r3, [r7, #23]
		if(err==0)
 80031ee:	7dfb      	ldrb	r3, [r7, #23]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d113      	bne.n	800321c <lsm6dso_config+0x23c>
		{
			data &= 0b11110000;
 80031f4:	7dbb      	ldrb	r3, [r7, #22]
 80031f6:	f023 030f 	bic.w	r3, r3, #15
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	75bb      	strb	r3, [r7, #22]
			err = HAL_I2C_Mem_Write(hi2c, DevAddress, LSM6DSO_FIFO_CTRL4, 1, &data, 1, Timeout);
 80031fe:	8979      	ldrh	r1, [r7, #10]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	9302      	str	r3, [sp, #8]
 8003204:	2301      	movs	r3, #1
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	f107 0316 	add.w	r3, r7, #22
 800320c:	9300      	str	r3, [sp, #0]
 800320e:	2301      	movs	r3, #1
 8003210:	220a      	movs	r2, #10
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f003 fabc 	bl	8006790 <HAL_I2C_Mem_Write>
 8003218:	4603      	mov	r3, r0
 800321a:	75fb      	strb	r3, [r7, #23]
		}
	}



	return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <lsm6dso_readAccel>:
 * @param y Pointer to y-axis value
 * @param z Pointer to z-axis value
 * @return HAL status
 */
HAL_StatusTypeDef lsm6dso_readAccel(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, int16_t *x, int16_t *y, int16_t *z)
{
 8003226:	b580      	push	{r7, lr}
 8003228:	b08a      	sub	sp, #40	; 0x28
 800322a:	af04      	add	r7, sp, #16
 800322c:	60f8      	str	r0, [r7, #12]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
 8003232:	460b      	mov	r3, r1
 8003234:	817b      	strh	r3, [r7, #10]
	uint8_t data[6] = {0};
 8003236:	2300      	movs	r3, #0
 8003238:	613b      	str	r3, [r7, #16]
 800323a:	2300      	movs	r3, #0
 800323c:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef err = 0;
 800323e:	2300      	movs	r3, #0
 8003240:	75fb      	strb	r3, [r7, #23]

	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_OUTX_L_A, 1, data, 6, Timeout);
 8003242:	8979      	ldrh	r1, [r7, #10]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	9302      	str	r3, [sp, #8]
 8003248:	2306      	movs	r3, #6
 800324a:	9301      	str	r3, [sp, #4]
 800324c:	f107 0310 	add.w	r3, r7, #16
 8003250:	9300      	str	r3, [sp, #0]
 8003252:	2301      	movs	r3, #1
 8003254:	2228      	movs	r2, #40	; 0x28
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f003 fbae 	bl	80069b8 <HAL_I2C_Mem_Read>
 800325c:	4603      	mov	r3, r0
 800325e:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8003260:	7dfb      	ldrb	r3, [r7, #23]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d001      	beq.n	800326a <lsm6dso_readAccel+0x44>
 8003266:	7dfb      	ldrb	r3, [r7, #23]
 8003268:	e01b      	b.n	80032a2 <lsm6dso_readAccel+0x7c>

//	float dato = ((float)((float)(((int16_t)(data[1]<<8) | data[0])) * LSM6DSO_ACC_SENSITIVITY_FS_8G));
	*x = ((data[1]<<8) | data[0]);
 800326a:	7c7b      	ldrb	r3, [r7, #17]
 800326c:	021b      	lsls	r3, r3, #8
 800326e:	b21a      	sxth	r2, r3
 8003270:	7c3b      	ldrb	r3, [r7, #16]
 8003272:	b21b      	sxth	r3, r3
 8003274:	4313      	orrs	r3, r2
 8003276:	b21a      	sxth	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	801a      	strh	r2, [r3, #0]
	*y = ((data[3]<<8) | data[2]);
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	021b      	lsls	r3, r3, #8
 8003280:	b21a      	sxth	r2, r3
 8003282:	7cbb      	ldrb	r3, [r7, #18]
 8003284:	b21b      	sxth	r3, r3
 8003286:	4313      	orrs	r3, r2
 8003288:	b21a      	sxth	r2, r3
 800328a:	6a3b      	ldr	r3, [r7, #32]
 800328c:	801a      	strh	r2, [r3, #0]
	*z = ((data[5]<<8) | data[4]);
 800328e:	7d7b      	ldrb	r3, [r7, #21]
 8003290:	021b      	lsls	r3, r3, #8
 8003292:	b21a      	sxth	r2, r3
 8003294:	7d3b      	ldrb	r3, [r7, #20]
 8003296:	b21b      	sxth	r3, r3
 8003298:	4313      	orrs	r3, r2
 800329a:	b21a      	sxth	r2, r3
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <lsm6dso_readGyro>:
 * @param y Pointer to y-axis value
 * @param z Pointer to z-axis value
 * @return HAL status
 */
HAL_StatusTypeDef lsm6dso_readGyro(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, int16_t *x, int16_t *y, int16_t *z)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b08a      	sub	sp, #40	; 0x28
 80032ae:	af04      	add	r7, sp, #16
 80032b0:	60f8      	str	r0, [r7, #12]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
 80032b6:	460b      	mov	r3, r1
 80032b8:	817b      	strh	r3, [r7, #10]
	uint8_t data[6] = {0};
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	2300      	movs	r3, #0
 80032c0:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef err = 0;
 80032c2:	2300      	movs	r3, #0
 80032c4:	75fb      	strb	r3, [r7, #23]

	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_OUTX_L_G, 1, data, 6, Timeout);
 80032c6:	8979      	ldrh	r1, [r7, #10]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	9302      	str	r3, [sp, #8]
 80032cc:	2306      	movs	r3, #6
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	f107 0310 	add.w	r3, r7, #16
 80032d4:	9300      	str	r3, [sp, #0]
 80032d6:	2301      	movs	r3, #1
 80032d8:	2222      	movs	r2, #34	; 0x22
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f003 fb6c 	bl	80069b8 <HAL_I2C_Mem_Read>
 80032e0:	4603      	mov	r3, r0
 80032e2:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 80032e4:	7dfb      	ldrb	r3, [r7, #23]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <lsm6dso_readGyro+0x44>
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	e01b      	b.n	8003326 <lsm6dso_readGyro+0x7c>

	*x = ((data[1]<<8) | data[0]);
 80032ee:	7c7b      	ldrb	r3, [r7, #17]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	b21a      	sxth	r2, r3
 80032f4:	7c3b      	ldrb	r3, [r7, #16]
 80032f6:	b21b      	sxth	r3, r3
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b21a      	sxth	r2, r3
 80032fc:	683b      	ldr	r3, [r7, #0]
 80032fe:	801a      	strh	r2, [r3, #0]
	*y = ((data[3]<<8) | data[2]);
 8003300:	7cfb      	ldrb	r3, [r7, #19]
 8003302:	021b      	lsls	r3, r3, #8
 8003304:	b21a      	sxth	r2, r3
 8003306:	7cbb      	ldrb	r3, [r7, #18]
 8003308:	b21b      	sxth	r3, r3
 800330a:	4313      	orrs	r3, r2
 800330c:	b21a      	sxth	r2, r3
 800330e:	6a3b      	ldr	r3, [r7, #32]
 8003310:	801a      	strh	r2, [r3, #0]
	*z = ((data[5]<<8) | data[4]);
 8003312:	7d7b      	ldrb	r3, [r7, #21]
 8003314:	021b      	lsls	r3, r3, #8
 8003316:	b21a      	sxth	r2, r3
 8003318:	7d3b      	ldrb	r3, [r7, #20]
 800331a:	b21b      	sxth	r3, r3
 800331c:	4313      	orrs	r3, r2
 800331e:	b21a      	sxth	r2, r3
 8003320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003322:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8003324:	2300      	movs	r3, #0

}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}

0800332e <lsm6dso_readTemp>:
 * @param Timeout Timeout duration
 * @param temp Pointer to temperature
 * @return HAL status
 */
HAL_StatusTypeDef lsm6dso_readTemp(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, int16_t *temp)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b08a      	sub	sp, #40	; 0x28
 8003332:	af04      	add	r7, sp, #16
 8003334:	60f8      	str	r0, [r7, #12]
 8003336:	607a      	str	r2, [r7, #4]
 8003338:	603b      	str	r3, [r7, #0]
 800333a:	460b      	mov	r3, r1
 800333c:	817b      	strh	r3, [r7, #10]
	uint8_t data[2] = {0};
 800333e:	2300      	movs	r3, #0
 8003340:	82bb      	strh	r3, [r7, #20]
	HAL_StatusTypeDef err = 0;
 8003342:	2300      	movs	r3, #0
 8003344:	75fb      	strb	r3, [r7, #23]

	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_OUT_TEMP_L, 1, (uint8_t *)&data, 2, Timeout);
 8003346:	8979      	ldrh	r1, [r7, #10]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	9302      	str	r3, [sp, #8]
 800334c:	2302      	movs	r3, #2
 800334e:	9301      	str	r3, [sp, #4]
 8003350:	f107 0314 	add.w	r3, r7, #20
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	2301      	movs	r3, #1
 8003358:	2220      	movs	r2, #32
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f003 fb2c 	bl	80069b8 <HAL_I2C_Mem_Read>
 8003360:	4603      	mov	r3, r0
 8003362:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) return err;
 8003364:	7dfb      	ldrb	r3, [r7, #23]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <lsm6dso_readTemp+0x40>
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	e009      	b.n	8003382 <lsm6dso_readTemp+0x54>

	*temp = (data[1]<<8) | data[0];
 800336e:	7d7b      	ldrb	r3, [r7, #21]
 8003370:	021b      	lsls	r3, r3, #8
 8003372:	b21a      	sxth	r2, r3
 8003374:	7d3b      	ldrb	r3, [r7, #20]
 8003376:	b21b      	sxth	r3, r3
 8003378:	4313      	orrs	r3, r2
 800337a:	b21a      	sxth	r2, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	801a      	strh	r2, [r3, #0]

	return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3718      	adds	r7, #24
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <lsm6dso_readStatus>:
 * @param DevAddress Device address
 * @param Timeout Timeout duration
 * @return HAL status
 */
uint8_t lsm6dso_readStatus(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b08a      	sub	sp, #40	; 0x28
 800338e:	af04      	add	r7, sp, #16
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	460b      	mov	r3, r1
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	817b      	strh	r3, [r7, #10]
	HAL_StatusTypeDef err = HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	75fb      	strb	r3, [r7, #23]
	uint8_t data = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	75bb      	strb	r3, [r7, #22]
	err = HAL_I2C_Mem_Read(hi2c, DevAddress, LSM6DSO_STATUS_REG, 1, (uint8_t *)&data, 1, Timeout);
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	9302      	str	r3, [sp, #8]
 80033a6:	2301      	movs	r3, #1
 80033a8:	9301      	str	r3, [sp, #4]
 80033aa:	f107 0316 	add.w	r3, r7, #22
 80033ae:	9300      	str	r3, [sp, #0]
 80033b0:	2301      	movs	r3, #1
 80033b2:	221e      	movs	r2, #30
 80033b4:	68f8      	ldr	r0, [r7, #12]
 80033b6:	f003 faff 	bl	80069b8 <HAL_I2C_Mem_Read>
 80033ba:	4603      	mov	r3, r0
 80033bc:	75fb      	strb	r3, [r7, #23]
	if(err != HAL_OK) 	return 0;
 80033be:	7dfb      	ldrb	r3, [r7, #23]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <lsm6dso_readStatus+0x3e>
 80033c4:	2300      	movs	r3, #0
 80033c6:	e000      	b.n	80033ca <lsm6dso_readStatus+0x40>
	else				return data;
 80033c8:	7dbb      	ldrb	r3, [r7, #22]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <lsm6dso_whoIam>:
 * @param DevAddress Device address
 * @param Timeout Timeout duration
 * @return Device response
 */
uint8_t lsm6dso_whoIam(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b08a      	sub	sp, #40	; 0x28
 80033d8:	af04      	add	r7, sp, #16
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	460b      	mov	r3, r1
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	817b      	strh	r3, [r7, #10]
	uint8_t id=0;
 80033e2:	2300      	movs	r3, #0
 80033e4:	75fb      	strb	r3, [r7, #23]
	HAL_I2C_Mem_Read(&hi2c1, DevAddress, LSM6DSO_WHO_AM_I, 1, &id, 1, Timeout);
 80033e6:	8979      	ldrh	r1, [r7, #10]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	9302      	str	r3, [sp, #8]
 80033ec:	2301      	movs	r3, #1
 80033ee:	9301      	str	r3, [sp, #4]
 80033f0:	f107 0317 	add.w	r3, r7, #23
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	2301      	movs	r3, #1
 80033f8:	220f      	movs	r2, #15
 80033fa:	4804      	ldr	r0, [pc, #16]	; (800340c <lsm6dso_whoIam+0x38>)
 80033fc:	f003 fadc 	bl	80069b8 <HAL_I2C_Mem_Read>
	return id;
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	20000878 	.word	0x20000878

08003410 <bus_packet_GetLength>:
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	3301      	adds	r3, #1
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003422:	b2db      	uxtb	r3, r3
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <delayMicro>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void delayMicro (uint32_t us_delay)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
	__HAL_TIM_SET_COUNTER(MICROS_TIM_HANDLE, 0);
 8003438:	4b08      	ldr	r3, [pc, #32]	; (800345c <delayMicro+0x2c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2200      	movs	r2, #0
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(MICROS_TIM_HANDLE) < us_delay);
 8003440:	bf00      	nop
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <delayMicro+0x2c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	429a      	cmp	r2, r3
 800344c:	d8f9      	bhi.n	8003442 <delayMicro+0x12>
}
 800344e:	bf00      	nop
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	20000b64 	.word	0x20000b64

08003460 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003466:	f001 fece 	bl	8005206 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800346a:	f000 fa87 	bl	800397c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800346e:	f000 fce3 	bl	8003e38 <MX_GPIO_Init>
  MX_DMA_Init();
 8003472:	f000 fca7 	bl	8003dc4 <MX_DMA_Init>
  MX_I2C1_Init();
 8003476:	f000 fafb 	bl	8003a70 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800347a:	f000 fb85 	bl	8003b88 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800347e:	f000 fbb3 	bl	8003be8 <MX_USART3_UART_Init>
  MX_LPUART1_UART_Init();
 8003482:	f000 fb53 	bl	8003b2c <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 8003486:	f000 fc07 	bl	8003c98 <MX_TIM6_Init>
  MX_IWDG_Init();
 800348a:	f000 fb31 	bl	8003af0 <MX_IWDG_Init>
  MX_CRC_Init();
 800348e:	f000 fac9 	bl	8003a24 <MX_CRC_Init>
  MX_TIM7_Init();
 8003492:	f000 fc37 	bl	8003d04 <MX_TIM7_Init>
  MX_TIM16_Init();
 8003496:	f000 fc6d 	bl	8003d74 <MX_TIM16_Init>
  MX_RTC_Init();
 800349a:	f000 fbd5 	bl	8003c48 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */


  /* INICIO DE LA CONFIGURACIÓN */
#if DEBUG_LED
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800349e:	2201      	movs	r2, #1
 80034a0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80034a4:	4899      	ldr	r0, [pc, #612]	; (800370c <main+0x2ac>)
 80034a6:	f002 feaf 	bl	8006208 <HAL_GPIO_WritePin>
#endif

  /* Seguridad del microcontrolador */
  HAL_StatusTypeDef err = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	71fb      	strb	r3, [r7, #7]
  HAL_IWDG_Init(&hiwdg);
 80034ae:	4898      	ldr	r0, [pc, #608]	; (8003710 <main+0x2b0>)
 80034b0:	f003 ff53 	bl	800735a <HAL_IWDG_Init>
  HAL_Delay(30);
 80034b4:	201e      	movs	r0, #30
 80034b6:	f001 ff1b 	bl	80052f0 <HAL_Delay>


  /* Configuración de las comunicaciones */
  bus_packet_CRC16CCSDSConfig();
 80034ba:	f7fe fc99 	bl	8001df0 <bus_packet_CRC16CCSDSConfig>
  HAL_UART_Receive_DMA(GNSS_UART_HANDLE, gnss_ring, 1);
 80034be:	2201      	movs	r2, #1
 80034c0:	4994      	ldr	r1, [pc, #592]	; (8003714 <main+0x2b4>)
 80034c2:	4895      	ldr	r0, [pc, #596]	; (8003718 <main+0x2b8>)
 80034c4:	f005 ffec 	bl	80094a0 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_IT(EPS_UART_HANDLE, eps_buffer_rx, 1);
 80034c8:	2201      	movs	r2, #1
 80034ca:	4994      	ldr	r1, [pc, #592]	; (800371c <main+0x2bc>)
 80034cc:	4894      	ldr	r0, [pc, #592]	; (8003720 <main+0x2c0>)
 80034ce:	f005 ff01 	bl	80092d4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(MODEM_UART_HANDLE, modem_buffer_rx, 1);
 80034d2:	2201      	movs	r2, #1
 80034d4:	4993      	ldr	r1, [pc, #588]	; (8003724 <main+0x2c4>)
 80034d6:	4894      	ldr	r0, [pc, #592]	; (8003728 <main+0x2c8>)
 80034d8:	f005 fefc 	bl	80092d4 <HAL_UART_Receive_IT>


  /* Tareas temporizadas y timers necesarios */
  HAL_TIM_Base_Start_IT(PRIMARY_TIM_HANDLE);
 80034dc:	4893      	ldr	r0, [pc, #588]	; (800372c <main+0x2cc>)
 80034de:	f005 fb93 	bl	8008c08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(SECONDARY_TIM_HANDLE);
 80034e2:	4893      	ldr	r0, [pc, #588]	; (8003730 <main+0x2d0>)
 80034e4:	f005 fb90 	bl	8008c08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(MICROS_TIM_HANDLE);
 80034e8:	4892      	ldr	r0, [pc, #584]	; (8003734 <main+0x2d4>)
 80034ea:	f005 fb41 	bl	8008b70 <HAL_TIM_Base_Start>


  /* ********* AOCS ********* */

  /* Configuracion de magnetómetro */
  err = aocs_config_magnetometer();
 80034ee:	f7fe f92f 	bl	8001750 <aocs_config_magnetometer>
 80034f2:	4603      	mov	r3, r0
 80034f4:	71fb      	strb	r3, [r7, #7]
  if (err != HAL_OK) sc_status.obc |= OBC_ERROR_MAG;
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d007      	beq.n	800350c <main+0xac>
 80034fc:	4b8e      	ldr	r3, [pc, #568]	; (8003738 <main+0x2d8>)
 80034fe:	881b      	ldrh	r3, [r3, #0]
 8003500:	f043 0308 	orr.w	r3, r3, #8
 8003504:	b29a      	uxth	r2, r3
 8003506:	4b8c      	ldr	r3, [pc, #560]	; (8003738 <main+0x2d8>)
 8003508:	801a      	strh	r2, [r3, #0]
 800350a:	e006      	b.n	800351a <main+0xba>
  else sc_status.obc &= ~OBC_ERROR_MAG;
 800350c:	4b8a      	ldr	r3, [pc, #552]	; (8003738 <main+0x2d8>)
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	f023 0308 	bic.w	r3, r3, #8
 8003514:	b29a      	uxth	r2, r3
 8003516:	4b88      	ldr	r3, [pc, #544]	; (8003738 <main+0x2d8>)
 8003518:	801a      	strh	r2, [r3, #0]

  /* Configuración de la IMU */
  err = aocs_config_imu();
 800351a:	f7fe f939 	bl	8001790 <aocs_config_imu>
 800351e:	4603      	mov	r3, r0
 8003520:	71fb      	strb	r3, [r7, #7]
  if (err != HAL_OK) sc_status.obc |= OBC_ERROR_IMU;
 8003522:	79fb      	ldrb	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <main+0xd8>
 8003528:	4b83      	ldr	r3, [pc, #524]	; (8003738 <main+0x2d8>)
 800352a:	881b      	ldrh	r3, [r3, #0]
 800352c:	f043 0304 	orr.w	r3, r3, #4
 8003530:	b29a      	uxth	r2, r3
 8003532:	4b81      	ldr	r3, [pc, #516]	; (8003738 <main+0x2d8>)
 8003534:	801a      	strh	r2, [r3, #0]
 8003536:	e006      	b.n	8003546 <main+0xe6>
  else sc_status.obc &= ~OBC_ERROR_IMU;
 8003538:	4b7f      	ldr	r3, [pc, #508]	; (8003738 <main+0x2d8>)
 800353a:	881b      	ldrh	r3, [r3, #0]
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	b29a      	uxth	r2, r3
 8003542:	4b7d      	ldr	r3, [pc, #500]	; (8003738 <main+0x2d8>)
 8003544:	801a      	strh	r2, [r3, #0]

  /* Configuración del altímetro */
  err = aocs_config_altimeter();
 8003546:	f7fe f943 	bl	80017d0 <aocs_config_altimeter>
 800354a:	4603      	mov	r3, r0
 800354c:	71fb      	strb	r3, [r7, #7]
  if (err != HAL_OK) sc_status.obc |= OBC_ERROR_ALTIM;
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <main+0x104>
 8003554:	4b78      	ldr	r3, [pc, #480]	; (8003738 <main+0x2d8>)
 8003556:	881b      	ldrh	r3, [r3, #0]
 8003558:	f043 0310 	orr.w	r3, r3, #16
 800355c:	b29a      	uxth	r2, r3
 800355e:	4b76      	ldr	r3, [pc, #472]	; (8003738 <main+0x2d8>)
 8003560:	801a      	strh	r2, [r3, #0]
 8003562:	e006      	b.n	8003572 <main+0x112>
  else sc_status.obc &= ~OBC_ERROR_ALTIM;
 8003564:	4b74      	ldr	r3, [pc, #464]	; (8003738 <main+0x2d8>)
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	f023 0310 	bic.w	r3, r3, #16
 800356c:	b29a      	uxth	r2, r3
 800356e:	4b72      	ldr	r3, [pc, #456]	; (8003738 <main+0x2d8>)
 8003570:	801a      	strh	r2, [r3, #0]

  /* Configuracion de sondas de temperatura */
  err = aocs_config_temp();
 8003572:	f7fe f94d 	bl	8001810 <aocs_config_temp>
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]
  if (err != HAL_OK) sc_status.obc |= OBC_ERROR_TEMPS;
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	2b00      	cmp	r3, #0
 800357e:	d007      	beq.n	8003590 <main+0x130>
 8003580:	4b6d      	ldr	r3, [pc, #436]	; (8003738 <main+0x2d8>)
 8003582:	881b      	ldrh	r3, [r3, #0]
 8003584:	f043 0320 	orr.w	r3, r3, #32
 8003588:	b29a      	uxth	r2, r3
 800358a:	4b6b      	ldr	r3, [pc, #428]	; (8003738 <main+0x2d8>)
 800358c:	801a      	strh	r2, [r3, #0]
 800358e:	e006      	b.n	800359e <main+0x13e>
  else sc_status.obc &= ~OBC_ERROR_TEMPS;
 8003590:	4b69      	ldr	r3, [pc, #420]	; (8003738 <main+0x2d8>)
 8003592:	881b      	ldrh	r3, [r3, #0]
 8003594:	f023 0320 	bic.w	r3, r3, #32
 8003598:	b29a      	uxth	r2, r3
 800359a:	4b67      	ldr	r3, [pc, #412]	; (8003738 <main+0x2d8>)
 800359c:	801a      	strh	r2, [r3, #0]

  /* Configuración del GNSS */
  err = aocs_config_gnss();
 800359e:	f7fe f895 	bl	80016cc <aocs_config_gnss>
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
  if (err != HAL_OK) sc_status.obc |= OBC_ERROR_GNSS;
 80035a6:	79fb      	ldrb	r3, [r7, #7]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d007      	beq.n	80035bc <main+0x15c>
 80035ac:	4b62      	ldr	r3, [pc, #392]	; (8003738 <main+0x2d8>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	f043 0302 	orr.w	r3, r3, #2
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	4b60      	ldr	r3, [pc, #384]	; (8003738 <main+0x2d8>)
 80035b8:	801a      	strh	r2, [r3, #0]
 80035ba:	e006      	b.n	80035ca <main+0x16a>
  else sc_status.obc &= ~OBC_ERROR_GNSS;
 80035bc:	4b5e      	ldr	r3, [pc, #376]	; (8003738 <main+0x2d8>)
 80035be:	881b      	ldrh	r3, [r3, #0]
 80035c0:	f023 0302 	bic.w	r3, r3, #2
 80035c4:	b29a      	uxth	r2, r3
 80035c6:	4b5c      	ldr	r3, [pc, #368]	; (8003738 <main+0x2d8>)
 80035c8:	801a      	strh	r2, [r3, #0]
//  /* Configuracion del RTC */
//  err = set_time(0, 0, 0);
//  if (err != HAL_OK) sc_status.obc |= OBC_ERROR_RTC;
//  else sc_status.obc &= ~OBC_ERROR_RTC;

  HAL_IWDG_Refresh(&hiwdg);
 80035ca:	4851      	ldr	r0, [pc, #324]	; (8003710 <main+0x2b0>)
 80035cc:	f003 ff14 	bl	80073f8 <HAL_IWDG_Refresh>
#if DEBUG_LED
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80035d0:	2200      	movs	r2, #0
 80035d2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80035d6:	484d      	ldr	r0, [pc, #308]	; (800370c <main+0x2ac>)
 80035d8:	f002 fe16 	bl	8006208 <HAL_GPIO_WritePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(isr_flag != ISR_FLAG_NONE)
 80035dc:	e19b      	b.n	8003916 <main+0x4b6>
	  {
		  HAL_ResumeTick();
 80035de:	f001 febb 	bl	8005358 <HAL_ResumeTick>
		  HAL_IWDG_Refresh(&hiwdg);
 80035e2:	484b      	ldr	r0, [pc, #300]	; (8003710 <main+0x2b0>)
 80035e4:	f003 ff08 	bl	80073f8 <HAL_IWDG_Refresh>
			  else sc_status.obc &= ~OBC_ERROR_MAG;
			  isr_flag ^= ISR_FLAG_MAG;
		  }
#endif

		  if(isr_flag&ISR_FLAG_PRIMARY_TIM)
 80035e8:	4b54      	ldr	r3, [pc, #336]	; (800373c <main+0x2dc>)
 80035ea:	881b      	ldrh	r3, [r3, #0]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d01f      	beq.n	8003636 <main+0x1d6>
		  {
			  send_programmed_TM();
 80035f6:	f7ff f953 	bl	80028a0 <send_programmed_TM>
			  __HAL_TIM_SET_COUNTER(PRIMARY_TIM_HANDLE, 0);
 80035fa:	4b4c      	ldr	r3, [pc, #304]	; (800372c <main+0x2cc>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2200      	movs	r2, #0
 8003600:	625a      	str	r2, [r3, #36]	; 0x24
			  HAL_TIM_Base_Start_IT(PRIMARY_TIM_HANDLE);
 8003602:	484a      	ldr	r0, [pc, #296]	; (800372c <main+0x2cc>)
 8003604:	f005 fb00 	bl	8008c08 <HAL_TIM_Base_Start_IT>
			  isr_flag ^= ISR_FLAG_PRIMARY_TIM;
 8003608:	4b4c      	ldr	r3, [pc, #304]	; (800373c <main+0x2dc>)
 800360a:	881b      	ldrh	r3, [r3, #0]
 800360c:	b29b      	uxth	r3, r3
 800360e:	f483 7380 	eor.w	r3, r3, #256	; 0x100
 8003612:	b29a      	uxth	r2, r3
 8003614:	4b49      	ldr	r3, [pc, #292]	; (800373c <main+0x2dc>)
 8003616:	801a      	strh	r2, [r3, #0]

#if DEBUG_LED
			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 8003618:	2201      	movs	r2, #1
 800361a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361e:	483b      	ldr	r0, [pc, #236]	; (800370c <main+0x2ac>)
 8003620:	f002 fdf2 	bl	8006208 <HAL_GPIO_WritePin>
			  HAL_Delay(2);
 8003624:	2002      	movs	r0, #2
 8003626:	f001 fe63 	bl	80052f0 <HAL_Delay>
			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800362a:	2200      	movs	r2, #0
 800362c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003630:	4836      	ldr	r0, [pc, #216]	; (800370c <main+0x2ac>)
 8003632:	f002 fde9 	bl	8006208 <HAL_GPIO_WritePin>
#endif
		  }


		  if(isr_flag&ISR_FLAG_GNSS)
 8003636:	4b41      	ldr	r3, [pc, #260]	; (800373c <main+0x2dc>)
 8003638:	881b      	ldrh	r3, [r3, #0]
 800363a:	b29b      	uxth	r3, r3
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d01c      	beq.n	800367e <main+0x21e>
		  {
			  if(aocs_get_gnss() != HAL_OK) sc_status.obc |= OBC_ERROR_GNSS;
 8003644:	f7fe f96c 	bl	8001920 <aocs_get_gnss>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d007      	beq.n	800365e <main+0x1fe>
 800364e:	4b3a      	ldr	r3, [pc, #232]	; (8003738 <main+0x2d8>)
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	f043 0302 	orr.w	r3, r3, #2
 8003656:	b29a      	uxth	r2, r3
 8003658:	4b37      	ldr	r3, [pc, #220]	; (8003738 <main+0x2d8>)
 800365a:	801a      	strh	r2, [r3, #0]
 800365c:	e006      	b.n	800366c <main+0x20c>
			  else sc_status.obc &= ~OBC_ERROR_GNSS;
 800365e:	4b36      	ldr	r3, [pc, #216]	; (8003738 <main+0x2d8>)
 8003660:	881b      	ldrh	r3, [r3, #0]
 8003662:	f023 0302 	bic.w	r3, r3, #2
 8003666:	b29a      	uxth	r2, r3
 8003668:	4b33      	ldr	r3, [pc, #204]	; (8003738 <main+0x2d8>)
 800366a:	801a      	strh	r2, [r3, #0]
			  isr_flag ^= ISR_FLAG_GNSS;
 800366c:	4b33      	ldr	r3, [pc, #204]	; (800373c <main+0x2dc>)
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f083 0301 	eor.w	r3, r3, #1
 8003676:	b29a      	uxth	r2, r3
 8003678:	4b30      	ldr	r3, [pc, #192]	; (800373c <main+0x2dc>)
 800367a:	801a      	strh	r2, [r3, #0]
 800367c:	e148      	b.n	8003910 <main+0x4b0>
		  }

		  else if(isr_flag&ISR_FLAG_MODEM_BUS)
 800367e:	4b2f      	ldr	r3, [pc, #188]	; (800373c <main+0x2dc>)
 8003680:	881b      	ldrh	r3, [r3, #0]
 8003682:	b29b      	uxth	r3, r3
 8003684:	f003 0310 	and.w	r3, r3, #16
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05d      	beq.n	8003748 <main+0x2e8>
		  {
			  if(bus_packet_Decode(modem_buffer_rx, &modem_packet) != HAL_OK)	sc_status.obc |= OBC_ERROR_RX_MODEM;
 800368c:	492c      	ldr	r1, [pc, #176]	; (8003740 <main+0x2e0>)
 800368e:	4825      	ldr	r0, [pc, #148]	; (8003724 <main+0x2c4>)
 8003690:	f7fe fa7e 	bl	8001b90 <bus_packet_Decode>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d007      	beq.n	80036aa <main+0x24a>
 800369a:	4b27      	ldr	r3, [pc, #156]	; (8003738 <main+0x2d8>)
 800369c:	881b      	ldrh	r3, [r3, #0]
 800369e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <main+0x2d8>)
 80036a6:	801a      	strh	r2, [r3, #0]
 80036a8:	e006      	b.n	80036b8 <main+0x258>
			  else sc_status.obc &= ~OBC_ERROR_RX_MODEM;
 80036aa:	4b23      	ldr	r3, [pc, #140]	; (8003738 <main+0x2d8>)
 80036ac:	881b      	ldrh	r3, [r3, #0]
 80036ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	4b20      	ldr	r3, [pc, #128]	; (8003738 <main+0x2d8>)
 80036b6:	801a      	strh	r2, [r3, #0]

			  if(modem_packet.packet_type == BUS_PACKET_TYPE_TM)	  		intelliOBC_TM(modem_packet.apid, modem_packet.data);
 80036b8:	4b21      	ldr	r3, [pc, #132]	; (8003740 <main+0x2e0>)
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d106      	bne.n	80036ce <main+0x26e>
 80036c0:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <main+0x2e0>)
 80036c2:	785b      	ldrb	r3, [r3, #1]
 80036c4:	491f      	ldr	r1, [pc, #124]	; (8003744 <main+0x2e4>)
 80036c6:	4618      	mov	r0, r3
 80036c8:	f7ff fb3c 	bl	8002d44 <intelliOBC_TM>
 80036cc:	e005      	b.n	80036da <main+0x27a>
			  else /*if(modem_packet.packet_type == BUS_PACKET_TYPE_TC)*/	intelliOBC_TC(modem_packet.apid, modem_packet.data);
 80036ce:	4b1c      	ldr	r3, [pc, #112]	; (8003740 <main+0x2e0>)
 80036d0:	785b      	ldrb	r3, [r3, #1]
 80036d2:	491c      	ldr	r1, [pc, #112]	; (8003744 <main+0x2e4>)
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7ff f9cb 	bl	8002a70 <intelliOBC_TC>

			  isr_flag ^= ISR_FLAG_MODEM_BUS;
 80036da:	4b18      	ldr	r3, [pc, #96]	; (800373c <main+0x2dc>)
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	b29b      	uxth	r3, r3
 80036e0:	f083 0310 	eor.w	r3, r3, #16
 80036e4:	b29a      	uxth	r2, r3
 80036e6:	4b15      	ldr	r3, [pc, #84]	; (800373c <main+0x2dc>)
 80036e8:	801a      	strh	r2, [r3, #0]

#if DEBUG_LED
			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET);
 80036ea:	2201      	movs	r2, #1
 80036ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80036f0:	4806      	ldr	r0, [pc, #24]	; (800370c <main+0x2ac>)
 80036f2:	f002 fd89 	bl	8006208 <HAL_GPIO_WritePin>
			  HAL_Delay(2);
 80036f6:	2002      	movs	r0, #2
 80036f8:	f001 fdfa 	bl	80052f0 <HAL_Delay>
			  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003702:	4802      	ldr	r0, [pc, #8]	; (800370c <main+0x2ac>)
 8003704:	f002 fd80 	bl	8006208 <HAL_GPIO_WritePin>
 8003708:	e102      	b.n	8003910 <main+0x4b0>
 800370a:	bf00      	nop
 800370c:	48000400 	.word	0x48000400
 8003710:	200008cc 	.word	0x200008cc
 8003714:	20000264 	.word	0x20000264
 8003718:	200009e4 	.word	0x200009e4
 800371c:	20000c4c 	.word	0x20000c4c
 8003720:	20000960 	.word	0x20000960
 8003724:	20000d50 	.word	0x20000d50
 8003728:	200008dc 	.word	0x200008dc
 800372c:	20000bb0 	.word	0x20000bb0
 8003730:	20000bfc 	.word	0x20000bfc
 8003734:	20000b64 	.word	0x20000b64
 8003738:	2000081c 	.word	0x2000081c
 800373c:	20000c48 	.word	0x20000c48
 8003740:	20000dd0 	.word	0x20000dd0
 8003744:	20000dd4 	.word	0x20000dd4
#endif
		  }


		  else if(isr_flag&ISR_FLAG_EPS_BUS)
 8003748:	4b83      	ldr	r3, [pc, #524]	; (8003958 <main+0x4f8>)
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	d035      	beq.n	80037c2 <main+0x362>
		  {
			  if(bus_packet_Decode(eps_buffer_rx, &eps_packet) != HAL_OK)
 8003756:	4981      	ldr	r1, [pc, #516]	; (800395c <main+0x4fc>)
 8003758:	4881      	ldr	r0, [pc, #516]	; (8003960 <main+0x500>)
 800375a:	f7fe fa19 	bl	8001b90 <bus_packet_Decode>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <main+0x31a>
			  {
				  sc_status.obc |= OBC_ERROR_RX_EPS;
 8003764:	4b7f      	ldr	r3, [pc, #508]	; (8003964 <main+0x504>)
 8003766:	881b      	ldrh	r3, [r3, #0]
 8003768:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800376c:	b29a      	uxth	r2, r3
 800376e:	4b7d      	ldr	r3, [pc, #500]	; (8003964 <main+0x504>)
 8003770:	801a      	strh	r2, [r3, #0]
				  send_nack(EPS_UART_HANDLE);
 8003772:	487d      	ldr	r0, [pc, #500]	; (8003968 <main+0x508>)
 8003774:	f7ff f94a 	bl	8002a0c <send_nack>
 8003778:	e009      	b.n	800378e <main+0x32e>
			  }
			  else
			  {
				  sc_status.obc &= ~OBC_ERROR_RX_EPS;
 800377a:	4b7a      	ldr	r3, [pc, #488]	; (8003964 <main+0x504>)
 800377c:	881b      	ldrh	r3, [r3, #0]
 800377e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b77      	ldr	r3, [pc, #476]	; (8003964 <main+0x504>)
 8003786:	801a      	strh	r2, [r3, #0]
				  send_ack(EPS_UART_HANDLE);
 8003788:	4877      	ldr	r0, [pc, #476]	; (8003968 <main+0x508>)
 800378a:	f7ff f90d 	bl	80029a8 <send_ack>
			  }

			  if(eps_packet.packet_type == BUS_PACKET_TYPE_TM)	  		intelliOBC_TM(eps_packet.apid, eps_packet.data);
 800378e:	4b73      	ldr	r3, [pc, #460]	; (800395c <main+0x4fc>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d106      	bne.n	80037a4 <main+0x344>
 8003796:	4b71      	ldr	r3, [pc, #452]	; (800395c <main+0x4fc>)
 8003798:	785b      	ldrb	r3, [r3, #1]
 800379a:	4974      	ldr	r1, [pc, #464]	; (800396c <main+0x50c>)
 800379c:	4618      	mov	r0, r3
 800379e:	f7ff fad1 	bl	8002d44 <intelliOBC_TM>
 80037a2:	e005      	b.n	80037b0 <main+0x350>
			  else /*if(eps_packet.packet_type == BUS_PACKET_TYPE_TC)*/	intelliOBC_TC(eps_packet.apid, eps_packet.data);
 80037a4:	4b6d      	ldr	r3, [pc, #436]	; (800395c <main+0x4fc>)
 80037a6:	785b      	ldrb	r3, [r3, #1]
 80037a8:	4970      	ldr	r1, [pc, #448]	; (800396c <main+0x50c>)
 80037aa:	4618      	mov	r0, r3
 80037ac:	f7ff f960 	bl	8002a70 <intelliOBC_TC>

			  isr_flag ^= ISR_FLAG_EPS_BUS;
 80037b0:	4b69      	ldr	r3, [pc, #420]	; (8003958 <main+0x4f8>)
 80037b2:	881b      	ldrh	r3, [r3, #0]
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	f083 0340 	eor.w	r3, r3, #64	; 0x40
 80037ba:	b29a      	uxth	r2, r3
 80037bc:	4b66      	ldr	r3, [pc, #408]	; (8003958 <main+0x4f8>)
 80037be:	801a      	strh	r2, [r3, #0]
 80037c0:	e0a6      	b.n	8003910 <main+0x4b0>
		  }


		  else if(isr_flag&ISR_FLAG_SECONDARY_TIM)
 80037c2:	4b65      	ldr	r3, [pc, #404]	; (8003958 <main+0x4f8>)
 80037c4:	881b      	ldrh	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	f000 809f 	beq.w	8003910 <main+0x4b0>
		  {
			  check_status();
 80037d2:	f7ff f81f 	bl	8002814 <check_status>
#if(LOW_SENSOR_READ_FAST)
			  if(aocs_get_imu() != HAL_OK) sc_status.obc |= OBC_ERROR_IMU;
 80037d6:	f7fe f8f9 	bl	80019cc <aocs_get_imu>
 80037da:	4603      	mov	r3, r0
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d007      	beq.n	80037f0 <main+0x390>
 80037e0:	4b60      	ldr	r3, [pc, #384]	; (8003964 <main+0x504>)
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	f043 0304 	orr.w	r3, r3, #4
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	4b5e      	ldr	r3, [pc, #376]	; (8003964 <main+0x504>)
 80037ec:	801a      	strh	r2, [r3, #0]
 80037ee:	e006      	b.n	80037fe <main+0x39e>
			  else sc_status.obc &= ~OBC_ERROR_IMU;
 80037f0:	4b5c      	ldr	r3, [pc, #368]	; (8003964 <main+0x504>)
 80037f2:	881b      	ldrh	r3, [r3, #0]
 80037f4:	f023 0304 	bic.w	r3, r3, #4
 80037f8:	b29a      	uxth	r2, r3
 80037fa:	4b5a      	ldr	r3, [pc, #360]	; (8003964 <main+0x504>)
 80037fc:	801a      	strh	r2, [r3, #0]

			  if(aocs_get_mag() != HAL_OK) sc_status.obc |= OBC_ERROR_MAG;
 80037fe:	f7fe f8a5 	bl	800194c <aocs_get_mag>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d007      	beq.n	8003818 <main+0x3b8>
 8003808:	4b56      	ldr	r3, [pc, #344]	; (8003964 <main+0x504>)
 800380a:	881b      	ldrh	r3, [r3, #0]
 800380c:	f043 0308 	orr.w	r3, r3, #8
 8003810:	b29a      	uxth	r2, r3
 8003812:	4b54      	ldr	r3, [pc, #336]	; (8003964 <main+0x504>)
 8003814:	801a      	strh	r2, [r3, #0]
 8003816:	e006      	b.n	8003826 <main+0x3c6>
			  else sc_status.obc &= ~OBC_ERROR_MAG;
 8003818:	4b52      	ldr	r3, [pc, #328]	; (8003964 <main+0x504>)
 800381a:	881b      	ldrh	r3, [r3, #0]
 800381c:	f023 0308 	bic.w	r3, r3, #8
 8003820:	b29a      	uxth	r2, r3
 8003822:	4b50      	ldr	r3, [pc, #320]	; (8003964 <main+0x504>)
 8003824:	801a      	strh	r2, [r3, #0]
#endif
			  if(aocs_get_altimeter() != HAL_OK) sc_status.obc |= OBC_ERROR_ALTIM;
 8003826:	f7fe f92f 	bl	8001a88 <aocs_get_altimeter>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d007      	beq.n	8003840 <main+0x3e0>
 8003830:	4b4c      	ldr	r3, [pc, #304]	; (8003964 <main+0x504>)
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	f043 0310 	orr.w	r3, r3, #16
 8003838:	b29a      	uxth	r2, r3
 800383a:	4b4a      	ldr	r3, [pc, #296]	; (8003964 <main+0x504>)
 800383c:	801a      	strh	r2, [r3, #0]
 800383e:	e006      	b.n	800384e <main+0x3ee>
			  else sc_status.obc &= ~OBC_ERROR_ALTIM;
 8003840:	4b48      	ldr	r3, [pc, #288]	; (8003964 <main+0x504>)
 8003842:	881b      	ldrh	r3, [r3, #0]
 8003844:	f023 0310 	bic.w	r3, r3, #16
 8003848:	b29a      	uxth	r2, r3
 800384a:	4b46      	ldr	r3, [pc, #280]	; (8003964 <main+0x504>)
 800384c:	801a      	strh	r2, [r3, #0]

			  if(aocs_get_temp() != HAL_OK) sc_status.obc |= OBC_ERROR_TEMPS;
 800384e:	f7fe f93d 	bl	8001acc <aocs_get_temp>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d007      	beq.n	8003868 <main+0x408>
 8003858:	4b42      	ldr	r3, [pc, #264]	; (8003964 <main+0x504>)
 800385a:	881b      	ldrh	r3, [r3, #0]
 800385c:	f043 0320 	orr.w	r3, r3, #32
 8003860:	b29a      	uxth	r2, r3
 8003862:	4b40      	ldr	r3, [pc, #256]	; (8003964 <main+0x504>)
 8003864:	801a      	strh	r2, [r3, #0]
 8003866:	e006      	b.n	8003876 <main+0x416>
			  else sc_status.obc &= ~OBC_ERROR_TEMPS;
 8003868:	4b3e      	ldr	r3, [pc, #248]	; (8003964 <main+0x504>)
 800386a:	881b      	ldrh	r3, [r3, #0]
 800386c:	f023 0320 	bic.w	r3, r3, #32
 8003870:	b29a      	uxth	r2, r3
 8003872:	4b3c      	ldr	r3, [pc, #240]	; (8003964 <main+0x504>)
 8003874:	801a      	strh	r2, [r3, #0]

			  if(!(isr_flag&ISR_FLAG_EPS_GPIO))		sc_status.eps |= 0x80;
 8003876:	4b38      	ldr	r3, [pc, #224]	; (8003958 <main+0x4f8>)
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003880:	2b00      	cmp	r3, #0
 8003882:	d107      	bne.n	8003894 <main+0x434>
 8003884:	4b37      	ldr	r3, [pc, #220]	; (8003964 <main+0x504>)
 8003886:	885b      	ldrh	r3, [r3, #2]
 8003888:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800388c:	b29a      	uxth	r2, r3
 800388e:	4b35      	ldr	r3, [pc, #212]	; (8003964 <main+0x504>)
 8003890:	805a      	strh	r2, [r3, #2]
 8003892:	e00e      	b.n	80038b2 <main+0x452>
			  else
			  {
				  sc_status.eps &= ~(0x80);
 8003894:	4b33      	ldr	r3, [pc, #204]	; (8003964 <main+0x504>)
 8003896:	885b      	ldrh	r3, [r3, #2]
 8003898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800389c:	b29a      	uxth	r2, r3
 800389e:	4b31      	ldr	r3, [pc, #196]	; (8003964 <main+0x504>)
 80038a0:	805a      	strh	r2, [r3, #2]
				  isr_flag ^= ISR_FLAG_EPS_GPIO;
 80038a2:	4b2d      	ldr	r3, [pc, #180]	; (8003958 <main+0x4f8>)
 80038a4:	881b      	ldrh	r3, [r3, #0]
 80038a6:	b29b      	uxth	r3, r3
 80038a8:	f083 0380 	eor.w	r3, r3, #128	; 0x80
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	4b2a      	ldr	r3, [pc, #168]	; (8003958 <main+0x4f8>)
 80038b0:	801a      	strh	r2, [r3, #0]
			  }

			  if(!(isr_flag&ISR_FLAG_MODEM_GPIO))	sc_status.modem |= 0x80;
 80038b2:	4b29      	ldr	r3, [pc, #164]	; (8003958 <main+0x4f8>)
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	f003 0320 	and.w	r3, r3, #32
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d107      	bne.n	80038d0 <main+0x470>
 80038c0:	4b28      	ldr	r3, [pc, #160]	; (8003964 <main+0x504>)
 80038c2:	889b      	ldrh	r3, [r3, #4]
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	4b26      	ldr	r3, [pc, #152]	; (8003964 <main+0x504>)
 80038cc:	809a      	strh	r2, [r3, #4]
 80038ce:	e00e      	b.n	80038ee <main+0x48e>
			  else
			  {
				  sc_status.modem &= ~(0x80);
 80038d0:	4b24      	ldr	r3, [pc, #144]	; (8003964 <main+0x504>)
 80038d2:	889b      	ldrh	r3, [r3, #4]
 80038d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d8:	b29a      	uxth	r2, r3
 80038da:	4b22      	ldr	r3, [pc, #136]	; (8003964 <main+0x504>)
 80038dc:	809a      	strh	r2, [r3, #4]
				  isr_flag ^= ISR_FLAG_MODEM_GPIO;
 80038de:	4b1e      	ldr	r3, [pc, #120]	; (8003958 <main+0x4f8>)
 80038e0:	881b      	ldrh	r3, [r3, #0]
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	f083 0320 	eor.w	r3, r3, #32
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	4b1b      	ldr	r3, [pc, #108]	; (8003958 <main+0x4f8>)
 80038ec:	801a      	strh	r2, [r3, #0]
			  }


			  send_data_saving();
 80038ee:	f7ff f81b 	bl	8002928 <send_data_saving>

			  __HAL_TIM_SET_COUNTER(SECONDARY_TIM_HANDLE, 0);
 80038f2:	4b1f      	ldr	r3, [pc, #124]	; (8003970 <main+0x510>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	2200      	movs	r2, #0
 80038f8:	625a      	str	r2, [r3, #36]	; 0x24
			  HAL_TIM_Base_Start_IT(SECONDARY_TIM_HANDLE);
 80038fa:	481d      	ldr	r0, [pc, #116]	; (8003970 <main+0x510>)
 80038fc:	f005 f984 	bl	8008c08 <HAL_TIM_Base_Start_IT>
			  isr_flag ^= ISR_FLAG_SECONDARY_TIM;
 8003900:	4b15      	ldr	r3, [pc, #84]	; (8003958 <main+0x4f8>)
 8003902:	881b      	ldrh	r3, [r3, #0]
 8003904:	b29b      	uxth	r3, r3
 8003906:	f483 7300 	eor.w	r3, r3, #512	; 0x200
 800390a:	b29a      	uxth	r2, r3
 800390c:	4b12      	ldr	r3, [pc, #72]	; (8003958 <main+0x4f8>)
 800390e:	801a      	strh	r2, [r3, #0]
//		  {
//#warning "Poner funcionamiento GPIO"
//			  isr_flag ^= ISR_FLAG_EPS_GPIO;
//		  }

		  HAL_IWDG_Refresh(&hiwdg);
 8003910:	4818      	ldr	r0, [pc, #96]	; (8003974 <main+0x514>)
 8003912:	f003 fd71 	bl	80073f8 <HAL_IWDG_Refresh>
	  while(isr_flag != ISR_FLAG_NONE)
 8003916:	4b10      	ldr	r3, [pc, #64]	; (8003958 <main+0x4f8>)
 8003918:	881b      	ldrh	r3, [r3, #0]
 800391a:	b29b      	uxth	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f ae5e 	bne.w	80035de <main+0x17e>
	  }


#if DEBUG_LED
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8003922:	2200      	movs	r2, #0
 8003924:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003928:	4813      	ldr	r0, [pc, #76]	; (8003978 <main+0x518>)
 800392a:	f002 fc6d 	bl	8006208 <HAL_GPIO_WritePin>
#endif
	HAL_IWDG_Refresh(&hiwdg);
 800392e:	4811      	ldr	r0, [pc, #68]	; (8003974 <main+0x514>)
 8003930:	f003 fd62 	bl	80073f8 <HAL_IWDG_Refresh>
	HAL_SuspendTick();
 8003934:	f001 fd00 	bl	8005338 <HAL_SuspendTick>
	HAL_PWR_EnableSleepOnExit();
 8003938:	f003 fda2 	bl	8007480 <HAL_PWR_EnableSleepOnExit>
	HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800393c:	2101      	movs	r1, #1
 800393e:	2000      	movs	r0, #0
 8003940:	f003 fd6a 	bl	8007418 <HAL_PWR_EnterSLEEPMode>
#if DEBUG_LED
	  HAL_ResumeTick();
 8003944:	f001 fd08 	bl	8005358 <HAL_ResumeTick>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 8003948:	2201      	movs	r2, #1
 800394a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800394e:	480a      	ldr	r0, [pc, #40]	; (8003978 <main+0x518>)
 8003950:	f002 fc5a 	bl	8006208 <HAL_GPIO_WritePin>
	  while(isr_flag != ISR_FLAG_NONE)
 8003954:	e7df      	b.n	8003916 <main+0x4b6>
 8003956:	bf00      	nop
 8003958:	20000c48 	.word	0x20000c48
 800395c:	20000ccc 	.word	0x20000ccc
 8003960:	20000c4c 	.word	0x20000c4c
 8003964:	2000081c 	.word	0x2000081c
 8003968:	20000960 	.word	0x20000960
 800396c:	20000cd0 	.word	0x20000cd0
 8003970:	20000bfc 	.word	0x20000bfc
 8003974:	200008cc 	.word	0x200008cc
 8003978:	48000400 	.word	0x48000400

0800397c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b096      	sub	sp, #88	; 0x58
 8003980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003982:	f107 0314 	add.w	r3, r7, #20
 8003986:	2244      	movs	r2, #68	; 0x44
 8003988:	2100      	movs	r1, #0
 800398a:	4618      	mov	r0, r3
 800398c:	f008 fc11 	bl	800c1b2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003990:	463b      	mov	r3, r7
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	605a      	str	r2, [r3, #4]
 8003998:	609a      	str	r2, [r3, #8]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800399e:	f44f 7000 	mov.w	r0, #512	; 0x200
 80039a2:	f003 fd9b 	bl	80074dc <HAL_PWREx_ControlVoltageScaling>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80039ac:	f000 fd2a 	bl	8004404 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 80039b0:	2318      	movs	r3, #24
 80039b2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80039b4:	2301      	movs	r3, #1
 80039b6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80039b8:	2301      	movs	r3, #1
 80039ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80039bc:	2300      	movs	r3, #0
 80039be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80039c0:	2360      	movs	r3, #96	; 0x60
 80039c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80039c4:	2302      	movs	r3, #2
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80039c8:	2301      	movs	r3, #1
 80039ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80039cc:	2301      	movs	r3, #1
 80039ce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80039d0:	2328      	movs	r3, #40	; 0x28
 80039d2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80039d4:	2307      	movs	r3, #7
 80039d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80039d8:	2302      	movs	r3, #2
 80039da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80039dc:	2302      	movs	r3, #2
 80039de:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4618      	mov	r0, r3
 80039e6:	f003 fe17 	bl	8007618 <HAL_RCC_OscConfig>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d001      	beq.n	80039f4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80039f0:	f000 fd08 	bl	8004404 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80039f4:	230f      	movs	r3, #15
 80039f6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80039f8:	2303      	movs	r3, #3
 80039fa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039fc:	2300      	movs	r3, #0
 80039fe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a04:	2300      	movs	r3, #0
 8003a06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003a08:	463b      	mov	r3, r7
 8003a0a:	2104      	movs	r1, #4
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	f004 fa17 	bl	8007e40 <HAL_RCC_ClockConfig>
 8003a12:	4603      	mov	r3, r0
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8003a18:	f000 fcf4 	bl	8004404 <Error_Handler>
  }
}
 8003a1c:	bf00      	nop
 8003a1e:	3758      	adds	r7, #88	; 0x58
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <MX_CRC_Init>:
/**
  * @brief CRC Initialization Function
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8003a28:	4b0f      	ldr	r3, [pc, #60]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <MX_CRC_Init+0x48>)
 8003a2c:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8003a2e:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_DISABLE;
 8003a34:	4b0c      	ldr	r3, [pc, #48]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a36:	2201      	movs	r2, #1
 8003a38:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InitValue = 0;
 8003a3a:	4b0b      	ldr	r3, [pc, #44]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	611a      	str	r2, [r3, #16]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8003a40:	4b09      	ldr	r3, [pc, #36]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a42:	2200      	movs	r2, #0
 8003a44:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8003a46:	4b08      	ldr	r3, [pc, #32]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8003a4c:	4b06      	ldr	r3, [pc, #24]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a4e:	2201      	movs	r2, #1
 8003a50:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8003a52:	4805      	ldr	r0, [pc, #20]	; (8003a68 <MX_CRC_Init+0x44>)
 8003a54:	f001 fda2 	bl	800559c <HAL_CRC_Init>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <MX_CRC_Init+0x3e>
  {
    Error_Handler();
 8003a5e:	f000 fcd1 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8003a62:	bf00      	nop
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	20000854 	.word	0x20000854
 8003a6c:	40023000 	.word	0x40023000

08003a70 <MX_I2C1_Init>:
/**
  * @brief I2C1 Initialization Function
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a74:	4b1b      	ldr	r3, [pc, #108]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003a76:	4a1c      	ldr	r2, [pc, #112]	; (8003ae8 <MX_I2C1_Init+0x78>)
 8003a78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10909CEC;
 8003a7a:	4b1a      	ldr	r3, [pc, #104]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003a7c:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <MX_I2C1_Init+0x7c>)
 8003a7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003a80:	4b18      	ldr	r3, [pc, #96]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003a82:	2200      	movs	r2, #0
 8003a84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a86:	4b17      	ldr	r3, [pc, #92]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003a88:	2201      	movs	r2, #1
 8003a8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a8c:	4b15      	ldr	r3, [pc, #84]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a92:	4b14      	ldr	r3, [pc, #80]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a98:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a9e:	4b11      	ldr	r3, [pc, #68]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003aaa:	480e      	ldr	r0, [pc, #56]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003aac:	f002 fbf6 	bl	800629c <HAL_I2C_Init>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003ab6:	f000 fca5 	bl	8004404 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003aba:	2100      	movs	r1, #0
 8003abc:	4809      	ldr	r0, [pc, #36]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003abe:	f003 fbb5 	bl	800722c <HAL_I2CEx_ConfigAnalogFilter>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d001      	beq.n	8003acc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ac8:	f000 fc9c 	bl	8004404 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003acc:	2100      	movs	r1, #0
 8003ace:	4805      	ldr	r0, [pc, #20]	; (8003ae4 <MX_I2C1_Init+0x74>)
 8003ad0:	f003 fbf7 	bl	80072c2 <HAL_I2CEx_ConfigDigitalFilter>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d001      	beq.n	8003ade <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003ada:	f000 fc93 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000878 	.word	0x20000878
 8003ae8:	40005400 	.word	0x40005400
 8003aec:	10909cec 	.word	0x10909cec

08003af0 <MX_IWDG_Init>:
/**
  * @brief IWDG Initialization Function
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8003af4:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <MX_IWDG_Init+0x34>)
 8003af6:	4a0c      	ldr	r2, [pc, #48]	; (8003b28 <MX_IWDG_Init+0x38>)
 8003af8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_8;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	; (8003b24 <MX_IWDG_Init+0x34>)
 8003afc:	2201      	movs	r2, #1
 8003afe:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8003b00:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <MX_IWDG_Init+0x34>)
 8003b02:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003b06:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3999;
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <MX_IWDG_Init+0x34>)
 8003b0a:	f640 729f 	movw	r2, #3999	; 0xf9f
 8003b0e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8003b10:	4804      	ldr	r0, [pc, #16]	; (8003b24 <MX_IWDG_Init+0x34>)
 8003b12:	f003 fc22 	bl	800735a <HAL_IWDG_Init>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8003b1c:	f000 fc72 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8003b20:	bf00      	nop
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	200008cc 	.word	0x200008cc
 8003b28:	40003000 	.word	0x40003000

08003b2c <MX_LPUART1_UART_Init>:
/**
  * @brief LPUART1 Initialization Function
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b32:	4a13      	ldr	r2, [pc, #76]	; (8003b80 <MX_LPUART1_UART_Init+0x54>)
 8003b34:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = MODEM_UART_BAUDRATE;
 8003b36:	4b11      	ldr	r3, [pc, #68]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <MX_LPUART1_UART_Init+0x58>)
 8003b3a:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3c:	4b0f      	ldr	r3, [pc, #60]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b3e:	2200      	movs	r2, #0
 8003b40:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8003b42:	4b0e      	ldr	r3, [pc, #56]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b44:	2200      	movs	r2, #0
 8003b46:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b4a:	2200      	movs	r2, #0
 8003b4c:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b50:	220c      	movs	r2, #12
 8003b52:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b54:	4b09      	ldr	r3, [pc, #36]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b56:	2200      	movs	r2, #0
 8003b58:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b5a:	4b08      	ldr	r3, [pc, #32]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b60:	4b06      	ldr	r3, [pc, #24]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8003b66:	4805      	ldr	r0, [pc, #20]	; (8003b7c <MX_LPUART1_UART_Init+0x50>)
 8003b68:	f005 fad2 	bl	8009110 <HAL_UART_Init>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <MX_LPUART1_UART_Init+0x4a>
  {
    Error_Handler();
 8003b72:	f000 fc47 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	200008dc 	.word	0x200008dc
 8003b80:	40008000 	.word	0x40008000
 8003b84:	0007a120 	.word	0x0007a120

08003b88 <MX_USART1_UART_Init>:
/**
  * @brief USART1 Initialization Function
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003b8c:	4b14      	ldr	r3, [pc, #80]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003b8e:	4a15      	ldr	r2, [pc, #84]	; (8003be4 <MX_USART1_UART_Init+0x5c>)
 8003b90:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = EPS_UART_BAUDRATE;
 8003b92:	4b13      	ldr	r3, [pc, #76]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003b94:	f44f 22e1 	mov.w	r2, #460800	; 0x70800
 8003b98:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003b9a:	4b11      	ldr	r3, [pc, #68]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003ba0:	4b0f      	ldr	r3, [pc, #60]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003ba6:	4b0e      	ldr	r3, [pc, #56]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003bac:	4b0c      	ldr	r3, [pc, #48]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bae:	220c      	movs	r2, #12
 8003bb0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bb2:	4b0b      	ldr	r3, [pc, #44]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bb8:	4b09      	ldr	r3, [pc, #36]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bbe:	4b08      	ldr	r3, [pc, #32]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bc4:	4b06      	ldr	r3, [pc, #24]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003bca:	4805      	ldr	r0, [pc, #20]	; (8003be0 <MX_USART1_UART_Init+0x58>)
 8003bcc:	f005 faa0 	bl	8009110 <HAL_UART_Init>
 8003bd0:	4603      	mov	r3, r0
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8003bd6:	f000 fc15 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003bda:	bf00      	nop
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	20000960 	.word	0x20000960
 8003be4:	40013800 	.word	0x40013800

08003be8 <MX_USART3_UART_Init>:
/**
  * @brief USART3 Initialization Function
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003bec:	4b14      	ldr	r3, [pc, #80]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003bee:	4a15      	ldr	r2, [pc, #84]	; (8003c44 <MX_USART3_UART_Init+0x5c>)
 8003bf0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8003bf2:	4b13      	ldr	r3, [pc, #76]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003bf4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003bf8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003bfa:	4b11      	ldr	r3, [pc, #68]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003c00:	4b0f      	ldr	r3, [pc, #60]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003c06:	4b0e      	ldr	r3, [pc, #56]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c08:	2200      	movs	r2, #0
 8003c0a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003c0c:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c0e:	220c      	movs	r2, #12
 8003c10:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c12:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c18:	4b09      	ldr	r3, [pc, #36]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c1e:	4b08      	ldr	r3, [pc, #32]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c20:	2200      	movs	r2, #0
 8003c22:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c24:	4b06      	ldr	r3, [pc, #24]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c26:	2200      	movs	r2, #0
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003c2a:	4805      	ldr	r0, [pc, #20]	; (8003c40 <MX_USART3_UART_Init+0x58>)
 8003c2c:	f005 fa70 	bl	8009110 <HAL_UART_Init>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8003c36:	f000 fbe5 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003c3a:	bf00      	nop
 8003c3c:	bd80      	pop	{r7, pc}
 8003c3e:	bf00      	nop
 8003c40:	200009e4 	.word	0x200009e4
 8003c44:	40004800 	.word	0x40004800

08003c48 <MX_RTC_Init>:
/**
  * @brief RTC Initialization Function
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c4e:	4a11      	ldr	r2, [pc, #68]	; (8003c94 <MX_RTC_Init+0x4c>)
 8003c50:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c5a:	227f      	movs	r2, #127	; 0x7f
 8003c5c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003c5e:	4b0c      	ldr	r3, [pc, #48]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c60:	22ff      	movs	r2, #255	; 0xff
 8003c62:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003c6a:	4b09      	ldr	r3, [pc, #36]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003c70:	4b07      	ldr	r3, [pc, #28]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003c76:	4b06      	ldr	r3, [pc, #24]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003c7c:	4804      	ldr	r0, [pc, #16]	; (8003c90 <MX_RTC_Init+0x48>)
 8003c7e:	f004 fe0d 	bl	800889c <HAL_RTC_Init>
 8003c82:	4603      	mov	r3, r0
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8003c88:	f000 fbbc 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003c8c:	bf00      	nop
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000b40 	.word	0x20000b40
 8003c94:	40002800 	.word	0x40002800

08003c98 <MX_TIM6_Init>:
/**
  * @brief TIM6 Initialization Function
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c9e:	1d3b      	adds	r3, r7, #4
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
 8003ca4:	605a      	str	r2, [r3, #4]
 8003ca6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003ca8:	4b14      	ldr	r3, [pc, #80]	; (8003cfc <MX_TIM6_Init+0x64>)
 8003caa:	4a15      	ldr	r2, [pc, #84]	; (8003d00 <MX_TIM6_Init+0x68>)
 8003cac:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = MICROS_TIM_PRESCALER;
 8003cae:	4b13      	ldr	r3, [pc, #76]	; (8003cfc <MX_TIM6_Init+0x64>)
 8003cb0:	224f      	movs	r2, #79	; 0x4f
 8003cb2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cb4:	4b11      	ldr	r3, [pc, #68]	; (8003cfc <MX_TIM6_Init+0x64>)
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = MICROS_TIM_ARR;
 8003cba:	4b10      	ldr	r3, [pc, #64]	; (8003cfc <MX_TIM6_Init+0x64>)
 8003cbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cc0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cc2:	4b0e      	ldr	r3, [pc, #56]	; (8003cfc <MX_TIM6_Init+0x64>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003cc8:	480c      	ldr	r0, [pc, #48]	; (8003cfc <MX_TIM6_Init+0x64>)
 8003cca:	f004 fef9 	bl	8008ac0 <HAL_TIM_Base_Init>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d001      	beq.n	8003cd8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003cd4:	f000 fb96 	bl	8004404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003ce0:	1d3b      	adds	r3, r7, #4
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4805      	ldr	r0, [pc, #20]	; (8003cfc <MX_TIM6_Init+0x64>)
 8003ce6:	f005 f98f 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d001      	beq.n	8003cf4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003cf0:	f000 fb88 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003cf4:	bf00      	nop
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	20000b64 	.word	0x20000b64
 8003d00:	40001000 	.word	0x40001000

08003d04 <MX_TIM7_Init>:
/**
  * @brief TIM7 Initialization Function
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	601a      	str	r2, [r3, #0]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003d14:	4b15      	ldr	r3, [pc, #84]	; (8003d6c <MX_TIM7_Init+0x68>)
 8003d16:	4a16      	ldr	r2, [pc, #88]	; (8003d70 <MX_TIM7_Init+0x6c>)
 8003d18:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = PRIMARY_TIM_PRESCALER;
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <MX_TIM7_Init+0x68>)
 8003d1c:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003d20:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d22:	4b12      	ldr	r3, [pc, #72]	; (8003d6c <MX_TIM7_Init+0x68>)
 8003d24:	2200      	movs	r2, #0
 8003d26:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = PRIMARY_TIM_ARR;
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <MX_TIM7_Init+0x68>)
 8003d2a:	f243 62af 	movw	r2, #13999	; 0x36af
 8003d2e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d30:	4b0e      	ldr	r3, [pc, #56]	; (8003d6c <MX_TIM7_Init+0x68>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003d36:	480d      	ldr	r0, [pc, #52]	; (8003d6c <MX_TIM7_Init+0x68>)
 8003d38:	f004 fec2 	bl	8008ac0 <HAL_TIM_Base_Init>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003d42:	f000 fb5f 	bl	8004404 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003d46:	2300      	movs	r3, #0
 8003d48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003d4e:	1d3b      	adds	r3, r7, #4
 8003d50:	4619      	mov	r1, r3
 8003d52:	4806      	ldr	r0, [pc, #24]	; (8003d6c <MX_TIM7_Init+0x68>)
 8003d54:	f005 f958 	bl	8009008 <HAL_TIMEx_MasterConfigSynchronization>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_TIM7_Init+0x5e>
  {
    Error_Handler();
 8003d5e:	f000 fb51 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003d62:	bf00      	nop
 8003d64:	3710      	adds	r7, #16
 8003d66:	46bd      	mov	sp, r7
 8003d68:	bd80      	pop	{r7, pc}
 8003d6a:	bf00      	nop
 8003d6c:	20000bb0 	.word	0x20000bb0
 8003d70:	40001400 	.word	0x40001400

08003d74 <MX_TIM16_Init>:
/**
  * @brief TIM16 Initialization Function
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003d78:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003d7a:	4a11      	ldr	r2, [pc, #68]	; (8003dc0 <MX_TIM16_Init+0x4c>)
 8003d7c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = SECONDARY_TIM_PRESCALER;
 8003d7e:	4b0f      	ldr	r3, [pc, #60]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003d80:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8003d84:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d86:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = SECONDARY_TIM_ARR;
 8003d8c:	4b0b      	ldr	r3, [pc, #44]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003d8e:	f241 726f 	movw	r2, #5999	; 0x176f
 8003d92:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003d9a:	4b08      	ldr	r3, [pc, #32]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003da0:	4b06      	ldr	r3, [pc, #24]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003da2:	2200      	movs	r2, #0
 8003da4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8003da6:	4805      	ldr	r0, [pc, #20]	; (8003dbc <MX_TIM16_Init+0x48>)
 8003da8:	f004 fe8a 	bl	8008ac0 <HAL_TIM_Base_Init>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8003db2:	f000 fb27 	bl	8004404 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000bfc 	.word	0x20000bfc
 8003dc0:	40014400 	.word	0x40014400

08003dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003dca:	4b1a      	ldr	r3, [pc, #104]	; (8003e34 <MX_DMA_Init+0x70>)
 8003dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dce:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <MX_DMA_Init+0x70>)
 8003dd0:	f043 0302 	orr.w	r3, r3, #2
 8003dd4:	6493      	str	r3, [r2, #72]	; 0x48
 8003dd6:	4b17      	ldr	r3, [pc, #92]	; (8003e34 <MX_DMA_Init+0x70>)
 8003dd8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	607b      	str	r3, [r7, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003de2:	4b14      	ldr	r3, [pc, #80]	; (8003e34 <MX_DMA_Init+0x70>)
 8003de4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003de6:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <MX_DMA_Init+0x70>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6493      	str	r3, [r2, #72]	; 0x48
 8003dee:	4b11      	ldr	r3, [pc, #68]	; (8003e34 <MX_DMA_Init+0x70>)
 8003df0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df2:	f003 0301 	and.w	r3, r3, #1
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	200d      	movs	r0, #13
 8003e00:	f001 fb95 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003e04:	200d      	movs	r0, #13
 8003e06:	f001 fbae 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	2100      	movs	r1, #0
 8003e0e:	200e      	movs	r0, #14
 8003e10:	f001 fb8d 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003e14:	200e      	movs	r0, #14
 8003e16:	f001 fba6 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel6_IRQn, 0, 0);
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	2044      	movs	r0, #68	; 0x44
 8003e20:	f001 fb85 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel6_IRQn);
 8003e24:	2044      	movs	r0, #68	; 0x44
 8003e26:	f001 fb9e 	bl	8005566 <HAL_NVIC_EnableIRQ>

}
 8003e2a:	bf00      	nop
 8003e2c:	3708      	adds	r7, #8
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40021000 	.word	0x40021000

08003e38 <MX_GPIO_Init>:
/**
  * @brief GPIO Initialization Function
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e3e:	f107 030c 	add.w	r3, r7, #12
 8003e42:	2200      	movs	r2, #0
 8003e44:	601a      	str	r2, [r3, #0]
 8003e46:	605a      	str	r2, [r3, #4]
 8003e48:	609a      	str	r2, [r3, #8]
 8003e4a:	60da      	str	r2, [r3, #12]
 8003e4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e4e:	4b6e      	ldr	r3, [pc, #440]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e52:	4a6d      	ldr	r2, [pc, #436]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e54:	f043 0301 	orr.w	r3, r3, #1
 8003e58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e5a:	4b6b      	ldr	r3, [pc, #428]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	60bb      	str	r3, [r7, #8]
 8003e64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e66:	4b68      	ldr	r3, [pc, #416]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e6a:	4a67      	ldr	r2, [pc, #412]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e6c:	f043 0302 	orr.w	r3, r3, #2
 8003e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e72:	4b65      	ldr	r3, [pc, #404]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	607b      	str	r3, [r7, #4]
 8003e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e7e:	4b62      	ldr	r3, [pc, #392]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e82:	4a61      	ldr	r2, [pc, #388]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e84:	f043 0304 	orr.w	r3, r3, #4
 8003e88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e8a:	4b5f      	ldr	r3, [pc, #380]	; (8004008 <MX_GPIO_Init+0x1d0>)
 8003e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e8e:	f003 0304 	and.w	r3, r3, #4
 8003e92:	603b      	str	r3, [r7, #0]
 8003e94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ONEWIRE_Pin|RADFET_R1_Pin, GPIO_PIN_RESET);
 8003e96:	2200      	movs	r2, #0
 8003e98:	f44f 7184 	mov.w	r1, #264	; 0x108
 8003e9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ea0:	f002 f9b2 	bl	8006208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MKR_RST_Pin|GPS_RST_Pin, GPIO_PIN_SET);
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f44f 7101 	mov.w	r1, #516	; 0x204
 8003eaa:	4858      	ldr	r0, [pc, #352]	; (800400c <MX_GPIO_Init+0x1d4>)
 8003eac:	f002 f9ac 	bl	8006208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8003eb6:	4855      	ldr	r0, [pc, #340]	; (800400c <MX_GPIO_Init+0x1d4>)
 8003eb8:	f002 f9a6 	bl	8006208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RADFET_R2_GPIO_Port, RADFET_R2_Pin, GPIO_PIN_RESET);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ec2:	4853      	ldr	r0, [pc, #332]	; (8004010 <MX_GPIO_Init+0x1d8>)
 8003ec4:	f002 f9a0 	bl	8006208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : ONEWIRE_Pin */
  GPIO_InitStruct.Pin = ONEWIRE_Pin;
 8003ec8:	2308      	movs	r3, #8
 8003eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003ecc:	2311      	movs	r3, #17
 8003ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed4:	2303      	movs	r3, #3
 8003ed6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ONEWIRE_GPIO_Port, &GPIO_InitStruct);
 8003ed8:	f107 030c 	add.w	r3, r7, #12
 8003edc:	4619      	mov	r1, r3
 8003ede:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ee2:	f001 ffff 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MKR_INT1_Pin IMU_INT2_Pin */
  GPIO_InitStruct.Pin = MKR_INT1_Pin|IMU_INT2_Pin;
 8003ee6:	f248 0301 	movw	r3, #32769	; 0x8001
 8003eea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003eec:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003ef0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ef6:	f107 030c 	add.w	r3, r7, #12
 8003efa:	4619      	mov	r1, r3
 8003efc:	4843      	ldr	r0, [pc, #268]	; (800400c <MX_GPIO_Init+0x1d4>)
 8003efe:	f001 fff1 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MKR_RST_Pin */
  GPIO_InitStruct.Pin = MKR_RST_Pin;
 8003f02:	2304      	movs	r3, #4
 8003f04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f06:	2311      	movs	r3, #17
 8003f08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MKR_RST_GPIO_Port, &GPIO_InitStruct);
 8003f12:	f107 030c 	add.w	r3, r7, #12
 8003f16:	4619      	mov	r1, r3
 8003f18:	483c      	ldr	r0, [pc, #240]	; (800400c <MX_GPIO_Init+0x1d4>)
 8003f1a:	f001 ffe3 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LED2_Pin LED1_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin|LED1_Pin;
 8003f1e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8003f22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003f24:	2301      	movs	r3, #1
 8003f26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	4619      	mov	r1, r3
 8003f36:	4835      	ldr	r0, [pc, #212]	; (800400c <MX_GPIO_Init+0x1d4>)
 8003f38:	f001 ffd4 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : IMU_INT1_Pin MAG_INT1_Pin EPS_INT1_Pin */
  GPIO_InitStruct.Pin = IMU_INT1_Pin|MAG_INT1_Pin|EPS_INT1_Pin;
 8003f3c:	f44f 5386 	mov.w	r3, #4288	; 0x10c0
 8003f40:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003f42:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003f46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f48:	2302      	movs	r3, #2
 8003f4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f4c:	f107 030c 	add.w	r3, r7, #12
 8003f50:	4619      	mov	r1, r3
 8003f52:	482f      	ldr	r0, [pc, #188]	; (8004010 <MX_GPIO_Init+0x1d8>)
 8003f54:	f001 ffc6 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADFET_R2_Pin */
  GPIO_InitStruct.Pin = RADFET_R2_Pin;
 8003f58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f5e:	2311      	movs	r3, #17
 8003f60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f62:	2300      	movs	r3, #0
 8003f64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f66:	2300      	movs	r3, #0
 8003f68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RADFET_R2_GPIO_Port, &GPIO_InitStruct);
 8003f6a:	f107 030c 	add.w	r3, r7, #12
 8003f6e:	4619      	mov	r1, r3
 8003f70:	4827      	ldr	r0, [pc, #156]	; (8004010 <MX_GPIO_Init+0x1d8>)
 8003f72:	f001 ffb7 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : RADFET_R1_Pin */
  GPIO_InitStruct.Pin = RADFET_R1_Pin;
 8003f76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003f7c:	2311      	movs	r3, #17
 8003f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f80:	2300      	movs	r3, #0
 8003f82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RADFET_R1_GPIO_Port, &GPIO_InitStruct);
 8003f88:	f107 030c 	add.w	r3, r7, #12
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f92:	f001 ffa7 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_INT1_Pin */
  GPIO_InitStruct.Pin = GPS_INT1_Pin;
 8003f96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003f9c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPS_INT1_GPIO_Port, &GPIO_InitStruct);
 8003fa6:	f107 030c 	add.w	r3, r7, #12
 8003faa:	4619      	mov	r1, r3
 8003fac:	4817      	ldr	r0, [pc, #92]	; (800400c <MX_GPIO_Init+0x1d4>)
 8003fae:	f001 ff99 	bl	8005ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003fb2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003fb8:	2311      	movs	r3, #17
 8003fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003fc4:	f107 030c 	add.w	r3, r7, #12
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4810      	ldr	r0, [pc, #64]	; (800400c <MX_GPIO_Init+0x1d4>)
 8003fcc:	f001 ff8a 	bl	8005ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 6, 0);
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	2106      	movs	r1, #6
 8003fd4:	2006      	movs	r0, #6
 8003fd6:	f001 faaa 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8003fda:	2006      	movs	r0, #6
 8003fdc:	f001 fac3 	bl	8005566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 7, 0);
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	2107      	movs	r1, #7
 8003fe4:	2017      	movs	r0, #23
 8003fe6:	f001 faa2 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003fea:	2017      	movs	r0, #23
 8003fec:	f001 fabb 	bl	8005566 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2106      	movs	r1, #6
 8003ff4:	2028      	movs	r0, #40	; 0x28
 8003ff6:	f001 fa9a 	bl	800552e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003ffa:	2028      	movs	r0, #40	; 0x28
 8003ffc:	f001 fab3 	bl	8005566 <HAL_NVIC_EnableIRQ>

}
 8004000:	bf00      	nop
 8004002:	3720      	adds	r7, #32
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40021000 	.word	0x40021000
 800400c:	48000400 	.word	0x48000400
 8004010:	48000800 	.word	0x48000800

08004014 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
	if 		(htim->Instance == PRIMARY_TIM)		isr_flag |= ISR_FLAG_PRIMARY_TIM;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a0f      	ldr	r2, [pc, #60]	; (8004060 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d108      	bne.n	8004038 <HAL_TIM_PeriodElapsedCallback+0x24>
 8004026:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004030:	b29a      	uxth	r2, r3
 8004032:	4b0c      	ldr	r3, [pc, #48]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004034:	801a      	strh	r2, [r3, #0]
 8004036:	e00c      	b.n	8004052 <HAL_TIM_PeriodElapsedCallback+0x3e>
	else if (htim->Instance == SECONDARY_TIM)	isr_flag |= ISR_FLAG_SECONDARY_TIM;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a0a      	ldr	r2, [pc, #40]	; (8004068 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d10a      	bne.n	8004058 <HAL_TIM_PeriodElapsedCallback+0x44>
 8004042:	4b08      	ldr	r3, [pc, #32]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	b29b      	uxth	r3, r3
 8004048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800404c:	b29a      	uxth	r2, r3
 800404e:	4b05      	ldr	r3, [pc, #20]	; (8004064 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8004050:	801a      	strh	r2, [r3, #0]
	else 										return;

	HAL_PWR_DisableSleepOnExit();
 8004052:	f003 fa25 	bl	80074a0 <HAL_PWR_DisableSleepOnExit>
 8004056:	e000      	b.n	800405a <HAL_TIM_PeriodElapsedCallback+0x46>
	else 										return;
 8004058:	bf00      	nop
}
 800405a:	3708      	adds	r7, #8
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40001400 	.word	0x40001400
 8004064:	20000c48 	.word	0x20000c48
 8004068:	40014400 	.word	0x40014400

0800406c <HAL_GPIO_EXTI_Callback>:
}



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	4603      	mov	r3, r0
 8004074:	80fb      	strh	r3, [r7, #6]
	switch(GPIO_Pin)
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407c:	d008      	beq.n	8004090 <HAL_GPIO_EXTI_Callback+0x24>
 800407e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004082:	dc23      	bgt.n	80040cc <HAL_GPIO_EXTI_Callback+0x60>
 8004084:	2b01      	cmp	r3, #1
 8004086:	d00c      	beq.n	80040a2 <HAL_GPIO_EXTI_Callback+0x36>
 8004088:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800408c:	d012      	beq.n	80040b4 <HAL_GPIO_EXTI_Callback+0x48>
#endif
	case EPS_INT1_Pin:	isr_flag |= ISR_FLAG_EPS_GPIO; 		break;
	case MKR_INT1_Pin:	isr_flag |= ISR_FLAG_MODEM_GPIO;	break;
	case GPS_INT1_Pin:	isr_flag |= ISR_FLAG_GNSS; 			break;

	default: 												return;
 800408e:	e01d      	b.n	80040cc <HAL_GPIO_EXTI_Callback+0x60>
	case EPS_INT1_Pin:	isr_flag |= ISR_FLAG_EPS_GPIO; 		break;
 8004090:	4b10      	ldr	r3, [pc, #64]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x68>)
 8004092:	881b      	ldrh	r3, [r3, #0]
 8004094:	b29b      	uxth	r3, r3
 8004096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800409a:	b29a      	uxth	r2, r3
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x68>)
 800409e:	801a      	strh	r2, [r3, #0]
 80040a0:	e011      	b.n	80040c6 <HAL_GPIO_EXTI_Callback+0x5a>
	case MKR_INT1_Pin:	isr_flag |= ISR_FLAG_MODEM_GPIO;	break;
 80040a2:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	b29b      	uxth	r3, r3
 80040a8:	f043 0320 	orr.w	r3, r3, #32
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80040b0:	801a      	strh	r2, [r3, #0]
 80040b2:	e008      	b.n	80040c6 <HAL_GPIO_EXTI_Callback+0x5a>
	case GPS_INT1_Pin:	isr_flag |= ISR_FLAG_GNSS; 			break;
 80040b4:	4b07      	ldr	r3, [pc, #28]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80040b6:	881b      	ldrh	r3, [r3, #0]
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	f043 0301 	orr.w	r3, r3, #1
 80040be:	b29a      	uxth	r2, r3
 80040c0:	4b04      	ldr	r3, [pc, #16]	; (80040d4 <HAL_GPIO_EXTI_Callback+0x68>)
 80040c2:	801a      	strh	r2, [r3, #0]
 80040c4:	bf00      	nop
	}
	HAL_PWR_DisableSleepOnExit();
 80040c6:	f003 f9eb 	bl	80074a0 <HAL_PWR_DisableSleepOnExit>
 80040ca:	e000      	b.n	80040ce <HAL_GPIO_EXTI_Callback+0x62>
	default: 												return;
 80040cc:	bf00      	nop

}
 80040ce:	3708      	adds	r7, #8
 80040d0:	46bd      	mov	sp, r7
 80040d2:	bd80      	pop	{r7, pc}
 80040d4:	20000c48 	.word	0x20000c48

080040d8 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b082      	sub	sp, #8
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
	HAL_ResumeTick();
 80040e0:	f001 f93a 	bl	8005358 <HAL_ResumeTick>

	if(huart->Instance == GNSS_UART)		// GPS
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4a0d      	ldr	r2, [pc, #52]	; (8004120 <HAL_UART_RxCpltCallback+0x48>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d103      	bne.n	80040f6 <HAL_UART_RxCpltCallback+0x1e>
		uart_gnss_handle(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f81c 	bl	800412c <uart_gnss_handle>
	else if(huart->Instance == EPS_UART)	// EPS
		uart_eps_handle(huart);

	else if(huart->Instance == MODEM_UART)	// MODEM
		uart_modem_handle(huart);
}
 80040f4:	e010      	b.n	8004118 <HAL_UART_RxCpltCallback+0x40>
	else if(huart->Instance == EPS_UART)	// EPS
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a0a      	ldr	r2, [pc, #40]	; (8004124 <HAL_UART_RxCpltCallback+0x4c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d103      	bne.n	8004108 <HAL_UART_RxCpltCallback+0x30>
		uart_eps_handle(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f86d 	bl	80041e0 <uart_eps_handle>
}
 8004106:	e007      	b.n	8004118 <HAL_UART_RxCpltCallback+0x40>
	else if(huart->Instance == MODEM_UART)	// MODEM
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a06      	ldr	r2, [pc, #24]	; (8004128 <HAL_UART_RxCpltCallback+0x50>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d102      	bne.n	8004118 <HAL_UART_RxCpltCallback+0x40>
		uart_modem_handle(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f8f6 	bl	8004304 <uart_modem_handle>
}
 8004118:	bf00      	nop
 800411a:	3708      	adds	r7, #8
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	40004800 	.word	0x40004800
 8004124:	40013800 	.word	0x40013800
 8004128:	40008000 	.word	0x40008000

0800412c <uart_gnss_handle>:




static inline void uart_gnss_handle(UART_HandleTypeDef *huart)
{
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
	static uint32_t gnss_ring_pos = 0;

	static uint8_t gnss_flag_nmea_ini = 0;
	static uint32_t gnss_current_ini = 0;

	if (gnss_ring[gnss_ring_pos] == '$')	// Ha encontrado un inicio de cadena?
 8004134:	4b23      	ldr	r3, [pc, #140]	; (80041c4 <uart_gnss_handle+0x98>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a23      	ldr	r2, [pc, #140]	; (80041c8 <uart_gnss_handle+0x9c>)
 800413a:	5cd3      	ldrb	r3, [r2, r3]
 800413c:	2b24      	cmp	r3, #36	; 0x24
 800413e:	d107      	bne.n	8004150 <uart_gnss_handle+0x24>
	{
		gnss_flag_nmea_ini = 1;
 8004140:	4b22      	ldr	r3, [pc, #136]	; (80041cc <uart_gnss_handle+0xa0>)
 8004142:	2201      	movs	r2, #1
 8004144:	701a      	strb	r2, [r3, #0]
		gnss_current_ini = gnss_ring_pos;
 8004146:	4b1f      	ldr	r3, [pc, #124]	; (80041c4 <uart_gnss_handle+0x98>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a21      	ldr	r2, [pc, #132]	; (80041d0 <uart_gnss_handle+0xa4>)
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e01e      	b.n	800418e <uart_gnss_handle+0x62>
#if(GNSS_READ_PUBX)
		gnss_flag_pubx_ini = 0;
#endif
	}

	else if ((gnss_ring[gnss_ring_pos] == '\n') && gnss_flag_nmea_ini) // Ha encontrado un fin de cadena?
 8004150:	4b1c      	ldr	r3, [pc, #112]	; (80041c4 <uart_gnss_handle+0x98>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a1c      	ldr	r2, [pc, #112]	; (80041c8 <uart_gnss_handle+0x9c>)
 8004156:	5cd3      	ldrb	r3, [r2, r3]
 8004158:	2b0a      	cmp	r3, #10
 800415a:	d118      	bne.n	800418e <uart_gnss_handle+0x62>
 800415c:	4b1b      	ldr	r3, [pc, #108]	; (80041cc <uart_gnss_handle+0xa0>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d014      	beq.n	800418e <uart_gnss_handle+0x62>
	{
		gnss_flag_nmea_ini = 0;
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <uart_gnss_handle+0xa0>)
 8004166:	2200      	movs	r2, #0
 8004168:	701a      	strb	r2, [r3, #0]
		gnss_ring_last_ini = gnss_current_ini;
 800416a:	4b19      	ldr	r3, [pc, #100]	; (80041d0 <uart_gnss_handle+0xa4>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a19      	ldr	r2, [pc, #100]	; (80041d4 <uart_gnss_handle+0xa8>)
 8004170:	6013      	str	r3, [r2, #0]
		gnss_ring_last_end = gnss_ring_pos;
 8004172:	4b14      	ldr	r3, [pc, #80]	; (80041c4 <uart_gnss_handle+0x98>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	4a18      	ldr	r2, [pc, #96]	; (80041d8 <uart_gnss_handle+0xac>)
 8004178:	6013      	str	r3, [r2, #0]
		isr_flag |= ISR_FLAG_GNSS;					// Interpreta la cadena
 800417a:	4b18      	ldr	r3, [pc, #96]	; (80041dc <uart_gnss_handle+0xb0>)
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f043 0301 	orr.w	r3, r3, #1
 8004184:	b29a      	uxth	r2, r3
 8004186:	4b15      	ldr	r3, [pc, #84]	; (80041dc <uart_gnss_handle+0xb0>)
 8004188:	801a      	strh	r2, [r3, #0]
		HAL_PWR_DisableSleepOnExit();
 800418a:	f003 f989 	bl	80074a0 <HAL_PWR_DisableSleepOnExit>
			}
		}
	}
#endif

	gnss_ring_pos++;
 800418e:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <uart_gnss_handle+0x98>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3301      	adds	r3, #1
 8004194:	4a0b      	ldr	r2, [pc, #44]	; (80041c4 <uart_gnss_handle+0x98>)
 8004196:	6013      	str	r3, [r2, #0]
	if(gnss_ring_pos >= GNSS_RING_BUFFER_SIZE) 	gnss_ring_pos = 0;	// Si ha llegado al final, dale la vuelta
 8004198:	4b0a      	ldr	r3, [pc, #40]	; (80041c4 <uart_gnss_handle+0x98>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041a0:	d302      	bcc.n	80041a8 <uart_gnss_handle+0x7c>
 80041a2:	4b08      	ldr	r3, [pc, #32]	; (80041c4 <uart_gnss_handle+0x98>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

	HAL_UART_Receive_DMA(huart, &gnss_ring[gnss_ring_pos], 1);
 80041a8:	4b06      	ldr	r3, [pc, #24]	; (80041c4 <uart_gnss_handle+0x98>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a06      	ldr	r2, [pc, #24]	; (80041c8 <uart_gnss_handle+0x9c>)
 80041ae:	4413      	add	r3, r2
 80041b0:	2201      	movs	r2, #1
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f005 f973 	bl	80094a0 <HAL_UART_Receive_DMA>
}
 80041ba:	bf00      	nop
 80041bc:	3708      	adds	r7, #8
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	20000e54 	.word	0x20000e54
 80041c8:	20000264 	.word	0x20000264
 80041cc:	20000e58 	.word	0x20000e58
 80041d0:	20000e5c 	.word	0x20000e5c
 80041d4:	20000668 	.word	0x20000668
 80041d8:	20000664 	.word	0x20000664
 80041dc:	20000c48 	.word	0x20000c48

080041e0 <uart_eps_handle>:



static inline void uart_eps_handle(UART_HandleTypeDef *huart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
	static uint8_t eps_packet_length = 0;
	static bus_sync_flag_t eps_sync_flag = BUS_PACKET_SYNC_FIND;
	static uint8_t eps_buffer_pos = 0;

	if (eps_sync_flag != BUS_PACKET_SYNC_COMPLETED)
 80041e8:	4b41      	ldr	r3, [pc, #260]	; (80042f0 <uart_eps_handle+0x110>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d038      	beq.n	8004262 <uart_eps_handle+0x82>
	{
		eps_sync_flag = bus_packet_SyncFrameDetect(eps_sync_flag, eps_buffer_rx[eps_buffer_pos]);
 80041f0:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <uart_eps_handle+0x110>)
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	4a3f      	ldr	r2, [pc, #252]	; (80042f4 <uart_eps_handle+0x114>)
 80041f6:	7812      	ldrb	r2, [r2, #0]
 80041f8:	4611      	mov	r1, r2
 80041fa:	4a3f      	ldr	r2, [pc, #252]	; (80042f8 <uart_eps_handle+0x118>)
 80041fc:	5c52      	ldrb	r2, [r2, r1]
 80041fe:	4611      	mov	r1, r2
 8004200:	4618      	mov	r0, r3
 8004202:	f7fd fdb3 	bl	8001d6c <bus_packet_SyncFrameDetect>
 8004206:	4603      	mov	r3, r0
 8004208:	461a      	mov	r2, r3
 800420a:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <uart_eps_handle+0x110>)
 800420c:	701a      	strb	r2, [r3, #0]

		if(eps_sync_flag == BUS_PACKET_SYNC_COMPLETED)
 800420e:	4b38      	ldr	r3, [pc, #224]	; (80042f0 <uart_eps_handle+0x110>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b10      	cmp	r3, #16
 8004214:	d10d      	bne.n	8004232 <uart_eps_handle+0x52>
		{
			eps_buffer_pos=0;
 8004216:	4b37      	ldr	r3, [pc, #220]	; (80042f4 <uart_eps_handle+0x114>)
 8004218:	2200      	movs	r2, #0
 800421a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &eps_buffer_rx[eps_buffer_pos], 1);
 800421c:	4b35      	ldr	r3, [pc, #212]	; (80042f4 <uart_eps_handle+0x114>)
 800421e:	781b      	ldrb	r3, [r3, #0]
 8004220:	461a      	mov	r2, r3
 8004222:	4b35      	ldr	r3, [pc, #212]	; (80042f8 <uart_eps_handle+0x118>)
 8004224:	4413      	add	r3, r2
 8004226:	2201      	movs	r2, #1
 8004228:	4619      	mov	r1, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f005 f852 	bl	80092d4 <HAL_UART_Receive_IT>

		if(eps_buffer_pos < BUS_PACKET_BUS_SIZE)
			HAL_UART_Receive_IT(huart, &eps_buffer_rx[eps_buffer_pos], 1);
		else Error_Handler();
	}
}
 8004230:	e059      	b.n	80042e6 <uart_eps_handle+0x106>
			eps_buffer_pos++;
 8004232:	4b30      	ldr	r3, [pc, #192]	; (80042f4 <uart_eps_handle+0x114>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	3301      	adds	r3, #1
 8004238:	b2da      	uxtb	r2, r3
 800423a:	4b2e      	ldr	r3, [pc, #184]	; (80042f4 <uart_eps_handle+0x114>)
 800423c:	701a      	strb	r2, [r3, #0]
			if(eps_buffer_pos >= BUS_PACKET_BUS_SIZE)
 800423e:	4b2d      	ldr	r3, [pc, #180]	; (80042f4 <uart_eps_handle+0x114>)
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b7e      	cmp	r3, #126	; 0x7e
 8004244:	d902      	bls.n	800424c <uart_eps_handle+0x6c>
				eps_buffer_pos=0;
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <uart_eps_handle+0x114>)
 8004248:	2200      	movs	r2, #0
 800424a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &eps_buffer_rx[eps_buffer_pos], 1);
 800424c:	4b29      	ldr	r3, [pc, #164]	; (80042f4 <uart_eps_handle+0x114>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	461a      	mov	r2, r3
 8004252:	4b29      	ldr	r3, [pc, #164]	; (80042f8 <uart_eps_handle+0x118>)
 8004254:	4413      	add	r3, r2
 8004256:	2201      	movs	r2, #1
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f005 f83a 	bl	80092d4 <HAL_UART_Receive_IT>
}
 8004260:	e041      	b.n	80042e6 <uart_eps_handle+0x106>
		if(eps_buffer_pos > 0)	// Se sabe ya la longitud real?
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <uart_eps_handle+0x114>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d026      	beq.n	80042b8 <uart_eps_handle+0xd8>
			eps_packet_length = bus_packet_GetLength(eps_buffer_rx);	// Cual era?
 800426a:	4823      	ldr	r0, [pc, #140]	; (80042f8 <uart_eps_handle+0x118>)
 800426c:	f7ff f8d0 	bl	8003410 <bus_packet_GetLength>
 8004270:	4603      	mov	r3, r0
 8004272:	461a      	mov	r2, r3
 8004274:	4b21      	ldr	r3, [pc, #132]	; (80042fc <uart_eps_handle+0x11c>)
 8004276:	701a      	strb	r2, [r3, #0]
			if (eps_buffer_pos >= (eps_packet_length-1))		// Ha terminado la transmisión?
 8004278:	4b1e      	ldr	r3, [pc, #120]	; (80042f4 <uart_eps_handle+0x114>)
 800427a:	781b      	ldrb	r3, [r3, #0]
 800427c:	461a      	mov	r2, r3
 800427e:	4b1f      	ldr	r3, [pc, #124]	; (80042fc <uart_eps_handle+0x11c>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	3b01      	subs	r3, #1
 8004284:	429a      	cmp	r2, r3
 8004286:	db10      	blt.n	80042aa <uart_eps_handle+0xca>
				eps_buffer_pos = 0;
 8004288:	4b1a      	ldr	r3, [pc, #104]	; (80042f4 <uart_eps_handle+0x114>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
				isr_flag |= ISR_FLAG_EPS_BUS;
 800428e:	4b1c      	ldr	r3, [pc, #112]	; (8004300 <uart_eps_handle+0x120>)
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	b29b      	uxth	r3, r3
 8004294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004298:	b29a      	uxth	r2, r3
 800429a:	4b19      	ldr	r3, [pc, #100]	; (8004300 <uart_eps_handle+0x120>)
 800429c:	801a      	strh	r2, [r3, #0]
				eps_sync_flag = BUS_PACKET_SYNC_FIND;
 800429e:	4b14      	ldr	r3, [pc, #80]	; (80042f0 <uart_eps_handle+0x110>)
 80042a0:	2201      	movs	r2, #1
 80042a2:	701a      	strb	r2, [r3, #0]
				HAL_PWR_DisableSleepOnExit();
 80042a4:	f003 f8fc 	bl	80074a0 <HAL_PWR_DisableSleepOnExit>
 80042a8:	e00c      	b.n	80042c4 <uart_eps_handle+0xe4>
			else eps_buffer_pos++;
 80042aa:	4b12      	ldr	r3, [pc, #72]	; (80042f4 <uart_eps_handle+0x114>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	3301      	adds	r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	4b10      	ldr	r3, [pc, #64]	; (80042f4 <uart_eps_handle+0x114>)
 80042b4:	701a      	strb	r2, [r3, #0]
 80042b6:	e005      	b.n	80042c4 <uart_eps_handle+0xe4>
		else	eps_buffer_pos++;
 80042b8:	4b0e      	ldr	r3, [pc, #56]	; (80042f4 <uart_eps_handle+0x114>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	3301      	adds	r3, #1
 80042be:	b2da      	uxtb	r2, r3
 80042c0:	4b0c      	ldr	r3, [pc, #48]	; (80042f4 <uart_eps_handle+0x114>)
 80042c2:	701a      	strb	r2, [r3, #0]
		if(eps_buffer_pos < BUS_PACKET_BUS_SIZE)
 80042c4:	4b0b      	ldr	r3, [pc, #44]	; (80042f4 <uart_eps_handle+0x114>)
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	2b7e      	cmp	r3, #126	; 0x7e
 80042ca:	d80a      	bhi.n	80042e2 <uart_eps_handle+0x102>
			HAL_UART_Receive_IT(huart, &eps_buffer_rx[eps_buffer_pos], 1);
 80042cc:	4b09      	ldr	r3, [pc, #36]	; (80042f4 <uart_eps_handle+0x114>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	4b09      	ldr	r3, [pc, #36]	; (80042f8 <uart_eps_handle+0x118>)
 80042d4:	4413      	add	r3, r2
 80042d6:	2201      	movs	r2, #1
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f004 fffa 	bl	80092d4 <HAL_UART_Receive_IT>
}
 80042e0:	e001      	b.n	80042e6 <uart_eps_handle+0x106>
		else Error_Handler();
 80042e2:	f000 f88f 	bl	8004404 <Error_Handler>
}
 80042e6:	bf00      	nop
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	2000000a 	.word	0x2000000a
 80042f4:	20000e60 	.word	0x20000e60
 80042f8:	20000c4c 	.word	0x20000c4c
 80042fc:	20000e61 	.word	0x20000e61
 8004300:	20000c48 	.word	0x20000c48

08004304 <uart_modem_handle>:




static inline void uart_modem_handle(UART_HandleTypeDef *huart)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b082      	sub	sp, #8
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
	static uint8_t modem_packet_length = 0;
	static bus_sync_flag_t modem_sync_flag = BUS_PACKET_SYNC_FIND;
	static uint8_t modem_buffer_pos = 0;

	if (modem_sync_flag != BUS_PACKET_SYNC_COMPLETED)
 800430c:	4b38      	ldr	r3, [pc, #224]	; (80043f0 <uart_modem_handle+0xec>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	2b10      	cmp	r3, #16
 8004312:	d024      	beq.n	800435e <uart_modem_handle+0x5a>
	{
		modem_sync_flag = bus_packet_SyncFrameDetect(modem_sync_flag, modem_buffer_rx[modem_buffer_pos]);
 8004314:	4b36      	ldr	r3, [pc, #216]	; (80043f0 <uart_modem_handle+0xec>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	4a36      	ldr	r2, [pc, #216]	; (80043f4 <uart_modem_handle+0xf0>)
 800431a:	7812      	ldrb	r2, [r2, #0]
 800431c:	4611      	mov	r1, r2
 800431e:	4a36      	ldr	r2, [pc, #216]	; (80043f8 <uart_modem_handle+0xf4>)
 8004320:	5c52      	ldrb	r2, [r2, r1]
 8004322:	4611      	mov	r1, r2
 8004324:	4618      	mov	r0, r3
 8004326:	f7fd fd21 	bl	8001d6c <bus_packet_SyncFrameDetect>
 800432a:	4603      	mov	r3, r0
 800432c:	461a      	mov	r2, r3
 800432e:	4b30      	ldr	r3, [pc, #192]	; (80043f0 <uart_modem_handle+0xec>)
 8004330:	701a      	strb	r2, [r3, #0]

		if(modem_sync_flag == BUS_PACKET_SYNC_COMPLETED)
 8004332:	4b2f      	ldr	r3, [pc, #188]	; (80043f0 <uart_modem_handle+0xec>)
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b10      	cmp	r3, #16
 8004338:	d103      	bne.n	8004342 <uart_modem_handle+0x3e>
			modem_buffer_pos=0;
 800433a:	4b2e      	ldr	r3, [pc, #184]	; (80043f4 <uart_modem_handle+0xf0>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
 8004340:	e048      	b.n	80043d4 <uart_modem_handle+0xd0>

		else
		{
			modem_buffer_pos++;
 8004342:	4b2c      	ldr	r3, [pc, #176]	; (80043f4 <uart_modem_handle+0xf0>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	3301      	adds	r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <uart_modem_handle+0xf0>)
 800434c:	701a      	strb	r2, [r3, #0]
			if(modem_buffer_pos >= BUS_PACKET_BUS_SIZE)
 800434e:	4b29      	ldr	r3, [pc, #164]	; (80043f4 <uart_modem_handle+0xf0>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b7e      	cmp	r3, #126	; 0x7e
 8004354:	d93e      	bls.n	80043d4 <uart_modem_handle+0xd0>
				modem_buffer_pos=0;
 8004356:	4b27      	ldr	r3, [pc, #156]	; (80043f4 <uart_modem_handle+0xf0>)
 8004358:	2200      	movs	r2, #0
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	e03a      	b.n	80043d4 <uart_modem_handle+0xd0>
		}
	}

	else
	{
		if(modem_buffer_pos > 0)	// Se sabe ya la longitud real?
 800435e:	4b25      	ldr	r3, [pc, #148]	; (80043f4 <uart_modem_handle+0xf0>)
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d026      	beq.n	80043b4 <uart_modem_handle+0xb0>
		{
			modem_packet_length = bus_packet_GetLength(modem_buffer_rx);	// Cual era?
 8004366:	4824      	ldr	r0, [pc, #144]	; (80043f8 <uart_modem_handle+0xf4>)
 8004368:	f7ff f852 	bl	8003410 <bus_packet_GetLength>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	4b22      	ldr	r3, [pc, #136]	; (80043fc <uart_modem_handle+0xf8>)
 8004372:	701a      	strb	r2, [r3, #0]

			if (modem_buffer_pos >= (modem_packet_length-1))		// Ha terminado la transmisión?
 8004374:	4b1f      	ldr	r3, [pc, #124]	; (80043f4 <uart_modem_handle+0xf0>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	461a      	mov	r2, r3
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <uart_modem_handle+0xf8>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	3b01      	subs	r3, #1
 8004380:	429a      	cmp	r2, r3
 8004382:	db10      	blt.n	80043a6 <uart_modem_handle+0xa2>
			{
				modem_buffer_pos = 0;
 8004384:	4b1b      	ldr	r3, [pc, #108]	; (80043f4 <uart_modem_handle+0xf0>)
 8004386:	2200      	movs	r2, #0
 8004388:	701a      	strb	r2, [r3, #0]
				isr_flag |= ISR_FLAG_MODEM_BUS;
 800438a:	4b1d      	ldr	r3, [pc, #116]	; (8004400 <uart_modem_handle+0xfc>)
 800438c:	881b      	ldrh	r3, [r3, #0]
 800438e:	b29b      	uxth	r3, r3
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	b29a      	uxth	r2, r3
 8004396:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <uart_modem_handle+0xfc>)
 8004398:	801a      	strh	r2, [r3, #0]
				modem_sync_flag = BUS_PACKET_SYNC_FIND;
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <uart_modem_handle+0xec>)
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
				HAL_PWR_DisableSleepOnExit();
 80043a0:	f003 f87e 	bl	80074a0 <HAL_PWR_DisableSleepOnExit>
 80043a4:	e00c      	b.n	80043c0 <uart_modem_handle+0xbc>
			}
			else modem_buffer_pos++;
 80043a6:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <uart_modem_handle+0xf0>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	3301      	adds	r3, #1
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	4b11      	ldr	r3, [pc, #68]	; (80043f4 <uart_modem_handle+0xf0>)
 80043b0:	701a      	strb	r2, [r3, #0]
 80043b2:	e005      	b.n	80043c0 <uart_modem_handle+0xbc>
		}
		else	modem_buffer_pos++;
 80043b4:	4b0f      	ldr	r3, [pc, #60]	; (80043f4 <uart_modem_handle+0xf0>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	3301      	adds	r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <uart_modem_handle+0xf0>)
 80043be:	701a      	strb	r2, [r3, #0]

		if(modem_buffer_pos >= BUS_PACKET_BUS_SIZE)
 80043c0:	4b0c      	ldr	r3, [pc, #48]	; (80043f4 <uart_modem_handle+0xf0>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	2b7e      	cmp	r3, #126	; 0x7e
 80043c6:	d905      	bls.n	80043d4 <uart_modem_handle+0xd0>
		{
			modem_buffer_pos = 0;
 80043c8:	4b0a      	ldr	r3, [pc, #40]	; (80043f4 <uart_modem_handle+0xf0>)
 80043ca:	2200      	movs	r2, #0
 80043cc:	701a      	strb	r2, [r3, #0]
			modem_sync_flag = BUS_PACKET_SYNC_FIND;
 80043ce:	4b08      	ldr	r3, [pc, #32]	; (80043f0 <uart_modem_handle+0xec>)
 80043d0:	2201      	movs	r2, #1
 80043d2:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(huart, &modem_buffer_rx[modem_buffer_pos], 1);
 80043d4:	4b07      	ldr	r3, [pc, #28]	; (80043f4 <uart_modem_handle+0xf0>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	4b07      	ldr	r3, [pc, #28]	; (80043f8 <uart_modem_handle+0xf4>)
 80043dc:	4413      	add	r3, r2
 80043de:	2201      	movs	r2, #1
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f004 ff76 	bl	80092d4 <HAL_UART_Receive_IT>
}
 80043e8:	bf00      	nop
 80043ea:	3708      	adds	r7, #8
 80043ec:	46bd      	mov	sp, r7
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	2000000b 	.word	0x2000000b
 80043f4:	20000e62 	.word	0x20000e62
 80043f8:	20000d50 	.word	0x20000d50
 80043fc:	20000e63 	.word	0x20000e63
 8004400:	20000c48 	.word	0x20000c48

08004404 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800440a:	b672      	cpsid	i
}
 800440c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800440e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004412:	4807      	ldr	r0, [pc, #28]	; (8004430 <Error_Handler+0x2c>)
 8004414:	f001 ff10 	bl	8006238 <HAL_GPIO_TogglePin>
	  for(uint32_t i=0; i<3000000; i++)
 8004418:	2300      	movs	r3, #0
 800441a:	607b      	str	r3, [r7, #4]
 800441c:	e003      	b.n	8004426 <Error_Handler+0x22>
	  {
		  asm("NOP");
 800441e:	bf00      	nop
	  for(uint32_t i=0; i<3000000; i++)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	3301      	adds	r3, #1
 8004424:	607b      	str	r3, [r7, #4]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a02      	ldr	r2, [pc, #8]	; (8004434 <Error_Handler+0x30>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d9f7      	bls.n	800441e <Error_Handler+0x1a>
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800442e:	e7ee      	b.n	800440e <Error_Handler+0xa>
 8004430:	48000400 	.word	0x48000400
 8004434:	002dc6bf 	.word	0x002dc6bf

08004438 <ms5607_conversion>:
 * Perform a single conversion with a specified CMD
 * @param cmd Command for conversion. See
 * @return HAL status
 */
static inline HAL_StatusTypeDef ms5607_conversion(uint8_t cmd)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b086      	sub	sp, #24
 800443c:	af02      	add	r7, sp, #8
 800443e:	4603      	mov	r3, r0
 8004440:	71fb      	strb	r3, [r7, #7]
	uint8_t data = cmd; //(CMD_ADC_CONV+CMD_ADC_D1+CMD_ADC_512)
 8004442:	79fb      	ldrb	r3, [r7, #7]
 8004444:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef err = HAL_I2C_Master_Transmit(&hi2c1, MS5607_ADDRESS, &data, 1, 10);
 8004446:	f107 020e 	add.w	r2, r7, #14
 800444a:	230a      	movs	r3, #10
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	2301      	movs	r3, #1
 8004450:	21ec      	movs	r1, #236	; 0xec
 8004452:	4807      	ldr	r0, [pc, #28]	; (8004470 <ms5607_conversion+0x38>)
 8004454:	f001 ffb2 	bl	80063bc <HAL_I2C_Master_Transmit>
 8004458:	4603      	mov	r3, r0
 800445a:	73fb      	strb	r3, [r7, #15]
	if (err != HAL_OK)	return HAL_ERROR;
 800445c:	7bfb      	ldrb	r3, [r7, #15]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <ms5607_conversion+0x2e>
 8004462:	2301      	movs	r3, #1
 8004464:	e000      	b.n	8004468 <ms5607_conversion+0x30>
	else 				return HAL_OK;
 8004466:	2300      	movs	r3, #0
}
 8004468:	4618      	mov	r0, r3
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}
 8004470:	20000878 	.word	0x20000878

08004474 <ms5607_read>:
 * Read a specified length of memory
 * @param length Memory length for read
 * @return HAL status
 */
static inline HAL_StatusTypeDef ms5607_read(uint8_t length)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b086      	sub	sp, #24
 8004478:	af02      	add	r7, sp, #8
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
	uint8_t data = MS5607_CMD_ADC_READ;
 800447e:	2300      	movs	r3, #0
 8004480:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef err = HAL_I2C_Master_Transmit(&hi2c1, MS5607_ADDRESS, &data, 1, 10);
 8004482:	f107 020e 	add.w	r2, r7, #14
 8004486:	230a      	movs	r3, #10
 8004488:	9300      	str	r3, [sp, #0]
 800448a:	2301      	movs	r3, #1
 800448c:	21ec      	movs	r1, #236	; 0xec
 800448e:	4807      	ldr	r0, [pc, #28]	; (80044ac <ms5607_read+0x38>)
 8004490:	f001 ff94 	bl	80063bc <HAL_I2C_Master_Transmit>
 8004494:	4603      	mov	r3, r0
 8004496:	73fb      	strb	r3, [r7, #15]
	if (err != HAL_OK)	return HAL_ERROR;
 8004498:	7bfb      	ldrb	r3, [r7, #15]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <ms5607_read+0x2e>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <ms5607_read+0x30>
	else 				return HAL_OK;
 80044a2:	2300      	movs	r3, #0
}
 80044a4:	4618      	mov	r0, r3
 80044a6:	3710      	adds	r7, #16
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	20000878 	.word	0x20000878

080044b0 <ms5607_getRawData>:
 * @param length Length for read
 * @param data Pointer to read data
 * @return HAL status
 */
static inline HAL_StatusTypeDef ms5607_getRawData(uint8_t length, uint8_t *data)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af02      	add	r7, sp, #8
 80044b6:	4603      	mov	r3, r0
 80044b8:	6039      	str	r1, [r7, #0]
 80044ba:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef err = HAL_I2C_Master_Receive(&hi2c1, MS5607_ADDRESS, data, length, 100);
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	2264      	movs	r2, #100	; 0x64
 80044c2:	9200      	str	r2, [sp, #0]
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	21ec      	movs	r1, #236	; 0xec
 80044c8:	4807      	ldr	r0, [pc, #28]	; (80044e8 <ms5607_getRawData+0x38>)
 80044ca:	f002 f86b 	bl	80065a4 <HAL_I2C_Master_Receive>
 80044ce:	4603      	mov	r3, r0
 80044d0:	73fb      	strb	r3, [r7, #15]
	if (err != HAL_OK)	return HAL_ERROR;
 80044d2:	7bfb      	ldrb	r3, [r7, #15]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d001      	beq.n	80044dc <ms5607_getRawData+0x2c>
 80044d8:	2301      	movs	r3, #1
 80044da:	e000      	b.n	80044de <ms5607_getRawData+0x2e>
	else 				return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000878 	.word	0x20000878

080044ec <ms5607_readPROM>:
 * Read a coefficient number from PROM
 * @param coef_num Coefficient number for read
 * @return HAL status
 */
static inline HAL_StatusTypeDef ms5607_readPROM(uint8_t coef_num)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b086      	sub	sp, #24
 80044f0:	af02      	add	r7, sp, #8
 80044f2:	4603      	mov	r3, r0
 80044f4:	71fb      	strb	r3, [r7, #7]
	uint8_t data = MS5607_CMD_PROM_RD+coef_num*2;
 80044f6:	79fb      	ldrb	r3, [r7, #7]
 80044f8:	3350      	adds	r3, #80	; 0x50
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	005b      	lsls	r3, r3, #1
 80044fe:	b2db      	uxtb	r3, r3
 8004500:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef err = HAL_I2C_Master_Transmit(&hi2c1, MS5607_ADDRESS, &data, 1, 10); // send PROM READ command
 8004502:	f107 020e 	add.w	r2, r7, #14
 8004506:	230a      	movs	r3, #10
 8004508:	9300      	str	r3, [sp, #0]
 800450a:	2301      	movs	r3, #1
 800450c:	21ec      	movs	r1, #236	; 0xec
 800450e:	4807      	ldr	r0, [pc, #28]	; (800452c <ms5607_readPROM+0x40>)
 8004510:	f001 ff54 	bl	80063bc <HAL_I2C_Master_Transmit>
 8004514:	4603      	mov	r3, r0
 8004516:	73fb      	strb	r3, [r7, #15]
	if (err != HAL_OK)	return HAL_ERROR;
 8004518:	7bfb      	ldrb	r3, [r7, #15]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d001      	beq.n	8004522 <ms5607_readPROM+0x36>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <ms5607_readPROM+0x38>
	else 				return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3710      	adds	r7, #16
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	20000878 	.word	0x20000878

08004530 <ms5607_reset>:
/**
 * Perform a device reset
 * @return HAL status
 */
HAL_StatusTypeDef ms5607_reset()
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b084      	sub	sp, #16
 8004534:	af02      	add	r7, sp, #8
	uint8_t data = MS5607_CMD_RESET;
 8004536:	231e      	movs	r3, #30
 8004538:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef err = HAL_I2C_Master_Transmit(&hi2c1, MS5607_ADDRESS, &data, 1, 10);
 800453a:	1dba      	adds	r2, r7, #6
 800453c:	230a      	movs	r3, #10
 800453e:	9300      	str	r3, [sp, #0]
 8004540:	2301      	movs	r3, #1
 8004542:	21ec      	movs	r1, #236	; 0xec
 8004544:	4807      	ldr	r0, [pc, #28]	; (8004564 <ms5607_reset+0x34>)
 8004546:	f001 ff39 	bl	80063bc <HAL_I2C_Master_Transmit>
 800454a:	4603      	mov	r3, r0
 800454c:	71fb      	strb	r3, [r7, #7]
	if (err != HAL_OK)	return HAL_ERROR;
 800454e:	79fb      	ldrb	r3, [r7, #7]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <ms5607_reset+0x28>
 8004554:	2301      	movs	r3, #1
 8004556:	e000      	b.n	800455a <ms5607_reset+0x2a>
	else 				return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20000878 	.word	0x20000878

08004568 <ms5607_readCalibration>:
 * Read calibration values from PROM
 * @param cal Pointer to calibration values
 * @return HAL status
 */
HAL_StatusTypeDef ms5607_readCalibration(uint16_t *cal)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
	uint8_t raw_data[2] = {0};
 8004570:	2300      	movs	r3, #0
 8004572:	81bb      	strh	r3, [r7, #12]

	for(uint8_t i=0; i<6; i++)
 8004574:	2300      	movs	r3, #0
 8004576:	73fb      	strb	r3, [r7, #15]
 8004578:	e025      	b.n	80045c6 <ms5607_readCalibration+0x5e>
	{
		if(ms5607_readPROM((i+1)) != HAL_OK)			return HAL_ERROR;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	3301      	adds	r3, #1
 800457e:	b2db      	uxtb	r3, r3
 8004580:	4618      	mov	r0, r3
 8004582:	f7ff ffb3 	bl	80044ec <ms5607_readPROM>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d001      	beq.n	8004590 <ms5607_readCalibration+0x28>
 800458c:	2301      	movs	r3, #1
 800458e:	e01e      	b.n	80045ce <ms5607_readCalibration+0x66>
		if(ms5607_getRawData(2, raw_data) != HAL_OK)	return HAL_ERROR;
 8004590:	f107 030c 	add.w	r3, r7, #12
 8004594:	4619      	mov	r1, r3
 8004596:	2002      	movs	r0, #2
 8004598:	f7ff ff8a 	bl	80044b0 <ms5607_getRawData>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <ms5607_readCalibration+0x3e>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e013      	b.n	80045ce <ms5607_readCalibration+0x66>
		cal[i] = raw_data[0]<<8 | raw_data[1];
 80045a6:	7b3b      	ldrb	r3, [r7, #12]
 80045a8:	021b      	lsls	r3, r3, #8
 80045aa:	b21a      	sxth	r2, r3
 80045ac:	7b7b      	ldrb	r3, [r7, #13]
 80045ae:	b21b      	sxth	r3, r3
 80045b0:	4313      	orrs	r3, r2
 80045b2:	b219      	sxth	r1, r3
 80045b4:	7bfb      	ldrb	r3, [r7, #15]
 80045b6:	005b      	lsls	r3, r3, #1
 80045b8:	687a      	ldr	r2, [r7, #4]
 80045ba:	4413      	add	r3, r2
 80045bc:	b28a      	uxth	r2, r1
 80045be:	801a      	strh	r2, [r3, #0]
	for(uint8_t i=0; i<6; i++)
 80045c0:	7bfb      	ldrb	r3, [r7, #15]
 80045c2:	3301      	adds	r3, #1
 80045c4:	73fb      	strb	r3, [r7, #15]
 80045c6:	7bfb      	ldrb	r3, [r7, #15]
 80045c8:	2b05      	cmp	r3, #5
 80045ca:	d9d6      	bls.n	800457a <ms5607_readCalibration+0x12>
	}

	return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3710      	adds	r7, #16
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
	...

080045d8 <ms5607_getTempPressure>:
 * @param temp Pointer to temperature
 * @param pressure Pointer to pressure
 * @return HAL status
 */
HAL_StatusTypeDef ms5607_getTempPressure(uint8_t osr, uint16_t *cal, float *temp, float *pressure)
{
 80045d8:	b5b0      	push	{r4, r5, r7, lr}
 80045da:	b08e      	sub	sp, #56	; 0x38
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60b9      	str	r1, [r7, #8]
 80045e0:	607a      	str	r2, [r7, #4]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4603      	mov	r3, r0
 80045e6:	73fb      	strb	r3, [r7, #15]
	uint8_t raw_data[3] = {0};
 80045e8:	4b87      	ldr	r3, [pc, #540]	; (8004808 <ms5607_getTempPressure+0x230>)
 80045ea:	881b      	ldrh	r3, [r3, #0]
 80045ec:	823b      	strh	r3, [r7, #16]
 80045ee:	2300      	movs	r3, #0
 80045f0:	74bb      	strb	r3, [r7, #18]

	// Get raw temp
	if(ms5607_conversion(MS5607_CMD_ADC_CONV+MS5607_CMD_ADC_D2+osr) != HAL_OK)	return HAL_ERROR;
 80045f2:	7bfb      	ldrb	r3, [r7, #15]
 80045f4:	3350      	adds	r3, #80	; 0x50
 80045f6:	b2db      	uxtb	r3, r3
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7ff ff1d 	bl	8004438 <ms5607_conversion>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d001      	beq.n	8004608 <ms5607_getTempPressure+0x30>
 8004604:	2301      	movs	r3, #1
 8004606:	e0fa      	b.n	80047fe <ms5607_getTempPressure+0x226>
	HAL_Delay(10);
 8004608:	200a      	movs	r0, #10
 800460a:	f000 fe71 	bl	80052f0 <HAL_Delay>
	if(ms5607_read(3) != HAL_OK)	return HAL_ERROR;
 800460e:	2003      	movs	r0, #3
 8004610:	f7ff ff30 	bl	8004474 <ms5607_read>
 8004614:	4603      	mov	r3, r0
 8004616:	2b00      	cmp	r3, #0
 8004618:	d001      	beq.n	800461e <ms5607_getTempPressure+0x46>
 800461a:	2301      	movs	r3, #1
 800461c:	e0ef      	b.n	80047fe <ms5607_getTempPressure+0x226>
	if(ms5607_getRawData(3, raw_data) != HAL_OK)	return HAL_ERROR;
 800461e:	f107 0310 	add.w	r3, r7, #16
 8004622:	4619      	mov	r1, r3
 8004624:	2003      	movs	r0, #3
 8004626:	f7ff ff43 	bl	80044b0 <ms5607_getRawData>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <ms5607_getTempPressure+0x5c>
 8004630:	2301      	movs	r3, #1
 8004632:	e0e4      	b.n	80047fe <ms5607_getTempPressure+0x226>
	uint32_t DT = (raw_data[0]<<16) | (raw_data[1]<<8) | raw_data[2];
 8004634:	7c3b      	ldrb	r3, [r7, #16]
 8004636:	041a      	lsls	r2, r3, #16
 8004638:	7c7b      	ldrb	r3, [r7, #17]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	4313      	orrs	r3, r2
 800463e:	7cba      	ldrb	r2, [r7, #18]
 8004640:	4313      	orrs	r3, r2
 8004642:	637b      	str	r3, [r7, #52]	; 0x34

	// Get raw pressure
	if(ms5607_conversion(MS5607_CMD_ADC_CONV+MS5607_CMD_ADC_D1+osr) != HAL_OK)	return HAL_ERROR;
 8004644:	7bfb      	ldrb	r3, [r7, #15]
 8004646:	3340      	adds	r3, #64	; 0x40
 8004648:	b2db      	uxtb	r3, r3
 800464a:	4618      	mov	r0, r3
 800464c:	f7ff fef4 	bl	8004438 <ms5607_conversion>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <ms5607_getTempPressure+0x82>
 8004656:	2301      	movs	r3, #1
 8004658:	e0d1      	b.n	80047fe <ms5607_getTempPressure+0x226>
	HAL_Delay(10);
 800465a:	200a      	movs	r0, #10
 800465c:	f000 fe48 	bl	80052f0 <HAL_Delay>
	if(ms5607_read(3) != HAL_OK)				return HAL_ERROR;
 8004660:	2003      	movs	r0, #3
 8004662:	f7ff ff07 	bl	8004474 <ms5607_read>
 8004666:	4603      	mov	r3, r0
 8004668:	2b00      	cmp	r3, #0
 800466a:	d001      	beq.n	8004670 <ms5607_getTempPressure+0x98>
 800466c:	2301      	movs	r3, #1
 800466e:	e0c6      	b.n	80047fe <ms5607_getTempPressure+0x226>
	if(ms5607_getRawData(3, raw_data) != HAL_OK)return HAL_ERROR;
 8004670:	f107 0310 	add.w	r3, r7, #16
 8004674:	4619      	mov	r1, r3
 8004676:	2003      	movs	r0, #3
 8004678:	f7ff ff1a 	bl	80044b0 <ms5607_getRawData>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <ms5607_getTempPressure+0xae>
 8004682:	2301      	movs	r3, #1
 8004684:	e0bb      	b.n	80047fe <ms5607_getTempPressure+0x226>
	uint32_t DP = (raw_data[0]<<16) | (raw_data[1]<<8) | raw_data[2];
 8004686:	7c3b      	ldrb	r3, [r7, #16]
 8004688:	041a      	lsls	r2, r3, #16
 800468a:	7c7b      	ldrb	r3, [r7, #17]
 800468c:	021b      	lsls	r3, r3, #8
 800468e:	4313      	orrs	r3, r2
 8004690:	7cba      	ldrb	r2, [r7, #18]
 8004692:	4313      	orrs	r3, r2
 8004694:	633b      	str	r3, [r7, #48]	; 0x30


    float dT = (float)DT - ((float)cal[4])*((int)1<<8);
 8004696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004698:	ee07 3a90 	vmov	s15, r3
 800469c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	3308      	adds	r3, #8
 80046a4:	881b      	ldrh	r3, [r3, #0]
 80046a6:	ee07 3a90 	vmov	s15, r3
 80046aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ae:	eddf 6a57 	vldr	s13, [pc, #348]	; 800480c <ms5607_getTempPressure+0x234>
 80046b2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80046b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046ba:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    *temp = (2000.0 + dT * ((float)cal[5])/(float)((long)1<<23))/100 ;
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	330a      	adds	r3, #10
 80046c2:	881b      	ldrh	r3, [r3, #0]
 80046c4:	ee07 3a90 	vmov	s15, r3
 80046c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80046cc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80046d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046d4:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004810 <ms5607_getTempPressure+0x238>
 80046d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80046dc:	ee16 0a90 	vmov	r0, s13
 80046e0:	f7fb ff2a 	bl	8000538 <__aeabi_f2d>
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	4b4a      	ldr	r3, [pc, #296]	; (8004814 <ms5607_getTempPressure+0x23c>)
 80046ea:	f7fb fdc7 	bl	800027c <__adddf3>
 80046ee:	4602      	mov	r2, r0
 80046f0:	460b      	mov	r3, r1
 80046f2:	4610      	mov	r0, r2
 80046f4:	4619      	mov	r1, r3
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	4b47      	ldr	r3, [pc, #284]	; (8004818 <ms5607_getTempPressure+0x240>)
 80046fc:	f7fc f89e 	bl	800083c <__aeabi_ddiv>
 8004700:	4602      	mov	r2, r0
 8004702:	460b      	mov	r3, r1
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	f7fc fa3e 	bl	8000b88 <__aeabi_d2f>
 800470c:	4602      	mov	r2, r0
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	601a      	str	r2, [r3, #0]

    float OFF = (((int64_t)cal[1])*((long)1<<17)) + dT * ((float)cal[3])/((int)1<<6);
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	3302      	adds	r3, #2
 8004716:	881b      	ldrh	r3, [r3, #0]
 8004718:	b29b      	uxth	r3, r3
 800471a:	2200      	movs	r2, #0
 800471c:	461c      	mov	r4, r3
 800471e:	4615      	mov	r5, r2
 8004720:	f04f 0200 	mov.w	r2, #0
 8004724:	f04f 0300 	mov.w	r3, #0
 8004728:	046b      	lsls	r3, r5, #17
 800472a:	ea43 33d4 	orr.w	r3, r3, r4, lsr #15
 800472e:	0462      	lsls	r2, r4, #17
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	f7fc fb48 	bl	8000dc8 <__aeabi_l2f>
 8004738:	ee06 0a10 	vmov	s12, r0
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	3306      	adds	r3, #6
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800474a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800474e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004752:	eddf 6a32 	vldr	s13, [pc, #200]	; 800481c <ms5607_getTempPressure+0x244>
 8004756:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800475a:	ee76 7a27 	vadd.f32	s15, s12, s15
 800475e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    float SENS = ((float)cal[0])*((long)1<<16) + dT * ((float)cal[2])/((int)1<<7);
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	881b      	ldrh	r3, [r3, #0]
 8004766:	ee07 3a90 	vmov	s15, r3
 800476a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800476e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004820 <ms5607_getTempPressure+0x248>
 8004772:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3304      	adds	r3, #4
 800477a:	881b      	ldrh	r3, [r3, #0]
 800477c:	ee07 3a90 	vmov	s15, r3
 8004780:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004784:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8004788:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800478c:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8004824 <ms5607_getTempPressure+0x24c>
 8004790:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8004794:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004798:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float pa = (float)((float)DP/((long)1<<15));
 800479c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047a6:	eddf 6a20 	vldr	s13, [pc, #128]	; 8004828 <ms5607_getTempPressure+0x250>
 80047aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047ae:	edc7 7a08 	vstr	s15, [r7, #32]
    float pb = (float)(SENS/((float)((long)1<<21)));
 80047b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80047b6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 800482c <ms5607_getTempPressure+0x254>
 80047ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047be:	edc7 7a07 	vstr	s15, [r7, #28]
    float pc = pa*pb;
 80047c2:	ed97 7a08 	vldr	s14, [r7, #32]
 80047c6:	edd7 7a07 	vldr	s15, [r7, #28]
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a06 	vstr	s15, [r7, #24]
    float pd = (float)(OFF/((float)((long)1<<15)));
 80047d2:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80047d6:	eddf 6a14 	vldr	s13, [pc, #80]	; 8004828 <ms5607_getTempPressure+0x250>
 80047da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047de:	edc7 7a05 	vstr	s15, [r7, #20]
    *pressure = (pc - pd)/100;
 80047e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80047e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80047ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047ee:	eddf 6a10 	vldr	s13, [pc, #64]	; 8004830 <ms5607_getTempPressure+0x258>
 80047f2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	edc3 7a00 	vstr	s15, [r3]


    return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3738      	adds	r7, #56	; 0x38
 8004802:	46bd      	mov	sp, r7
 8004804:	bdb0      	pop	{r4, r5, r7, pc}
 8004806:	bf00      	nop
 8004808:	0800fea4 	.word	0x0800fea4
 800480c:	43800000 	.word	0x43800000
 8004810:	4b000000 	.word	0x4b000000
 8004814:	409f4000 	.word	0x409f4000
 8004818:	40590000 	.word	0x40590000
 800481c:	42800000 	.word	0x42800000
 8004820:	47800000 	.word	0x47800000
 8004824:	43000000 	.word	0x43000000
 8004828:	47000000 	.word	0x47000000
 800482c:	4a000000 	.word	0x4a000000
 8004830:	42c80000 	.word	0x42c80000
 8004834:	00000000 	.word	0x00000000

08004838 <ms5607_getAltitude>:
 * Convert pressure to altitude
 * @param pressure Pressure to conversion to altitude
 * @return Altitude conversion
 */
float ms5607_getAltitude(float pressure)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	ed87 0a01 	vstr	s0, [r7, #4]
	// Intersema Application Note 501
	if(pressure > 265)
 8004842:	edd7 7a01 	vldr	s15, [r7, #4]
 8004846:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004940 <ms5607_getAltitude+0x108>
 800484a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800484e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004852:	dd29      	ble.n	80048a8 <ms5607_getAltitude+0x70>
		return ( 44397.53466872111 - 44388.28967642527*pow(pressure*0.00098726429, 0.1902587519) );
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7fb fe6f 	bl	8000538 <__aeabi_f2d>
 800485a:	a32b      	add	r3, pc, #172	; (adr r3, 8004908 <ms5607_getAltitude+0xd0>)
 800485c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004860:	f7fb fec2 	bl	80005e8 <__aeabi_dmul>
 8004864:	4602      	mov	r2, r0
 8004866:	460b      	mov	r3, r1
 8004868:	ec43 2b17 	vmov	d7, r2, r3
 800486c:	ed9f 1b28 	vldr	d1, [pc, #160]	; 8004910 <ms5607_getAltitude+0xd8>
 8004870:	eeb0 0a47 	vmov.f32	s0, s14
 8004874:	eef0 0a67 	vmov.f32	s1, s15
 8004878:	f009 fe18 	bl	800e4ac <pow>
 800487c:	ec51 0b10 	vmov	r0, r1, d0
 8004880:	a325      	add	r3, pc, #148	; (adr r3, 8004918 <ms5607_getAltitude+0xe0>)
 8004882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004886:	f7fb feaf 	bl	80005e8 <__aeabi_dmul>
 800488a:	4602      	mov	r2, r0
 800488c:	460b      	mov	r3, r1
 800488e:	a124      	add	r1, pc, #144	; (adr r1, 8004920 <ms5607_getAltitude+0xe8>)
 8004890:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004894:	f7fb fcf0 	bl	8000278 <__aeabi_dsub>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4610      	mov	r0, r2
 800489e:	4619      	mov	r1, r3
 80048a0:	f7fc f972 	bl	8000b88 <__aeabi_d2f>
 80048a4:	4603      	mov	r3, r0
 80048a6:	e028      	b.n	80048fa <ms5607_getAltitude+0xc2>
	else
		return ( (1.73 - log(pressure*0.00442086649)) * 6369.426751592357);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f7fb fe45 	bl	8000538 <__aeabi_f2d>
 80048ae:	a31e      	add	r3, pc, #120	; (adr r3, 8004928 <ms5607_getAltitude+0xf0>)
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	f7fb fe98 	bl	80005e8 <__aeabi_dmul>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	ec43 2b17 	vmov	d7, r2, r3
 80048c0:	eeb0 0a47 	vmov.f32	s0, s14
 80048c4:	eef0 0a67 	vmov.f32	s1, s15
 80048c8:	f009 fdb2 	bl	800e430 <log>
 80048cc:	ec53 2b10 	vmov	r2, r3, d0
 80048d0:	a117      	add	r1, pc, #92	; (adr r1, 8004930 <ms5607_getAltitude+0xf8>)
 80048d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048d6:	f7fb fccf 	bl	8000278 <__aeabi_dsub>
 80048da:	4602      	mov	r2, r0
 80048dc:	460b      	mov	r3, r1
 80048de:	4610      	mov	r0, r2
 80048e0:	4619      	mov	r1, r3
 80048e2:	a315      	add	r3, pc, #84	; (adr r3, 8004938 <ms5607_getAltitude+0x100>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fe7e 	bl	80005e8 <__aeabi_dmul>
 80048ec:	4602      	mov	r2, r0
 80048ee:	460b      	mov	r3, r1
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	f7fc f948 	bl	8000b88 <__aeabi_d2f>
 80048f8:	4603      	mov	r3, r0
}
 80048fa:	ee07 3a90 	vmov	s15, r3
 80048fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	f5a2c0ca 	.word	0xf5a2c0ca
 800490c:	3f502ce2 	.word	0x3f502ce2
 8004910:	1698197d 	.word	0x1698197d
 8004914:	3fc85a66 	.word	0x3fc85a66
 8004918:	45077e9f 	.word	0x45077e9f
 800491c:	40e5ac89 	.word	0x40e5ac89
 8004920:	1c0193ec 	.word	0x1c0193ec
 8004924:	40e5adb1 	.word	0x40e5adb1
 8004928:	4fe99ab6 	.word	0x4fe99ab6
 800492c:	3f721b9d 	.word	0x3f721b9d
 8004930:	7ae147ae 	.word	0x7ae147ae
 8004934:	3ffbae14 	.word	0x3ffbae14
 8004938:	3f97a4b0 	.word	0x3f97a4b0
 800493c:	40b8e16d 	.word	0x40b8e16d
 8004940:	43848000 	.word	0x43848000

08004944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800494a:	4b0f      	ldr	r3, [pc, #60]	; (8004988 <HAL_MspInit+0x44>)
 800494c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800494e:	4a0e      	ldr	r2, [pc, #56]	; (8004988 <HAL_MspInit+0x44>)
 8004950:	f043 0301 	orr.w	r3, r3, #1
 8004954:	6613      	str	r3, [r2, #96]	; 0x60
 8004956:	4b0c      	ldr	r3, [pc, #48]	; (8004988 <HAL_MspInit+0x44>)
 8004958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004962:	4b09      	ldr	r3, [pc, #36]	; (8004988 <HAL_MspInit+0x44>)
 8004964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004966:	4a08      	ldr	r2, [pc, #32]	; (8004988 <HAL_MspInit+0x44>)
 8004968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800496c:	6593      	str	r3, [r2, #88]	; 0x58
 800496e:	4b06      	ldr	r3, [pc, #24]	; (8004988 <HAL_MspInit+0x44>)
 8004970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004976:	603b      	str	r3, [r7, #0]
 8004978:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800497a:	bf00      	nop
 800497c:	370c      	adds	r7, #12
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	40021000 	.word	0x40021000

0800498c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a0a      	ldr	r2, [pc, #40]	; (80049c4 <HAL_CRC_MspInit+0x38>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d10b      	bne.n	80049b6 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800499e:	4b0a      	ldr	r3, [pc, #40]	; (80049c8 <HAL_CRC_MspInit+0x3c>)
 80049a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049a2:	4a09      	ldr	r2, [pc, #36]	; (80049c8 <HAL_CRC_MspInit+0x3c>)
 80049a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049a8:	6493      	str	r3, [r2, #72]	; 0x48
 80049aa:	4b07      	ldr	r3, [pc, #28]	; (80049c8 <HAL_CRC_MspInit+0x3c>)
 80049ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80049b6:	bf00      	nop
 80049b8:	3714      	adds	r7, #20
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	40023000 	.word	0x40023000
 80049c8:	40021000 	.word	0x40021000

080049cc <HAL_CRC_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspDeInit(CRC_HandleTypeDef* hcrc)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a07      	ldr	r2, [pc, #28]	; (80049f8 <HAL_CRC_MspDeInit+0x2c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d105      	bne.n	80049ea <HAL_CRC_MspDeInit+0x1e>
  {
  /* USER CODE BEGIN CRC_MspDeInit 0 */

  /* USER CODE END CRC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_CRC_CLK_DISABLE();
 80049de:	4b07      	ldr	r3, [pc, #28]	; (80049fc <HAL_CRC_MspDeInit+0x30>)
 80049e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e2:	4a06      	ldr	r2, [pc, #24]	; (80049fc <HAL_CRC_MspDeInit+0x30>)
 80049e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049e8:	6493      	str	r3, [r2, #72]	; 0x48
  /* USER CODE BEGIN CRC_MspDeInit 1 */

  /* USER CODE END CRC_MspDeInit 1 */
  }

}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	40023000 	.word	0x40023000
 80049fc:	40021000 	.word	0x40021000

08004a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b0a0      	sub	sp, #128	; 0x80
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a08:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	601a      	str	r2, [r3, #0]
 8004a10:	605a      	str	r2, [r3, #4]
 8004a12:	609a      	str	r2, [r3, #8]
 8004a14:	60da      	str	r2, [r3, #12]
 8004a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	225c      	movs	r2, #92	; 0x5c
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4618      	mov	r0, r3
 8004a22:	f007 fbc6 	bl	800c1b2 <memset>
  if(hi2c->Instance==I2C1)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a1f      	ldr	r2, [pc, #124]	; (8004aa8 <HAL_I2C_MspInit+0xa8>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d137      	bne.n	8004aa0 <HAL_I2C_MspInit+0xa0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004a30:	2340      	movs	r3, #64	; 0x40
 8004a32:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004a34:	2300      	movs	r3, #0
 8004a36:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a38:	f107 0310 	add.w	r3, r7, #16
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	f003 fc23 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004a48:	f7ff fcdc 	bl	8004404 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a4c:	4b17      	ldr	r3, [pc, #92]	; (8004aac <HAL_I2C_MspInit+0xac>)
 8004a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a50:	4a16      	ldr	r2, [pc, #88]	; (8004aac <HAL_I2C_MspInit+0xac>)
 8004a52:	f043 0301 	orr.w	r3, r3, #1
 8004a56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a58:	4b14      	ldr	r3, [pc, #80]	; (8004aac <HAL_I2C_MspInit+0xac>)
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a5c:	f003 0301 	and.w	r3, r3, #1
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA9     ------> I2C1_SCL
    PA10     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004a64:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8004a68:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004a6a:	2312      	movs	r3, #18
 8004a6c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6e:	2300      	movs	r3, #0
 8004a70:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a72:	2303      	movs	r3, #3
 8004a74:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004a76:	2304      	movs	r3, #4
 8004a78:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004a84:	f001 fa2e 	bl	8005ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004a88:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_I2C_MspInit+0xac>)
 8004a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a8c:	4a07      	ldr	r2, [pc, #28]	; (8004aac <HAL_I2C_MspInit+0xac>)
 8004a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a92:	6593      	str	r3, [r2, #88]	; 0x58
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_I2C_MspInit+0xac>)
 8004a96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9c:	60bb      	str	r3, [r7, #8]
 8004a9e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004aa0:	bf00      	nop
 8004aa2:	3780      	adds	r7, #128	; 0x80
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}
 8004aa8:	40005400 	.word	0x40005400
 8004aac:	40021000 	.word	0x40021000

08004ab0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0a4      	sub	sp, #144	; 0x90
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ac8:	f107 0320 	add.w	r3, r7, #32
 8004acc:	225c      	movs	r2, #92	; 0x5c
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f007 fb6e 	bl	800c1b2 <memset>
  if(huart->Instance==LPUART1)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a71      	ldr	r2, [pc, #452]	; (8004ca0 <HAL_UART_MspInit+0x1f0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d16d      	bne.n	8004bbc <HAL_UART_MspInit+0x10c>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8004ae0:	2320      	movs	r3, #32
 8004ae2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ae8:	f107 0320 	add.w	r3, r7, #32
 8004aec:	4618      	mov	r0, r3
 8004aee:	f003 fbcb 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004af8:	f7ff fc84 	bl	8004404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8004afc:	4b69      	ldr	r3, [pc, #420]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b00:	4a68      	ldr	r2, [pc, #416]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004b02:	f043 0301 	orr.w	r3, r3, #1
 8004b06:	65d3      	str	r3, [r2, #92]	; 0x5c
 8004b08:	4b66      	ldr	r3, [pc, #408]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b0c:	f003 0301 	and.w	r3, r3, #1
 8004b10:	61fb      	str	r3, [r7, #28]
 8004b12:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004b14:	4b63      	ldr	r3, [pc, #396]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004b16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b18:	4a62      	ldr	r2, [pc, #392]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004b1a:	f043 0302 	orr.w	r3, r3, #2
 8004b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b20:	4b60      	ldr	r3, [pc, #384]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004b2c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004b30:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8004b44:	2308      	movs	r3, #8
 8004b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004b4a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	4855      	ldr	r0, [pc, #340]	; (8004ca8 <HAL_UART_MspInit+0x1f8>)
 8004b52:	f001 f9c7 	bl	8005ee4 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART_TX Init */
    hdma_lpuart_tx.Instance = DMA2_Channel6;
 8004b56:	4b55      	ldr	r3, [pc, #340]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b58:	4a55      	ldr	r2, [pc, #340]	; (8004cb0 <HAL_UART_MspInit+0x200>)
 8004b5a:	601a      	str	r2, [r3, #0]
    hdma_lpuart_tx.Init.Request = DMA_REQUEST_4;
 8004b5c:	4b53      	ldr	r3, [pc, #332]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b5e:	2204      	movs	r2, #4
 8004b60:	605a      	str	r2, [r3, #4]
    hdma_lpuart_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b62:	4b52      	ldr	r3, [pc, #328]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b64:	2210      	movs	r2, #16
 8004b66:	609a      	str	r2, [r3, #8]
    hdma_lpuart_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b68:	4b50      	ldr	r3, [pc, #320]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	60da      	str	r2, [r3, #12]
    hdma_lpuart_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004b6e:	4b4f      	ldr	r3, [pc, #316]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b70:	2280      	movs	r2, #128	; 0x80
 8004b72:	611a      	str	r2, [r3, #16]
    hdma_lpuart_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004b74:	4b4d      	ldr	r3, [pc, #308]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	615a      	str	r2, [r3, #20]
    hdma_lpuart_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004b7a:	4b4c      	ldr	r3, [pc, #304]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	619a      	str	r2, [r3, #24]
    hdma_lpuart_tx.Init.Mode = DMA_NORMAL;
 8004b80:	4b4a      	ldr	r3, [pc, #296]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	61da      	str	r2, [r3, #28]
    hdma_lpuart_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004b86:	4b49      	ldr	r3, [pc, #292]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart_tx) != HAL_OK)
 8004b8e:	4847      	ldr	r0, [pc, #284]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004b90:	f000 ff32 	bl	80059f8 <HAL_DMA_Init>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d001      	beq.n	8004b9e <HAL_UART_MspInit+0xee>
    {
      Error_Handler();
 8004b9a:	f7ff fc33 	bl	8004404 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_lpuart_tx);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	4a42      	ldr	r2, [pc, #264]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004ba2:	66da      	str	r2, [r3, #108]	; 0x6c
 8004ba4:	4a41      	ldr	r2, [pc, #260]	; (8004cac <HAL_UART_MspInit+0x1fc>)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 2, 0);
 8004baa:	2200      	movs	r2, #0
 8004bac:	2102      	movs	r1, #2
 8004bae:	2046      	movs	r0, #70	; 0x46
 8004bb0:	f000 fcbd 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8004bb4:	2046      	movs	r0, #70	; 0x46
 8004bb6:	f000 fcd6 	bl	8005566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004bba:	e0f3      	b.n	8004da4 <HAL_UART_MspInit+0x2f4>
  else if(huart->Instance==USART1)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a3c      	ldr	r2, [pc, #240]	; (8004cb4 <HAL_UART_MspInit+0x204>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d17c      	bne.n	8004cc0 <HAL_UART_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004bce:	f107 0320 	add.w	r3, r7, #32
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f003 fb58 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d001      	beq.n	8004be2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 8004bde:	f7ff fc11 	bl	8004404 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004be2:	4b30      	ldr	r3, [pc, #192]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be6:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004bec:	6613      	str	r3, [r2, #96]	; 0x60
 8004bee:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004bf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bf6:	617b      	str	r3, [r7, #20]
 8004bf8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004bfa:	4b2a      	ldr	r3, [pc, #168]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfe:	4a29      	ldr	r2, [pc, #164]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004c00:	f043 0302 	orr.w	r3, r3, #2
 8004c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c06:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <HAL_UART_MspInit+0x1f4>)
 8004c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c0a:	f003 0302 	and.w	r3, r3, #2
 8004c0e:	613b      	str	r3, [r7, #16]
 8004c10:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004c12:	23c0      	movs	r3, #192	; 0xc0
 8004c14:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c16:	2302      	movs	r3, #2
 8004c18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c22:	2303      	movs	r3, #3
 8004c24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c28:	2307      	movs	r3, #7
 8004c2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c2e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004c32:	4619      	mov	r1, r3
 8004c34:	481c      	ldr	r0, [pc, #112]	; (8004ca8 <HAL_UART_MspInit+0x1f8>)
 8004c36:	f001 f955 	bl	8005ee4 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c3c:	4a1f      	ldr	r2, [pc, #124]	; (8004cbc <HAL_UART_MspInit+0x20c>)
 8004c3e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8004c40:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c42:	2202      	movs	r2, #2
 8004c44:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004c46:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c48:	2210      	movs	r2, #16
 8004c4a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004c4c:	4b1a      	ldr	r3, [pc, #104]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c4e:	2200      	movs	r2, #0
 8004c50:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004c52:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c54:	2280      	movs	r2, #128	; 0x80
 8004c56:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004c58:	4b17      	ldr	r3, [pc, #92]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004c5e:	4b16      	ldr	r3, [pc, #88]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004c64:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8004c6a:	4b13      	ldr	r3, [pc, #76]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8004c72:	4811      	ldr	r0, [pc, #68]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c74:	f000 fec0 	bl	80059f8 <HAL_DMA_Init>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <HAL_UART_MspInit+0x1d2>
      Error_Handler();
 8004c7e:	f7ff fbc1 	bl	8004404 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a0c      	ldr	r2, [pc, #48]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c86:	66da      	str	r2, [r3, #108]	; 0x6c
 8004c88:	4a0b      	ldr	r2, [pc, #44]	; (8004cb8 <HAL_UART_MspInit+0x208>)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 4, 0);
 8004c8e:	2200      	movs	r2, #0
 8004c90:	2104      	movs	r1, #4
 8004c92:	2025      	movs	r0, #37	; 0x25
 8004c94:	f000 fc4b 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c98:	2025      	movs	r0, #37	; 0x25
 8004c9a:	f000 fc64 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8004c9e:	e081      	b.n	8004da4 <HAL_UART_MspInit+0x2f4>
 8004ca0:	40008000 	.word	0x40008000
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	48000400 	.word	0x48000400
 8004cac:	20000a68 	.word	0x20000a68
 8004cb0:	4002046c 	.word	0x4002046c
 8004cb4:	40013800 	.word	0x40013800
 8004cb8:	20000ab0 	.word	0x20000ab0
 8004cbc:	40020044 	.word	0x40020044
  else if(huart->Instance==USART3)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	4a39      	ldr	r2, [pc, #228]	; (8004dac <HAL_UART_MspInit+0x2fc>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d16c      	bne.n	8004da4 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004cca:	2304      	movs	r3, #4
 8004ccc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004cd2:	f107 0320 	add.w	r3, r7, #32
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f003 fad6 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d001      	beq.n	8004ce6 <HAL_UART_MspInit+0x236>
      Error_Handler();
 8004ce2:	f7ff fb8f 	bl	8004404 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004ce6:	4b32      	ldr	r3, [pc, #200]	; (8004db0 <HAL_UART_MspInit+0x300>)
 8004ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cea:	4a31      	ldr	r2, [pc, #196]	; (8004db0 <HAL_UART_MspInit+0x300>)
 8004cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cf0:	6593      	str	r3, [r2, #88]	; 0x58
 8004cf2:	4b2f      	ldr	r3, [pc, #188]	; (8004db0 <HAL_UART_MspInit+0x300>)
 8004cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cfe:	4b2c      	ldr	r3, [pc, #176]	; (8004db0 <HAL_UART_MspInit+0x300>)
 8004d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d02:	4a2b      	ldr	r2, [pc, #172]	; (8004db0 <HAL_UART_MspInit+0x300>)
 8004d04:	f043 0304 	orr.w	r3, r3, #4
 8004d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004d0a:	4b29      	ldr	r3, [pc, #164]	; (8004db0 <HAL_UART_MspInit+0x300>)
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d0e:	f003 0304 	and.w	r3, r3, #4
 8004d12:	60bb      	str	r3, [r7, #8]
 8004d14:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004d16:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004d1a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	2300      	movs	r3, #0
 8004d24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004d2e:	2307      	movs	r3, #7
 8004d30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004d34:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8004d38:	4619      	mov	r1, r3
 8004d3a:	481e      	ldr	r0, [pc, #120]	; (8004db4 <HAL_UART_MspInit+0x304>)
 8004d3c:	f001 f8d2 	bl	8005ee4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 8004d40:	4b1d      	ldr	r3, [pc, #116]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d42:	4a1e      	ldr	r2, [pc, #120]	; (8004dbc <HAL_UART_MspInit+0x30c>)
 8004d44:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_2;
 8004d46:	4b1c      	ldr	r3, [pc, #112]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d48:	2202      	movs	r2, #2
 8004d4a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d4c:	4b1a      	ldr	r3, [pc, #104]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d52:	4b19      	ldr	r3, [pc, #100]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d58:	4b17      	ldr	r3, [pc, #92]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d5a:	2280      	movs	r2, #128	; 0x80
 8004d5c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d5e:	4b16      	ldr	r3, [pc, #88]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d64:	4b14      	ldr	r3, [pc, #80]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8004d6a:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004d70:	4b11      	ldr	r3, [pc, #68]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d72:	f44f 5240 	mov.w	r2, #12288	; 0x3000
 8004d76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004d78:	480f      	ldr	r0, [pc, #60]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d7a:	f000 fe3d 	bl	80059f8 <HAL_DMA_Init>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d001      	beq.n	8004d88 <HAL_UART_MspInit+0x2d8>
      Error_Handler();
 8004d84:	f7ff fb3e 	bl	8004404 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	4a0b      	ldr	r2, [pc, #44]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d8c:	671a      	str	r2, [r3, #112]	; 0x70
 8004d8e:	4a0a      	ldr	r2, [pc, #40]	; (8004db8 <HAL_UART_MspInit+0x308>)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004d94:	2200      	movs	r2, #0
 8004d96:	2105      	movs	r1, #5
 8004d98:	2027      	movs	r0, #39	; 0x27
 8004d9a:	f000 fbc8 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004d9e:	2027      	movs	r0, #39	; 0x27
 8004da0:	f000 fbe1 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8004da4:	bf00      	nop
 8004da6:	3790      	adds	r7, #144	; 0x90
 8004da8:	46bd      	mov	sp, r7
 8004daa:	bd80      	pop	{r7, pc}
 8004dac:	40004800 	.word	0x40004800
 8004db0:	40021000 	.word	0x40021000
 8004db4:	48000800 	.word	0x48000800
 8004db8:	20000af8 	.word	0x20000af8
 8004dbc:	40020030 	.word	0x40020030

08004dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b09a      	sub	sp, #104	; 0x68
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004dc8:	f107 030c 	add.w	r3, r7, #12
 8004dcc:	225c      	movs	r2, #92	; 0x5c
 8004dce:	2100      	movs	r1, #0
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f007 f9ee 	bl	800c1b2 <memset>
  if(hrtc->Instance==RTC)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a0f      	ldr	r2, [pc, #60]	; (8004e18 <HAL_RTC_MspInit+0x58>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d117      	bne.n	8004e10 <HAL_RTC_MspInit+0x50>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004de0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004de4:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004de6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004dea:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dec:	f107 030c 	add.w	r3, r7, #12
 8004df0:	4618      	mov	r0, r3
 8004df2:	f003 fa49 	bl	8008288 <HAL_RCCEx_PeriphCLKConfig>
 8004df6:	4603      	mov	r3, r0
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d001      	beq.n	8004e00 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8004dfc:	f7ff fb02 	bl	8004404 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004e00:	4b06      	ldr	r3, [pc, #24]	; (8004e1c <HAL_RTC_MspInit+0x5c>)
 8004e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e06:	4a05      	ldr	r2, [pc, #20]	; (8004e1c <HAL_RTC_MspInit+0x5c>)
 8004e08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8004e10:	bf00      	nop
 8004e12:	3768      	adds	r7, #104	; 0x68
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	40002800 	.word	0x40002800
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b086      	sub	sp, #24
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	4a23      	ldr	r2, [pc, #140]	; (8004ebc <HAL_TIM_Base_MspInit+0x9c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d10c      	bne.n	8004e4c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e32:	4b23      	ldr	r3, [pc, #140]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e36:	4a22      	ldr	r2, [pc, #136]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e38:	f043 0310 	orr.w	r3, r3, #16
 8004e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004e3e:	4b20      	ldr	r3, [pc, #128]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8004e4a:	e032      	b.n	8004eb2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM7)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a1c      	ldr	r2, [pc, #112]	; (8004ec4 <HAL_TIM_Base_MspInit+0xa4>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d114      	bne.n	8004e80 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004e56:	4b1a      	ldr	r3, [pc, #104]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5a:	4a19      	ldr	r2, [pc, #100]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e5c:	f043 0320 	orr.w	r3, r3, #32
 8004e60:	6593      	str	r3, [r2, #88]	; 0x58
 8004e62:	4b17      	ldr	r3, [pc, #92]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e66:	f003 0320 	and.w	r3, r3, #32
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8004e6e:	2200      	movs	r2, #0
 8004e70:	2103      	movs	r1, #3
 8004e72:	2037      	movs	r0, #55	; 0x37
 8004e74:	f000 fb5b 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004e78:	2037      	movs	r0, #55	; 0x37
 8004e7a:	f000 fb74 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8004e7e:	e018      	b.n	8004eb2 <HAL_TIM_Base_MspInit+0x92>
  else if(htim_base->Instance==TIM16)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a10      	ldr	r2, [pc, #64]	; (8004ec8 <HAL_TIM_Base_MspInit+0xa8>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d113      	bne.n	8004eb2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8004e8a:	4b0d      	ldr	r3, [pc, #52]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e8e:	4a0c      	ldr	r2, [pc, #48]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004e94:	6613      	str	r3, [r2, #96]	; 0x60
 8004e96:	4b0a      	ldr	r3, [pc, #40]	; (8004ec0 <HAL_TIM_Base_MspInit+0xa0>)
 8004e98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	2100      	movs	r1, #0
 8004ea6:	2019      	movs	r0, #25
 8004ea8:	f000 fb41 	bl	800552e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8004eac:	2019      	movs	r0, #25
 8004eae:	f000 fb5a 	bl	8005566 <HAL_NVIC_EnableIRQ>
}
 8004eb2:	bf00      	nop
 8004eb4:	3718      	adds	r7, #24
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	40001000 	.word	0x40001000
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40001400 	.word	0x40001400
 8004ec8:	40014400 	.word	0x40014400

08004ecc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ed0:	e7fe      	b.n	8004ed0 <NMI_Handler+0x4>

08004ed2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ed2:	b480      	push	{r7}
 8004ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ed6:	e7fe      	b.n	8004ed6 <HardFault_Handler+0x4>

08004ed8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ed8:	b480      	push	{r7}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004edc:	e7fe      	b.n	8004edc <MemManage_Handler+0x4>

08004ede <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ee2:	e7fe      	b.n	8004ee2 <BusFault_Handler+0x4>

08004ee4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ee8:	e7fe      	b.n	8004ee8 <UsageFault_Handler+0x4>

08004eea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004eea:	b480      	push	{r7}
 8004eec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr

08004f06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004f06:	b480      	push	{r7}
 8004f08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004f0a:	bf00      	nop
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f12:	4770      	bx	lr

08004f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004f18:	f000 f9ca 	bl	80052b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004f1c:	bf00      	nop
 8004f1e:	bd80      	pop	{r7, pc}

08004f20 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MKR_INT1_Pin);
 8004f24:	2001      	movs	r0, #1
 8004f26:	f001 f9a1 	bl	800626c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004f2a:	bf00      	nop
 8004f2c:	bd80      	pop	{r7, pc}
	...

08004f30 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004f34:	4802      	ldr	r0, [pc, #8]	; (8004f40 <DMA1_Channel3_IRQHandler+0x10>)
 8004f36:	f000 fef6 	bl	8005d26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004f3a:	bf00      	nop
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	20000af8 	.word	0x20000af8

08004f44 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004f48:	4802      	ldr	r0, [pc, #8]	; (8004f54 <DMA1_Channel4_IRQHandler+0x10>)
 8004f4a:	f000 feec 	bl	8005d26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8004f4e:	bf00      	nop
 8004f50:	bd80      	pop	{r7, pc}
 8004f52:	bf00      	nop
 8004f54:	20000ab0 	.word	0x20000ab0

08004f58 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IMU_INT1_Pin);
 8004f5c:	2040      	movs	r0, #64	; 0x40
 8004f5e:	f001 f985 	bl	800626c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(MAG_INT1_Pin);
 8004f62:	2080      	movs	r0, #128	; 0x80
 8004f64:	f001 f982 	bl	800626c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPS_INT1_Pin);
 8004f68:	f44f 7080 	mov.w	r0, #256	; 0x100
 8004f6c:	f001 f97e 	bl	800626c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004f70:	bf00      	nop
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8004f78:	4802      	ldr	r0, [pc, #8]	; (8004f84 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8004f7a:	f003 fe99 	bl	8008cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004f7e:	bf00      	nop
 8004f80:	bd80      	pop	{r7, pc}
 8004f82:	bf00      	nop
 8004f84:	20000bfc 	.word	0x20000bfc

08004f88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004f8c:	4802      	ldr	r0, [pc, #8]	; (8004f98 <USART1_IRQHandler+0x10>)
 8004f8e:	f004 fadd 	bl	800954c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004f92:	bf00      	nop
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	20000960 	.word	0x20000960

08004f9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8004fa0:	4802      	ldr	r0, [pc, #8]	; (8004fac <USART3_IRQHandler+0x10>)
 8004fa2:	f004 fad3 	bl	800954c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8004fa6:	bf00      	nop
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200009e4 	.word	0x200009e4

08004fb0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EPS_INT1_Pin);
 8004fb4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004fb8:	f001 f958 	bl	800626c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(IMU_INT2_Pin);
 8004fbc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004fc0:	f001 f954 	bl	800626c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004fc4:	bf00      	nop
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004fcc:	4802      	ldr	r0, [pc, #8]	; (8004fd8 <TIM7_IRQHandler+0x10>)
 8004fce:	f003 fe6f 	bl	8008cb0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8004fd2:	bf00      	nop
 8004fd4:	bd80      	pop	{r7, pc}
 8004fd6:	bf00      	nop
 8004fd8:	20000bb0 	.word	0x20000bb0

08004fdc <DMA2_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA2 channel6 global interrupt.
  */
void DMA2_Channel6_IRQHandler(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel6_IRQn 0 */

  /* USER CODE END DMA2_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart_tx);
 8004fe0:	4802      	ldr	r0, [pc, #8]	; (8004fec <DMA2_Channel6_IRQHandler+0x10>)
 8004fe2:	f000 fea0 	bl	8005d26 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel6_IRQn 1 */

  /* USER CODE END DMA2_Channel6_IRQn 1 */
}
 8004fe6:	bf00      	nop
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	20000a68 	.word	0x20000a68

08004ff0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8004ff4:	4802      	ldr	r0, [pc, #8]	; (8005000 <LPUART1_IRQHandler+0x10>)
 8004ff6:	f004 faa9 	bl	800954c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8004ffa:	bf00      	nop
 8004ffc:	bd80      	pop	{r7, pc}
 8004ffe:	bf00      	nop
 8005000:	200008dc 	.word	0x200008dc

08005004 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005004:	b480      	push	{r7}
 8005006:	af00      	add	r7, sp, #0
	return 1;
 8005008:	2301      	movs	r3, #1
}
 800500a:	4618      	mov	r0, r3
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <_kill>:

int _kill(int pid, int sig)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800501e:	f007 f929 	bl	800c274 <__errno>
 8005022:	4603      	mov	r3, r0
 8005024:	2216      	movs	r2, #22
 8005026:	601a      	str	r2, [r3, #0]
	return -1;
 8005028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <_exit>:

void _exit (int status)
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800503c:	f04f 31ff 	mov.w	r1, #4294967295
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f7ff ffe7 	bl	8005014 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005046:	e7fe      	b.n	8005046 <_exit+0x12>

08005048 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
 8005058:	e00a      	b.n	8005070 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800505a:	f3af 8000 	nop.w
 800505e:	4601      	mov	r1, r0
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	1c5a      	adds	r2, r3, #1
 8005064:	60ba      	str	r2, [r7, #8]
 8005066:	b2ca      	uxtb	r2, r1
 8005068:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	3301      	adds	r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	dbf0      	blt.n	800505a <_read+0x12>
	}

return len;
 8005078:	687b      	ldr	r3, [r7, #4]
}
 800507a:	4618      	mov	r0, r3
 800507c:	3718      	adds	r7, #24
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}

08005082 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005082:	b580      	push	{r7, lr}
 8005084:	b086      	sub	sp, #24
 8005086:	af00      	add	r7, sp, #0
 8005088:	60f8      	str	r0, [r7, #12]
 800508a:	60b9      	str	r1, [r7, #8]
 800508c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e009      	b.n	80050a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	1c5a      	adds	r2, r3, #1
 8005098:	60ba      	str	r2, [r7, #8]
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	4618      	mov	r0, r3
 800509e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80050a2:	697b      	ldr	r3, [r7, #20]
 80050a4:	3301      	adds	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	dbf1      	blt.n	8005094 <_write+0x12>
	}
	return len;
 80050b0:	687b      	ldr	r3, [r7, #4]
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3718      	adds	r7, #24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <_close>:

int _close(int file)
{
 80050ba:	b480      	push	{r7}
 80050bc:	b083      	sub	sp, #12
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
	return -1;
 80050c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b083      	sub	sp, #12
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80050e2:	605a      	str	r2, [r3, #4]
	return 0;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	370c      	adds	r7, #12
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr

080050f2 <_isatty>:

int _isatty(int file)
{
 80050f2:	b480      	push	{r7}
 80050f4:	b083      	sub	sp, #12
 80050f6:	af00      	add	r7, sp, #0
 80050f8:	6078      	str	r0, [r7, #4]
	return 1;
 80050fa:	2301      	movs	r3, #1
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005108:	b480      	push	{r7}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
	return 0;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
	...

08005124 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b086      	sub	sp, #24
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800512c:	4a14      	ldr	r2, [pc, #80]	; (8005180 <_sbrk+0x5c>)
 800512e:	4b15      	ldr	r3, [pc, #84]	; (8005184 <_sbrk+0x60>)
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005138:	4b13      	ldr	r3, [pc, #76]	; (8005188 <_sbrk+0x64>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d102      	bne.n	8005146 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <_sbrk+0x64>)
 8005142:	4a12      	ldr	r2, [pc, #72]	; (800518c <_sbrk+0x68>)
 8005144:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <_sbrk+0x64>)
 8005148:	681a      	ldr	r2, [r3, #0]
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4413      	add	r3, r2
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	429a      	cmp	r2, r3
 8005152:	d207      	bcs.n	8005164 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005154:	f007 f88e 	bl	800c274 <__errno>
 8005158:	4603      	mov	r3, r0
 800515a:	220c      	movs	r2, #12
 800515c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800515e:	f04f 33ff 	mov.w	r3, #4294967295
 8005162:	e009      	b.n	8005178 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005164:	4b08      	ldr	r3, [pc, #32]	; (8005188 <_sbrk+0x64>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800516a:	4b07      	ldr	r3, [pc, #28]	; (8005188 <_sbrk+0x64>)
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4413      	add	r3, r2
 8005172:	4a05      	ldr	r2, [pc, #20]	; (8005188 <_sbrk+0x64>)
 8005174:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005176:	68fb      	ldr	r3, [r7, #12]
}
 8005178:	4618      	mov	r0, r3
 800517a:	3718      	adds	r7, #24
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20010000 	.word	0x20010000
 8005184:	00000400 	.word	0x00000400
 8005188:	20000e64 	.word	0x20000e64
 800518c:	20000fb8 	.word	0x20000fb8

08005190 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8005190:	b480      	push	{r7}
 8005192:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005194:	4b06      	ldr	r3, [pc, #24]	; (80051b0 <SystemInit+0x20>)
 8005196:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519a:	4a05      	ldr	r2, [pc, #20]	; (80051b0 <SystemInit+0x20>)
 800519c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80051a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	e000ed00 	.word	0xe000ed00

080051b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80051b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80051ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80051b8:	f7ff ffea 	bl	8005190 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80051bc:	480c      	ldr	r0, [pc, #48]	; (80051f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80051be:	490d      	ldr	r1, [pc, #52]	; (80051f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80051c0:	4a0d      	ldr	r2, [pc, #52]	; (80051f8 <LoopForever+0xe>)
  movs r3, #0
 80051c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80051c4:	e002      	b.n	80051cc <LoopCopyDataInit>

080051c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80051c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80051c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80051ca:	3304      	adds	r3, #4

080051cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80051cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80051ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80051d0:	d3f9      	bcc.n	80051c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80051d2:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80051d4:	4c0a      	ldr	r4, [pc, #40]	; (8005200 <LoopForever+0x16>)
  movs r3, #0
 80051d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80051d8:	e001      	b.n	80051de <LoopFillZerobss>

080051da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80051da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80051dc:	3204      	adds	r2, #4

080051de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80051de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80051e0:	d3fb      	bcc.n	80051da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80051e2:	f007 f84d 	bl	800c280 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80051e6:	f7fe f93b 	bl	8003460 <main>

080051ea <LoopForever>:

LoopForever:
    b LoopForever
 80051ea:	e7fe      	b.n	80051ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80051ec:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80051f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80051f4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80051f8:	08010310 	.word	0x08010310
  ldr r2, =_sbss
 80051fc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8005200:	20000fb8 	.word	0x20000fb8

08005204 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005204:	e7fe      	b.n	8005204 <ADC1_IRQHandler>

08005206 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005206:	b580      	push	{r7, lr}
 8005208:	b082      	sub	sp, #8
 800520a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800520c:	2300      	movs	r3, #0
 800520e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005210:	2003      	movs	r0, #3
 8005212:	f000 f981 	bl	8005518 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005216:	200f      	movs	r0, #15
 8005218:	f000 f80e 	bl	8005238 <HAL_InitTick>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	71fb      	strb	r3, [r7, #7]
 8005226:	e001      	b.n	800522c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005228:	f7ff fb8c 	bl	8004944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800522c:	79fb      	ldrb	r3, [r7, #7]
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005240:	2300      	movs	r3, #0
 8005242:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8005244:	4b17      	ldr	r3, [pc, #92]	; (80052a4 <HAL_InitTick+0x6c>)
 8005246:	781b      	ldrb	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d023      	beq.n	8005294 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800524c:	4b16      	ldr	r3, [pc, #88]	; (80052a8 <HAL_InitTick+0x70>)
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	4b14      	ldr	r3, [pc, #80]	; (80052a4 <HAL_InitTick+0x6c>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800525a:	fbb3 f3f1 	udiv	r3, r3, r1
 800525e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005262:	4618      	mov	r0, r3
 8005264:	f000 f98d 	bl	8005582 <HAL_SYSTICK_Config>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d10f      	bne.n	800528e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b0f      	cmp	r3, #15
 8005272:	d809      	bhi.n	8005288 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005274:	2200      	movs	r2, #0
 8005276:	6879      	ldr	r1, [r7, #4]
 8005278:	f04f 30ff 	mov.w	r0, #4294967295
 800527c:	f000 f957 	bl	800552e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005280:	4a0a      	ldr	r2, [pc, #40]	; (80052ac <HAL_InitTick+0x74>)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	e007      	b.n	8005298 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8005288:	2301      	movs	r3, #1
 800528a:	73fb      	strb	r3, [r7, #15]
 800528c:	e004      	b.n	8005298 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	73fb      	strb	r3, [r7, #15]
 8005292:	e001      	b.n	8005298 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005294:	2301      	movs	r3, #1
 8005296:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	bf00      	nop
 80052a4:	20000014 	.word	0x20000014
 80052a8:	2000000c 	.word	0x2000000c
 80052ac:	20000010 	.word	0x20000010

080052b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80052b4:	4b06      	ldr	r3, [pc, #24]	; (80052d0 <HAL_IncTick+0x20>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	461a      	mov	r2, r3
 80052ba:	4b06      	ldr	r3, [pc, #24]	; (80052d4 <HAL_IncTick+0x24>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4413      	add	r3, r2
 80052c0:	4a04      	ldr	r2, [pc, #16]	; (80052d4 <HAL_IncTick+0x24>)
 80052c2:	6013      	str	r3, [r2, #0]
}
 80052c4:	bf00      	nop
 80052c6:	46bd      	mov	sp, r7
 80052c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052cc:	4770      	bx	lr
 80052ce:	bf00      	nop
 80052d0:	20000014 	.word	0x20000014
 80052d4:	20000e68 	.word	0x20000e68

080052d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80052d8:	b480      	push	{r7}
 80052da:	af00      	add	r7, sp, #0
  return uwTick;
 80052dc:	4b03      	ldr	r3, [pc, #12]	; (80052ec <HAL_GetTick+0x14>)
 80052de:	681b      	ldr	r3, [r3, #0]
}
 80052e0:	4618      	mov	r0, r3
 80052e2:	46bd      	mov	sp, r7
 80052e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e8:	4770      	bx	lr
 80052ea:	bf00      	nop
 80052ec:	20000e68 	.word	0x20000e68

080052f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80052f8:	f7ff ffee 	bl	80052d8 <HAL_GetTick>
 80052fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005308:	d005      	beq.n	8005316 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800530a:	4b0a      	ldr	r3, [pc, #40]	; (8005334 <HAL_Delay+0x44>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	461a      	mov	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	4413      	add	r3, r2
 8005314:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005316:	bf00      	nop
 8005318:	f7ff ffde 	bl	80052d8 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	429a      	cmp	r2, r3
 8005326:	d8f7      	bhi.n	8005318 <HAL_Delay+0x28>
  {
  }
}
 8005328:	bf00      	nop
 800532a:	bf00      	nop
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	20000014 	.word	0x20000014

08005338 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8005338:	b480      	push	{r7}
 800533a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 800533c:	4b05      	ldr	r3, [pc, #20]	; (8005354 <HAL_SuspendTick+0x1c>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a04      	ldr	r2, [pc, #16]	; (8005354 <HAL_SuspendTick+0x1c>)
 8005342:	f023 0302 	bic.w	r3, r3, #2
 8005346:	6013      	str	r3, [r2, #0]
}
 8005348:	bf00      	nop
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr
 8005352:	bf00      	nop
 8005354:	e000e010 	.word	0xe000e010

08005358 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8005358:	b480      	push	{r7}
 800535a:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 800535c:	4b05      	ldr	r3, [pc, #20]	; (8005374 <HAL_ResumeTick+0x1c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a04      	ldr	r2, [pc, #16]	; (8005374 <HAL_ResumeTick+0x1c>)
 8005362:	f043 0302 	orr.w	r3, r3, #2
 8005366:	6013      	str	r3, [r2, #0]
}
 8005368:	bf00      	nop
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	e000e010 	.word	0xe000e010

08005378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	f003 0307 	and.w	r3, r3, #7
 8005386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005388:	4b0c      	ldr	r3, [pc, #48]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005394:	4013      	ands	r3, r2
 8005396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800539c:	68bb      	ldr	r3, [r7, #8]
 800539e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80053a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80053a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053aa:	4a04      	ldr	r2, [pc, #16]	; (80053bc <__NVIC_SetPriorityGrouping+0x44>)
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	60d3      	str	r3, [r2, #12]
}
 80053b0:	bf00      	nop
 80053b2:	3714      	adds	r7, #20
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	e000ed00 	.word	0xe000ed00

080053c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053c0:	b480      	push	{r7}
 80053c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053c4:	4b04      	ldr	r3, [pc, #16]	; (80053d8 <__NVIC_GetPriorityGrouping+0x18>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	0a1b      	lsrs	r3, r3, #8
 80053ca:	f003 0307 	and.w	r3, r3, #7
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	e000ed00 	.word	0xe000ed00

080053dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	4603      	mov	r3, r0
 80053e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	db0b      	blt.n	8005406 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053ee:	79fb      	ldrb	r3, [r7, #7]
 80053f0:	f003 021f 	and.w	r2, r3, #31
 80053f4:	4907      	ldr	r1, [pc, #28]	; (8005414 <__NVIC_EnableIRQ+0x38>)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	095b      	lsrs	r3, r3, #5
 80053fc:	2001      	movs	r0, #1
 80053fe:	fa00 f202 	lsl.w	r2, r0, r2
 8005402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005406:	bf00      	nop
 8005408:	370c      	adds	r7, #12
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	e000e100 	.word	0xe000e100

08005418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	4603      	mov	r3, r0
 8005420:	6039      	str	r1, [r7, #0]
 8005422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005428:	2b00      	cmp	r3, #0
 800542a:	db0a      	blt.n	8005442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	490c      	ldr	r1, [pc, #48]	; (8005464 <__NVIC_SetPriority+0x4c>)
 8005432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005436:	0112      	lsls	r2, r2, #4
 8005438:	b2d2      	uxtb	r2, r2
 800543a:	440b      	add	r3, r1
 800543c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005440:	e00a      	b.n	8005458 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	b2da      	uxtb	r2, r3
 8005446:	4908      	ldr	r1, [pc, #32]	; (8005468 <__NVIC_SetPriority+0x50>)
 8005448:	79fb      	ldrb	r3, [r7, #7]
 800544a:	f003 030f 	and.w	r3, r3, #15
 800544e:	3b04      	subs	r3, #4
 8005450:	0112      	lsls	r2, r2, #4
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	440b      	add	r3, r1
 8005456:	761a      	strb	r2, [r3, #24]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	e000e100 	.word	0xe000e100
 8005468:	e000ed00 	.word	0xe000ed00

0800546c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800546c:	b480      	push	{r7}
 800546e:	b089      	sub	sp, #36	; 0x24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f003 0307 	and.w	r3, r3, #7
 800547e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005480:	69fb      	ldr	r3, [r7, #28]
 8005482:	f1c3 0307 	rsb	r3, r3, #7
 8005486:	2b04      	cmp	r3, #4
 8005488:	bf28      	it	cs
 800548a:	2304      	movcs	r3, #4
 800548c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	3304      	adds	r3, #4
 8005492:	2b06      	cmp	r3, #6
 8005494:	d902      	bls.n	800549c <NVIC_EncodePriority+0x30>
 8005496:	69fb      	ldr	r3, [r7, #28]
 8005498:	3b03      	subs	r3, #3
 800549a:	e000      	b.n	800549e <NVIC_EncodePriority+0x32>
 800549c:	2300      	movs	r3, #0
 800549e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054a0:	f04f 32ff 	mov.w	r2, #4294967295
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	fa02 f303 	lsl.w	r3, r2, r3
 80054aa:	43da      	mvns	r2, r3
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	401a      	ands	r2, r3
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054b4:	f04f 31ff 	mov.w	r1, #4294967295
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	fa01 f303 	lsl.w	r3, r1, r3
 80054be:	43d9      	mvns	r1, r3
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054c4:	4313      	orrs	r3, r2
         );
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3724      	adds	r7, #36	; 0x24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d0:	4770      	bx	lr
	...

080054d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b082      	sub	sp, #8
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	3b01      	subs	r3, #1
 80054e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80054e4:	d301      	bcc.n	80054ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054e6:	2301      	movs	r3, #1
 80054e8:	e00f      	b.n	800550a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054ea:	4a0a      	ldr	r2, [pc, #40]	; (8005514 <SysTick_Config+0x40>)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80054f2:	210f      	movs	r1, #15
 80054f4:	f04f 30ff 	mov.w	r0, #4294967295
 80054f8:	f7ff ff8e 	bl	8005418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80054fc:	4b05      	ldr	r3, [pc, #20]	; (8005514 <SysTick_Config+0x40>)
 80054fe:	2200      	movs	r2, #0
 8005500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005502:	4b04      	ldr	r3, [pc, #16]	; (8005514 <SysTick_Config+0x40>)
 8005504:	2207      	movs	r2, #7
 8005506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	e000e010 	.word	0xe000e010

08005518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005520:	6878      	ldr	r0, [r7, #4]
 8005522:	f7ff ff29 	bl	8005378 <__NVIC_SetPriorityGrouping>
}
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b086      	sub	sp, #24
 8005532:	af00      	add	r7, sp, #0
 8005534:	4603      	mov	r3, r0
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
 800553a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005540:	f7ff ff3e 	bl	80053c0 <__NVIC_GetPriorityGrouping>
 8005544:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005546:	687a      	ldr	r2, [r7, #4]
 8005548:	68b9      	ldr	r1, [r7, #8]
 800554a:	6978      	ldr	r0, [r7, #20]
 800554c:	f7ff ff8e 	bl	800546c <NVIC_EncodePriority>
 8005550:	4602      	mov	r2, r0
 8005552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005556:	4611      	mov	r1, r2
 8005558:	4618      	mov	r0, r3
 800555a:	f7ff ff5d 	bl	8005418 <__NVIC_SetPriority>
}
 800555e:	bf00      	nop
 8005560:	3718      	adds	r7, #24
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005566:	b580      	push	{r7, lr}
 8005568:	b082      	sub	sp, #8
 800556a:	af00      	add	r7, sp, #0
 800556c:	4603      	mov	r3, r0
 800556e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005574:	4618      	mov	r0, r3
 8005576:	f7ff ff31 	bl	80053dc <__NVIC_EnableIRQ>
}
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f7ff ffa2 	bl	80054d4 <SysTick_Config>
 8005590:	4603      	mov	r3, r0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3708      	adds	r7, #8
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
	...

0800559c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b082      	sub	sp, #8
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d101      	bne.n	80055ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80055aa:	2301      	movs	r3, #1
 80055ac:	e054      	b.n	8005658 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	7f5b      	ldrb	r3, [r3, #29]
 80055b2:	b2db      	uxtb	r3, r3
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d105      	bne.n	80055c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f7ff f9e4 	bl	800498c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2202      	movs	r2, #2
 80055c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	791b      	ldrb	r3, [r3, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10c      	bne.n	80055ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a22      	ldr	r2, [pc, #136]	; (8005660 <HAL_CRC_Init+0xc4>)
 80055d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	689a      	ldr	r2, [r3, #8]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0218 	bic.w	r2, r2, #24
 80055e8:	609a      	str	r2, [r3, #8]
 80055ea:	e00c      	b.n	8005606 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6899      	ldr	r1, [r3, #8]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	461a      	mov	r2, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 f978 	bl	80058ec <HAL_CRCEx_Polynomial_Set>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d001      	beq.n	8005606 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e028      	b.n	8005658 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	795b      	ldrb	r3, [r3, #5]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d105      	bne.n	800561a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f04f 32ff 	mov.w	r2, #4294967295
 8005616:	611a      	str	r2, [r3, #16]
 8005618:	e004      	b.n	8005624 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6912      	ldr	r2, [r2, #16]
 8005622:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	695a      	ldr	r2, [r3, #20]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699a      	ldr	r2, [r3, #24]
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	3708      	adds	r7, #8
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}
 8005660:	04c11db7 	.word	0x04c11db7

08005664 <HAL_CRC_DeInit>:
  * @brief  DeInitialize the CRC peripheral.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_DeInit(CRC_HandleTypeDef *hcrc)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_CRC_DeInit+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e022      	b.n	80056bc <HAL_CRC_DeInit+0x58>

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  /* Check the CRC peripheral state */
  if (hcrc->State == HAL_CRC_STATE_BUSY)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	7f5b      	ldrb	r3, [r3, #29]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d101      	bne.n	8005684 <HAL_CRC_DeInit+0x20>
  {
    return HAL_BUSY;
 8005680:	2302      	movs	r3, #2
 8005682:	e01b      	b.n	80056bc <HAL_CRC_DeInit+0x58>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2202      	movs	r2, #2
 8005688:	775a      	strb	r2, [r3, #29]

  /* Reset CRC calculation unit */
  __HAL_CRC_DR_RESET(hcrc);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	609a      	str	r2, [r3, #8]

  /* Reset IDR register content */
  CLEAR_BIT(hcrc->Instance->IDR, CRC_IDR_IDR);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	791b      	ldrb	r3, [r3, #4]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2200      	movs	r2, #0
 80056a6:	711a      	strb	r2, [r3, #4]

  /* DeInit the low level hardware */
  HAL_CRC_MspDeInit(hcrc);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f7ff f98f 	bl	80049cc <HAL_CRC_MspDeInit>

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_RESET;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	775a      	strb	r2, [r3, #29]

  /* Process unlocked */
  __HAL_UNLOCK(hcrc);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	771a      	strb	r2, [r3, #28]

  /* Return function status */
  return HAL_OK;
 80056ba:	2300      	movs	r3, #0
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3708      	adds	r7, #8
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bd80      	pop	{r7, pc}

080056c4 <HAL_CRC_Calculate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Calculate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b086      	sub	sp, #24
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	60f8      	str	r0, [r7, #12]
 80056cc:	60b9      	str	r1, [r7, #8]
 80056ce:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80056d0:	2300      	movs	r3, #0
 80056d2:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	2202      	movs	r2, #2
 80056d8:	775a      	strb	r2, [r3, #29]

  /* Reset CRC Calculation Unit (hcrc->Instance->INIT is
  *  written in hcrc->Instance->DR) */
  __HAL_CRC_DR_RESET(hcrc);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f042 0201 	orr.w	r2, r2, #1
 80056e8:	609a      	str	r2, [r3, #8]

  switch (hcrc->InputDataFormat)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	2b03      	cmp	r3, #3
 80056f0:	d006      	beq.n	8005700 <HAL_CRC_Calculate+0x3c>
 80056f2:	2b03      	cmp	r3, #3
 80056f4:	d829      	bhi.n	800574a <HAL_CRC_Calculate+0x86>
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d019      	beq.n	800572e <HAL_CRC_Calculate+0x6a>
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d01e      	beq.n	800573c <HAL_CRC_Calculate+0x78>
      /* Specific 16-bit input data handling  */
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;

    default:
      break;
 80056fe:	e024      	b.n	800574a <HAL_CRC_Calculate+0x86>
      for (index = 0U; index < BufferLength; index++)
 8005700:	2300      	movs	r3, #0
 8005702:	617b      	str	r3, [r7, #20]
 8005704:	e00a      	b.n	800571c <HAL_CRC_Calculate+0x58>
        hcrc->Instance->DR = pBuffer[index];
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	009b      	lsls	r3, r3, #2
 800570a:	68ba      	ldr	r2, [r7, #8]
 800570c:	441a      	add	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6812      	ldr	r2, [r2, #0]
 8005714:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	3301      	adds	r3, #1
 800571a:	617b      	str	r3, [r7, #20]
 800571c:	697a      	ldr	r2, [r7, #20]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	429a      	cmp	r2, r3
 8005722:	d3f0      	bcc.n	8005706 <HAL_CRC_Calculate+0x42>
      temp = hcrc->Instance->DR;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	613b      	str	r3, [r7, #16]
      break;
 800572c:	e00e      	b.n	800574c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	68b9      	ldr	r1, [r7, #8]
 8005732:	68f8      	ldr	r0, [r7, #12]
 8005734:	f000 f812 	bl	800575c <CRC_Handle_8>
 8005738:	6138      	str	r0, [r7, #16]
      break;
 800573a:	e007      	b.n	800574c <HAL_CRC_Calculate+0x88>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	68b9      	ldr	r1, [r7, #8]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f000 f899 	bl	8005878 <CRC_Handle_16>
 8005746:	6138      	str	r0, [r7, #16]
      break;
 8005748:	e000      	b.n	800574c <HAL_CRC_Calculate+0x88>
      break;
 800574a:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2201      	movs	r2, #1
 8005750:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8005752:	693b      	ldr	r3, [r7, #16]
}
 8005754:	4618      	mov	r0, r3
 8005756:	3718      	adds	r7, #24
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 800575c:	b480      	push	{r7}
 800575e:	b089      	sub	sp, #36	; 0x24
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 8005768:	2300      	movs	r3, #0
 800576a:	61fb      	str	r3, [r7, #28]
 800576c:	e023      	b.n	80057b6 <CRC_Handle_8+0x5a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 800576e:	69fb      	ldr	r3, [r7, #28]
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	68ba      	ldr	r2, [r7, #8]
 8005774:	4413      	add	r3, r2
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	061a      	lsls	r2, r3, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	3301      	adds	r3, #1
 8005780:	68b9      	ldr	r1, [r7, #8]
 8005782:	440b      	add	r3, r1
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	041b      	lsls	r3, r3, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8005788:	431a      	orrs	r2, r3
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	3302      	adds	r3, #2
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	440b      	add	r3, r1
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	021b      	lsls	r3, r3, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8005798:	431a      	orrs	r2, r3
                         (uint32_t)pBuffer[(4U * i) + 3U];
 800579a:	69fb      	ldr	r3, [r7, #28]
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	3303      	adds	r3, #3
 80057a0:	68b9      	ldr	r1, [r7, #8]
 80057a2:	440b      	add	r3, r1
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	4619      	mov	r1, r3
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	681b      	ldr	r3, [r3, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80057ac:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80057ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	3301      	adds	r3, #1
 80057b4:	61fb      	str	r3, [r7, #28]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	089b      	lsrs	r3, r3, #2
 80057ba:	69fa      	ldr	r2, [r7, #28]
 80057bc:	429a      	cmp	r2, r3
 80057be:	d3d6      	bcc.n	800576e <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	f003 0303 	and.w	r3, r3, #3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d04d      	beq.n	8005866 <CRC_Handle_8+0x10a>
  {
    if ((BufferLength % 4U) == 1U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	f003 0303 	and.w	r3, r3, #3
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d107      	bne.n	80057e4 <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	68ba      	ldr	r2, [r7, #8]
 80057da:	4413      	add	r3, r2
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	7013      	strb	r3, [r2, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f003 0303 	and.w	r3, r3, #3
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d116      	bne.n	800581c <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	68ba      	ldr	r2, [r7, #8]
 80057f4:	4413      	add	r3, r2
 80057f6:	781b      	ldrb	r3, [r3, #0]
 80057f8:	021b      	lsls	r3, r3, #8
 80057fa:	b21a      	sxth	r2, r3
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	3301      	adds	r3, #1
 8005802:	68b9      	ldr	r1, [r7, #8]
 8005804:	440b      	add	r3, r1
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	b21b      	sxth	r3, r3
 800580a:	4313      	orrs	r3, r2
 800580c:	b21b      	sxth	r3, r3
 800580e:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8005816:	697b      	ldr	r3, [r7, #20]
 8005818:	8b7a      	ldrh	r2, [r7, #26]
 800581a:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0303 	and.w	r3, r3, #3
 8005822:	2b03      	cmp	r3, #3
 8005824:	d11f      	bne.n	8005866 <CRC_Handle_8+0x10a>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 8005826:	69fb      	ldr	r3, [r7, #28]
 8005828:	009b      	lsls	r3, r3, #2
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	4413      	add	r3, r2
 800582e:	781b      	ldrb	r3, [r3, #0]
 8005830:	021b      	lsls	r3, r3, #8
 8005832:	b21a      	sxth	r2, r3
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3301      	adds	r3, #1
 800583a:	68b9      	ldr	r1, [r7, #8]
 800583c:	440b      	add	r3, r1
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	b21b      	sxth	r3, r3
 8005842:	4313      	orrs	r3, r2
 8005844:	b21b      	sxth	r3, r3
 8005846:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	8b7a      	ldrh	r2, [r7, #26]
 8005852:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 8005854:	69fb      	ldr	r3, [r7, #28]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	3302      	adds	r3, #2
 800585a:	68ba      	ldr	r2, [r7, #8]
 800585c:	4413      	add	r3, r2
 800585e:	68fa      	ldr	r2, [r7, #12]
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	7013      	strb	r3, [r2, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	681b      	ldr	r3, [r3, #0]
}
 800586c:	4618      	mov	r0, r3
 800586e:	3724      	adds	r7, #36	; 0x24
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	e013      	b.n	80058b2 <CRC_Handle_16+0x3a>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	68ba      	ldr	r2, [r7, #8]
 8005890:	4413      	add	r3, r2
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	041a      	lsls	r2, r3, #16
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	3302      	adds	r3, #2
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	440b      	add	r3, r1
 80058a0:	881b      	ldrh	r3, [r3, #0]
 80058a2:	4619      	mov	r1, r3
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	3301      	adds	r3, #1
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	085b      	lsrs	r3, r3, #1
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d3e6      	bcc.n	800588a <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f003 0301 	and.w	r3, r3, #1
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d009      	beq.n	80058da <CRC_Handle_16+0x62>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	009b      	lsls	r3, r3, #2
 80058d0:	68ba      	ldr	r2, [r7, #8]
 80058d2:	4413      	add	r3, r2
 80058d4:	881a      	ldrh	r2, [r3, #0]
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	681b      	ldr	r3, [r3, #0]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	371c      	adds	r7, #28
 80058e4:	46bd      	mov	sp, r7
 80058e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ea:	4770      	bx	lr

080058ec <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b087      	sub	sp, #28
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	60b9      	str	r1, [r7, #8]
 80058f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f8:	2300      	movs	r3, #0
 80058fa:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80058fc:	231f      	movs	r3, #31
 80058fe:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8005900:	bf00      	nop
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1e5a      	subs	r2, r3, #1
 8005906:	613a      	str	r2, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_CRCEx_Polynomial_Set+0x34>
 800590c:	693b      	ldr	r3, [r7, #16]
 800590e:	f003 031f 	and.w	r3, r3, #31
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	fa22 f303 	lsr.w	r3, r2, r3
 8005918:	f003 0301 	and.w	r3, r3, #1
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0f0      	beq.n	8005902 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b18      	cmp	r3, #24
 8005924:	d846      	bhi.n	80059b4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8005926:	a201      	add	r2, pc, #4	; (adr r2, 800592c <HAL_CRCEx_Polynomial_Set+0x40>)
 8005928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800592c:	080059bb 	.word	0x080059bb
 8005930:	080059b5 	.word	0x080059b5
 8005934:	080059b5 	.word	0x080059b5
 8005938:	080059b5 	.word	0x080059b5
 800593c:	080059b5 	.word	0x080059b5
 8005940:	080059b5 	.word	0x080059b5
 8005944:	080059b5 	.word	0x080059b5
 8005948:	080059b5 	.word	0x080059b5
 800594c:	080059a9 	.word	0x080059a9
 8005950:	080059b5 	.word	0x080059b5
 8005954:	080059b5 	.word	0x080059b5
 8005958:	080059b5 	.word	0x080059b5
 800595c:	080059b5 	.word	0x080059b5
 8005960:	080059b5 	.word	0x080059b5
 8005964:	080059b5 	.word	0x080059b5
 8005968:	080059b5 	.word	0x080059b5
 800596c:	0800599d 	.word	0x0800599d
 8005970:	080059b5 	.word	0x080059b5
 8005974:	080059b5 	.word	0x080059b5
 8005978:	080059b5 	.word	0x080059b5
 800597c:	080059b5 	.word	0x080059b5
 8005980:	080059b5 	.word	0x080059b5
 8005984:	080059b5 	.word	0x080059b5
 8005988:	080059b5 	.word	0x080059b5
 800598c:	08005991 	.word	0x08005991
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	2b06      	cmp	r3, #6
 8005994:	d913      	bls.n	80059be <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8005996:	2301      	movs	r3, #1
 8005998:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800599a:	e010      	b.n	80059be <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	2b07      	cmp	r3, #7
 80059a0:	d90f      	bls.n	80059c2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059a6:	e00c      	b.n	80059c2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80059a8:	693b      	ldr	r3, [r7, #16]
 80059aa:	2b0f      	cmp	r3, #15
 80059ac:	d90b      	bls.n	80059c6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80059b2:	e008      	b.n	80059c6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	75fb      	strb	r3, [r7, #23]
      break;
 80059b8:	e006      	b.n	80059c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059ba:	bf00      	nop
 80059bc:	e004      	b.n	80059c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059be:	bf00      	nop
 80059c0:	e002      	b.n	80059c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059c2:	bf00      	nop
 80059c4:	e000      	b.n	80059c8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80059c6:	bf00      	nop
  }
  if (status == HAL_OK)
 80059c8:	7dfb      	ldrb	r3, [r7, #23]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10d      	bne.n	80059ea <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f023 0118 	bic.w	r1, r3, #24
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	430a      	orrs	r2, r1
 80059e8:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80059ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b085      	sub	sp, #20
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	e098      	b.n	8005b3c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	461a      	mov	r2, r3
 8005a10:	4b4d      	ldr	r3, [pc, #308]	; (8005b48 <HAL_DMA_Init+0x150>)
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d80f      	bhi.n	8005a36 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	4b4b      	ldr	r3, [pc, #300]	; (8005b4c <HAL_DMA_Init+0x154>)
 8005a1e:	4413      	add	r3, r2
 8005a20:	4a4b      	ldr	r2, [pc, #300]	; (8005b50 <HAL_DMA_Init+0x158>)
 8005a22:	fba2 2303 	umull	r2, r3, r2, r3
 8005a26:	091b      	lsrs	r3, r3, #4
 8005a28:	009a      	lsls	r2, r3, #2
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a48      	ldr	r2, [pc, #288]	; (8005b54 <HAL_DMA_Init+0x15c>)
 8005a32:	641a      	str	r2, [r3, #64]	; 0x40
 8005a34:	e00e      	b.n	8005a54 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	4b46      	ldr	r3, [pc, #280]	; (8005b58 <HAL_DMA_Init+0x160>)
 8005a3e:	4413      	add	r3, r2
 8005a40:	4a43      	ldr	r2, [pc, #268]	; (8005b50 <HAL_DMA_Init+0x158>)
 8005a42:	fba2 2303 	umull	r2, r3, r2, r3
 8005a46:	091b      	lsrs	r3, r3, #4
 8005a48:	009a      	lsls	r2, r3, #2
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a42      	ldr	r2, [pc, #264]	; (8005b5c <HAL_DMA_Init+0x164>)
 8005a52:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2202      	movs	r2, #2
 8005a58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a6e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005a78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005a84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005a90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a1b      	ldr	r3, [r3, #32]
 8005a96:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005a98:	68fa      	ldr	r2, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	689b      	ldr	r3, [r3, #8]
 8005aaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005aae:	d039      	beq.n	8005b24 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ab4:	4a27      	ldr	r2, [pc, #156]	; (8005b54 <HAL_DMA_Init+0x15c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d11a      	bne.n	8005af0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005aba:	4b29      	ldr	r3, [pc, #164]	; (8005b60 <HAL_DMA_Init+0x168>)
 8005abc:	681a      	ldr	r2, [r3, #0]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac2:	f003 031c 	and.w	r3, r3, #28
 8005ac6:	210f      	movs	r1, #15
 8005ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8005acc:	43db      	mvns	r3, r3
 8005ace:	4924      	ldr	r1, [pc, #144]	; (8005b60 <HAL_DMA_Init+0x168>)
 8005ad0:	4013      	ands	r3, r2
 8005ad2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005ad4:	4b22      	ldr	r3, [pc, #136]	; (8005b60 <HAL_DMA_Init+0x168>)
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6859      	ldr	r1, [r3, #4]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ae0:	f003 031c 	and.w	r3, r3, #28
 8005ae4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ae8:	491d      	ldr	r1, [pc, #116]	; (8005b60 <HAL_DMA_Init+0x168>)
 8005aea:	4313      	orrs	r3, r2
 8005aec:	600b      	str	r3, [r1, #0]
 8005aee:	e019      	b.n	8005b24 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005af0:	4b1c      	ldr	r3, [pc, #112]	; (8005b64 <HAL_DMA_Init+0x16c>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af8:	f003 031c 	and.w	r3, r3, #28
 8005afc:	210f      	movs	r1, #15
 8005afe:	fa01 f303 	lsl.w	r3, r1, r3
 8005b02:	43db      	mvns	r3, r3
 8005b04:	4917      	ldr	r1, [pc, #92]	; (8005b64 <HAL_DMA_Init+0x16c>)
 8005b06:	4013      	ands	r3, r2
 8005b08:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005b0a:	4b16      	ldr	r3, [pc, #88]	; (8005b64 <HAL_DMA_Init+0x16c>)
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6859      	ldr	r1, [r3, #4]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b16:	f003 031c 	and.w	r3, r3, #28
 8005b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b1e:	4911      	ldr	r1, [pc, #68]	; (8005b64 <HAL_DMA_Init+0x16c>)
 8005b20:	4313      	orrs	r3, r2
 8005b22:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005b3a:	2300      	movs	r3, #0
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3714      	adds	r7, #20
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	40020407 	.word	0x40020407
 8005b4c:	bffdfff8 	.word	0xbffdfff8
 8005b50:	cccccccd 	.word	0xcccccccd
 8005b54:	40020000 	.word	0x40020000
 8005b58:	bffdfbf8 	.word	0xbffdfbf8
 8005b5c:	40020400 	.word	0x40020400
 8005b60:	400200a8 	.word	0x400200a8
 8005b64:	400204a8 	.word	0x400204a8

08005b68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b086      	sub	sp, #24
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	d101      	bne.n	8005b88 <HAL_DMA_Start_IT+0x20>
 8005b84:	2302      	movs	r3, #2
 8005b86:	e04b      	b.n	8005c20 <HAL_DMA_Start_IT+0xb8>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d13a      	bne.n	8005c12 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2202      	movs	r2, #2
 8005ba0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0201 	bic.w	r2, r2, #1
 8005bb8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 f95f 	bl	8005e84 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d008      	beq.n	8005be0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 020e 	orr.w	r2, r2, #14
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	e00f      	b.n	8005c00 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f022 0204 	bic.w	r2, r2, #4
 8005bee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f042 020a 	orr.w	r2, r2, #10
 8005bfe:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f042 0201 	orr.w	r2, r2, #1
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	e005      	b.n	8005c1e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005c1a:	2302      	movs	r3, #2
 8005c1c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005c1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3718      	adds	r7, #24
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b085      	sub	sp, #20
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c30:	2300      	movs	r3, #0
 8005c32:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d008      	beq.n	8005c52 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2204      	movs	r2, #4
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e022      	b.n	8005c98 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 020e 	bic.w	r2, r2, #14
 8005c60:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	f022 0201 	bic.w	r2, r2, #1
 8005c70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c76:	f003 021c 	and.w	r2, r3, #28
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	2101      	movs	r1, #1
 8005c80:	fa01 f202 	lsl.w	r2, r1, r2
 8005c84:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b084      	sub	sp, #16
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cac:	2300      	movs	r3, #0
 8005cae:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d005      	beq.n	8005cc8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	73fb      	strb	r3, [r7, #15]
 8005cc6:	e029      	b.n	8005d1c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f022 020e 	bic.w	r2, r2, #14
 8005cd6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f022 0201 	bic.w	r2, r2, #1
 8005ce6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cec:	f003 021c 	and.w	r2, r3, #28
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	2101      	movs	r1, #1
 8005cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8005cfa:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2201      	movs	r2, #1
 8005d00:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d003      	beq.n	8005d1c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	4798      	blx	r3
    }
  }
  return status;
 8005d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d42:	f003 031c 	and.w	r3, r3, #28
 8005d46:	2204      	movs	r2, #4
 8005d48:	409a      	lsls	r2, r3
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d026      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x7a>
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f003 0304 	and.w	r3, r3, #4
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d021      	beq.n	8005da0 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0320 	and.w	r3, r3, #32
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d107      	bne.n	8005d7a <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f022 0204 	bic.w	r2, r2, #4
 8005d78:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7e:	f003 021c 	and.w	r2, r3, #28
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d86:	2104      	movs	r1, #4
 8005d88:	fa01 f202 	lsl.w	r2, r1, r2
 8005d8c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d071      	beq.n	8005e7a <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	6878      	ldr	r0, [r7, #4]
 8005d9c:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005d9e:	e06c      	b.n	8005e7a <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da4:	f003 031c 	and.w	r3, r3, #28
 8005da8:	2202      	movs	r2, #2
 8005daa:	409a      	lsls	r2, r3
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	4013      	ands	r3, r2
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d02e      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xec>
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	f003 0302 	and.w	r3, r3, #2
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d029      	beq.n	8005e12 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f003 0320 	and.w	r3, r3, #32
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d10b      	bne.n	8005de4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	681a      	ldr	r2, [r3, #0]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 020a 	bic.w	r2, r2, #10
 8005dda:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2201      	movs	r2, #1
 8005de0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005de8:	f003 021c 	and.w	r2, r3, #28
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	2102      	movs	r1, #2
 8005df2:	fa01 f202 	lsl.w	r2, r1, r2
 8005df6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d038      	beq.n	8005e7a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8005e10:	e033      	b.n	8005e7a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e16:	f003 031c 	and.w	r3, r3, #28
 8005e1a:	2208      	movs	r2, #8
 8005e1c:	409a      	lsls	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	4013      	ands	r3, r2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02a      	beq.n	8005e7c <HAL_DMA_IRQHandler+0x156>
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	f003 0308 	and.w	r3, r3, #8
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d025      	beq.n	8005e7c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f022 020e 	bic.w	r2, r2, #14
 8005e3e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e44:	f003 021c 	and.w	r2, r3, #28
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4c:	2101      	movs	r1, #1
 8005e4e:	fa01 f202 	lsl.w	r2, r1, r2
 8005e52:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d004      	beq.n	8005e7c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005e7a:	bf00      	nop
 8005e7c:	bf00      	nop
}
 8005e7e:	3710      	adds	r7, #16
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e96:	f003 021c 	and.w	r2, r3, #28
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	2101      	movs	r1, #1
 8005ea0:	fa01 f202 	lsl.w	r2, r1, r2
 8005ea4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	683a      	ldr	r2, [r7, #0]
 8005eac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	2b10      	cmp	r3, #16
 8005eb4:	d108      	bne.n	8005ec8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	687a      	ldr	r2, [r7, #4]
 8005ebc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68ba      	ldr	r2, [r7, #8]
 8005ec4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005ec6:	e007      	b.n	8005ed8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	68ba      	ldr	r2, [r7, #8]
 8005ece:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	60da      	str	r2, [r3, #12]
}
 8005ed8:	bf00      	nop
 8005eda:	3714      	adds	r7, #20
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005ef2:	e154      	b.n	800619e <HAL_GPIO_Init+0x2ba>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	2101      	movs	r1, #1
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	fa01 f303 	lsl.w	r3, r1, r3
 8005f00:	4013      	ands	r3, r2
 8005f02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	f000 8146 	beq.w	8006198 <HAL_GPIO_Init+0x2b4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 0303 	and.w	r3, r3, #3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d005      	beq.n	8005f24 <HAL_GPIO_Init+0x40>
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d130      	bne.n	8005f86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	005b      	lsls	r3, r3, #1
 8005f2e:	2203      	movs	r2, #3
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	43db      	mvns	r3, r3
 8005f36:	693a      	ldr	r2, [r7, #16]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	68da      	ldr	r2, [r3, #12]
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	005b      	lsls	r3, r3, #1
 8005f44:	fa02 f303 	lsl.w	r3, r2, r3
 8005f48:	693a      	ldr	r2, [r7, #16]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	693a      	ldr	r2, [r7, #16]
 8005f52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	685b      	ldr	r3, [r3, #4]
 8005f58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f62:	43db      	mvns	r3, r3
 8005f64:	693a      	ldr	r2, [r7, #16]
 8005f66:	4013      	ands	r3, r2
 8005f68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	091b      	lsrs	r3, r3, #4
 8005f70:	f003 0201 	and.w	r2, r3, #1
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	693a      	ldr	r2, [r7, #16]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	693a      	ldr	r2, [r7, #16]
 8005f84:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	685b      	ldr	r3, [r3, #4]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	2b03      	cmp	r3, #3
 8005f90:	d017      	beq.n	8005fc2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	005b      	lsls	r3, r3, #1
 8005f9c:	2203      	movs	r2, #3
 8005f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa2:	43db      	mvns	r3, r3
 8005fa4:	693a      	ldr	r2, [r7, #16]
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	689a      	ldr	r2, [r3, #8]
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	005b      	lsls	r3, r3, #1
 8005fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005fb6:	693a      	ldr	r2, [r7, #16]
 8005fb8:	4313      	orrs	r3, r2
 8005fba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	2b02      	cmp	r3, #2
 8005fcc:	d123      	bne.n	8006016 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	08da      	lsrs	r2, r3, #3
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	3208      	adds	r2, #8
 8005fd6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fda:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	f003 0307 	and.w	r3, r3, #7
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	220f      	movs	r2, #15
 8005fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fea:	43db      	mvns	r3, r3
 8005fec:	693a      	ldr	r2, [r7, #16]
 8005fee:	4013      	ands	r3, r2
 8005ff0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	691a      	ldr	r2, [r3, #16]
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f003 0307 	and.w	r3, r3, #7
 8005ffc:	009b      	lsls	r3, r3, #2
 8005ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8006002:	693a      	ldr	r2, [r7, #16]
 8006004:	4313      	orrs	r3, r2
 8006006:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006008:	697b      	ldr	r3, [r7, #20]
 800600a:	08da      	lsrs	r2, r3, #3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	3208      	adds	r2, #8
 8006010:	6939      	ldr	r1, [r7, #16]
 8006012:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	005b      	lsls	r3, r3, #1
 8006020:	2203      	movs	r2, #3
 8006022:	fa02 f303 	lsl.w	r3, r2, r3
 8006026:	43db      	mvns	r3, r3
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4013      	ands	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	f003 0203 	and.w	r2, r3, #3
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	005b      	lsls	r3, r3, #1
 800603a:	fa02 f303 	lsl.w	r3, r2, r3
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	693a      	ldr	r2, [r7, #16]
 8006048:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800604a:	683b      	ldr	r3, [r7, #0]
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 80a0 	beq.w	8006198 <HAL_GPIO_Init+0x2b4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006058:	4b58      	ldr	r3, [pc, #352]	; (80061bc <HAL_GPIO_Init+0x2d8>)
 800605a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800605c:	4a57      	ldr	r2, [pc, #348]	; (80061bc <HAL_GPIO_Init+0x2d8>)
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	6613      	str	r3, [r2, #96]	; 0x60
 8006064:	4b55      	ldr	r3, [pc, #340]	; (80061bc <HAL_GPIO_Init+0x2d8>)
 8006066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006068:	f003 0301 	and.w	r3, r3, #1
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8006070:	4a53      	ldr	r2, [pc, #332]	; (80061c0 <HAL_GPIO_Init+0x2dc>)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	089b      	lsrs	r3, r3, #2
 8006076:	3302      	adds	r3, #2
 8006078:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800607c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	f003 0303 	and.w	r3, r3, #3
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	220f      	movs	r2, #15
 8006088:	fa02 f303 	lsl.w	r3, r2, r3
 800608c:	43db      	mvns	r3, r3
 800608e:	693a      	ldr	r2, [r7, #16]
 8006090:	4013      	ands	r3, r2
 8006092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800609a:	d019      	beq.n	80060d0 <HAL_GPIO_Init+0x1ec>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a49      	ldr	r2, [pc, #292]	; (80061c4 <HAL_GPIO_Init+0x2e0>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d013      	beq.n	80060cc <HAL_GPIO_Init+0x1e8>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	4a48      	ldr	r2, [pc, #288]	; (80061c8 <HAL_GPIO_Init+0x2e4>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d00d      	beq.n	80060c8 <HAL_GPIO_Init+0x1e4>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a47      	ldr	r2, [pc, #284]	; (80061cc <HAL_GPIO_Init+0x2e8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d007      	beq.n	80060c4 <HAL_GPIO_Init+0x1e0>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a46      	ldr	r2, [pc, #280]	; (80061d0 <HAL_GPIO_Init+0x2ec>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d101      	bne.n	80060c0 <HAL_GPIO_Init+0x1dc>
 80060bc:	2304      	movs	r3, #4
 80060be:	e008      	b.n	80060d2 <HAL_GPIO_Init+0x1ee>
 80060c0:	2307      	movs	r3, #7
 80060c2:	e006      	b.n	80060d2 <HAL_GPIO_Init+0x1ee>
 80060c4:	2303      	movs	r3, #3
 80060c6:	e004      	b.n	80060d2 <HAL_GPIO_Init+0x1ee>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e002      	b.n	80060d2 <HAL_GPIO_Init+0x1ee>
 80060cc:	2301      	movs	r3, #1
 80060ce:	e000      	b.n	80060d2 <HAL_GPIO_Init+0x1ee>
 80060d0:	2300      	movs	r3, #0
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	f002 0203 	and.w	r2, r2, #3
 80060d8:	0092      	lsls	r2, r2, #2
 80060da:	4093      	lsls	r3, r2
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4313      	orrs	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80060e2:	4937      	ldr	r1, [pc, #220]	; (80061c0 <HAL_GPIO_Init+0x2dc>)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	089b      	lsrs	r3, r3, #2
 80060e8:	3302      	adds	r3, #2
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80060f0:	4b38      	ldr	r3, [pc, #224]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 80060f2:	689b      	ldr	r3, [r3, #8]
 80060f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	43db      	mvns	r3, r3
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4013      	ands	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d003      	beq.n	8006114 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	4313      	orrs	r3, r2
 8006112:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006114:	4a2f      	ldr	r2, [pc, #188]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 8006116:	693b      	ldr	r3, [r7, #16]
 8006118:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800611a:	4b2e      	ldr	r3, [pc, #184]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 800611c:	68db      	ldr	r3, [r3, #12]
 800611e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	43db      	mvns	r3, r3
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006132:	2b00      	cmp	r3, #0
 8006134:	d003      	beq.n	800613e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8006136:	693a      	ldr	r2, [r7, #16]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	4313      	orrs	r3, r2
 800613c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800613e:	4a25      	ldr	r2, [pc, #148]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006144:	4b23      	ldr	r3, [pc, #140]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	43db      	mvns	r3, r3
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4013      	ands	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800615c:	2b00      	cmp	r3, #0
 800615e:	d003      	beq.n	8006168 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	4313      	orrs	r3, r2
 8006166:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006168:	4a1a      	ldr	r2, [pc, #104]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800616e:	4b19      	ldr	r3, [pc, #100]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	43db      	mvns	r3, r3
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	4013      	ands	r3, r2
 800617c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d003      	beq.n	8006192 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800618a:	693a      	ldr	r2, [r7, #16]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006192:	4a10      	ldr	r2, [pc, #64]	; (80061d4 <HAL_GPIO_Init+0x2f0>)
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8006198:	697b      	ldr	r3, [r7, #20]
 800619a:	3301      	adds	r3, #1
 800619c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	f47f aea3 	bne.w	8005ef4 <HAL_GPIO_Init+0x10>
  }
}
 80061ae:	bf00      	nop
 80061b0:	bf00      	nop
 80061b2:	371c      	adds	r7, #28
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr
 80061bc:	40021000 	.word	0x40021000
 80061c0:	40010000 	.word	0x40010000
 80061c4:	48000400 	.word	0x48000400
 80061c8:	48000800 	.word	0x48000800
 80061cc:	48000c00 	.word	0x48000c00
 80061d0:	48001000 	.word	0x48001000
 80061d4:	40010400 	.word	0x40010400

080061d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	460b      	mov	r3, r1
 80061e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691a      	ldr	r2, [r3, #16]
 80061e8:	887b      	ldrh	r3, [r7, #2]
 80061ea:	4013      	ands	r3, r2
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80061f0:	2301      	movs	r3, #1
 80061f2:	73fb      	strb	r3, [r7, #15]
 80061f4:	e001      	b.n	80061fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80061f6:	2300      	movs	r3, #0
 80061f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80061fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3714      	adds	r7, #20
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	807b      	strh	r3, [r7, #2]
 8006214:	4613      	mov	r3, r2
 8006216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006218:	787b      	ldrb	r3, [r7, #1]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d003      	beq.n	8006226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800621e:	887a      	ldrh	r2, [r7, #2]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006224:	e002      	b.n	800622c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006226:	887a      	ldrh	r2, [r7, #2]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800622c:	bf00      	nop
 800622e:	370c      	adds	r7, #12
 8006230:	46bd      	mov	sp, r7
 8006232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006236:	4770      	bx	lr

08006238 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006238:	b480      	push	{r7}
 800623a:	b085      	sub	sp, #20
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
 8006240:	460b      	mov	r3, r1
 8006242:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	695b      	ldr	r3, [r3, #20]
 8006248:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800624a:	887a      	ldrh	r2, [r7, #2]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	4013      	ands	r3, r2
 8006250:	041a      	lsls	r2, r3, #16
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	43d9      	mvns	r1, r3
 8006256:	887b      	ldrh	r3, [r7, #2]
 8006258:	400b      	ands	r3, r1
 800625a:	431a      	orrs	r2, r3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	619a      	str	r2, [r3, #24]
}
 8006260:	bf00      	nop
 8006262:	3714      	adds	r7, #20
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	4603      	mov	r3, r0
 8006274:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006278:	695a      	ldr	r2, [r3, #20]
 800627a:	88fb      	ldrh	r3, [r7, #6]
 800627c:	4013      	ands	r3, r2
 800627e:	2b00      	cmp	r3, #0
 8006280:	d006      	beq.n	8006290 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006282:	4a05      	ldr	r2, [pc, #20]	; (8006298 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006284:	88fb      	ldrh	r3, [r7, #6]
 8006286:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006288:	88fb      	ldrh	r3, [r7, #6]
 800628a:	4618      	mov	r0, r3
 800628c:	f7fd feee 	bl	800406c <HAL_GPIO_EXTI_Callback>
  }
}
 8006290:	bf00      	nop
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	40010400 	.word	0x40010400

0800629c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b082      	sub	sp, #8
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d101      	bne.n	80062ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	e081      	b.n	80063b2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d106      	bne.n	80062c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	f7fe fb9c 	bl	8004a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2224      	movs	r2, #36	; 0x24
 80062cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681a      	ldr	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f022 0201 	bic.w	r2, r2, #1
 80062de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685a      	ldr	r2, [r3, #4]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80062ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	689a      	ldr	r2, [r3, #8]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80062fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b01      	cmp	r3, #1
 8006304:	d107      	bne.n	8006316 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	e006      	b.n	8006324 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	689a      	ldr	r2, [r3, #8]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006322:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	2b02      	cmp	r3, #2
 800632a:	d104      	bne.n	8006336 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006334:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	687a      	ldr	r2, [r7, #4]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006344:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006348:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	68da      	ldr	r2, [r3, #12]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006358:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	691a      	ldr	r2, [r3, #16]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	695b      	ldr	r3, [r3, #20]
 8006362:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	430a      	orrs	r2, r1
 8006372:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	69d9      	ldr	r1, [r3, #28]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1a      	ldr	r2, [r3, #32]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f042 0201 	orr.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	607a      	str	r2, [r7, #4]
 80063c6:	461a      	mov	r2, r3
 80063c8:	460b      	mov	r3, r1
 80063ca:	817b      	strh	r3, [r7, #10]
 80063cc:	4613      	mov	r3, r2
 80063ce:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b20      	cmp	r3, #32
 80063da:	f040 80da 	bne.w	8006592 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d101      	bne.n	80063ec <HAL_I2C_Master_Transmit+0x30>
 80063e8:	2302      	movs	r3, #2
 80063ea:	e0d3      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1d8>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2201      	movs	r2, #1
 80063f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80063f4:	f7fe ff70 	bl	80052d8 <HAL_GetTick>
 80063f8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	9300      	str	r3, [sp, #0]
 80063fe:	2319      	movs	r3, #25
 8006400:	2201      	movs	r2, #1
 8006402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 fcbc 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e0be      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2221      	movs	r2, #33	; 0x21
 800641a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2210      	movs	r2, #16
 8006422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	687a      	ldr	r2, [r7, #4]
 8006430:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	893a      	ldrh	r2, [r7, #8]
 8006436:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2200      	movs	r2, #0
 800643c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006442:	b29b      	uxth	r3, r3
 8006444:	2bff      	cmp	r3, #255	; 0xff
 8006446:	d90e      	bls.n	8006466 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	22ff      	movs	r2, #255	; 0xff
 800644c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006452:	b2da      	uxtb	r2, r3
 8006454:	8979      	ldrh	r1, [r7, #10]
 8006456:	4b51      	ldr	r3, [pc, #324]	; (800659c <HAL_I2C_Master_Transmit+0x1e0>)
 8006458:	9300      	str	r3, [sp, #0]
 800645a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 feb2 	bl	80071c8 <I2C_TransferConfig>
 8006464:	e06c      	b.n	8006540 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800646a:	b29a      	uxth	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006474:	b2da      	uxtb	r2, r3
 8006476:	8979      	ldrh	r1, [r7, #10]
 8006478:	4b48      	ldr	r3, [pc, #288]	; (800659c <HAL_I2C_Master_Transmit+0x1e0>)
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006480:	68f8      	ldr	r0, [r7, #12]
 8006482:	f000 fea1 	bl	80071c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006486:	e05b      	b.n	8006540 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	6a39      	ldr	r1, [r7, #32]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 fcb9 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006492:	4603      	mov	r3, r0
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	e07b      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064a0:	781a      	ldrb	r2, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ac:	1c5a      	adds	r2, r3, #1
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064b6:	b29b      	uxth	r3, r3
 80064b8:	3b01      	subs	r3, #1
 80064ba:	b29a      	uxth	r2, r3
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d034      	beq.n	8006540 <HAL_I2C_Master_Transmit+0x184>
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d130      	bne.n	8006540 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	9300      	str	r3, [sp, #0]
 80064e2:	6a3b      	ldr	r3, [r7, #32]
 80064e4:	2200      	movs	r2, #0
 80064e6:	2180      	movs	r1, #128	; 0x80
 80064e8:	68f8      	ldr	r0, [r7, #12]
 80064ea:	f000 fc4b 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80064ee:	4603      	mov	r3, r0
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d001      	beq.n	80064f8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	e04d      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2bff      	cmp	r3, #255	; 0xff
 8006500:	d90e      	bls.n	8006520 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	22ff      	movs	r2, #255	; 0xff
 8006506:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800650c:	b2da      	uxtb	r2, r3
 800650e:	8979      	ldrh	r1, [r7, #10]
 8006510:	2300      	movs	r3, #0
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006518:	68f8      	ldr	r0, [r7, #12]
 800651a:	f000 fe55 	bl	80071c8 <I2C_TransferConfig>
 800651e:	e00f      	b.n	8006540 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006524:	b29a      	uxth	r2, r3
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800652e:	b2da      	uxtb	r2, r3
 8006530:	8979      	ldrh	r1, [r7, #10]
 8006532:	2300      	movs	r3, #0
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f000 fe44 	bl	80071c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006544:	b29b      	uxth	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d19e      	bne.n	8006488 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800654a:	697a      	ldr	r2, [r7, #20]
 800654c:	6a39      	ldr	r1, [r7, #32]
 800654e:	68f8      	ldr	r0, [r7, #12]
 8006550:	f000 fc98 	bl	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006554:	4603      	mov	r3, r0
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e01a      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2220      	movs	r2, #32
 8006564:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6859      	ldr	r1, [r3, #4]
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	4b0b      	ldr	r3, [pc, #44]	; (80065a0 <HAL_I2C_Master_Transmit+0x1e4>)
 8006572:	400b      	ands	r3, r1
 8006574:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2200      	movs	r2, #0
 8006582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	e000      	b.n	8006594 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006592:	2302      	movs	r3, #2
  }
}
 8006594:	4618      	mov	r0, r3
 8006596:	3718      	adds	r7, #24
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	80002000 	.word	0x80002000
 80065a0:	fe00e800 	.word	0xfe00e800

080065a4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af02      	add	r7, sp, #8
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	607a      	str	r2, [r7, #4]
 80065ae:	461a      	mov	r2, r3
 80065b0:	460b      	mov	r3, r1
 80065b2:	817b      	strh	r3, [r7, #10]
 80065b4:	4613      	mov	r3, r2
 80065b6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	2b20      	cmp	r3, #32
 80065c2:	f040 80db 	bne.w	800677c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_I2C_Master_Receive+0x30>
 80065d0:	2302      	movs	r3, #2
 80065d2:	e0d4      	b.n	800677e <HAL_I2C_Master_Receive+0x1da>
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2201      	movs	r2, #1
 80065d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065dc:	f7fe fe7c 	bl	80052d8 <HAL_GetTick>
 80065e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	2319      	movs	r3, #25
 80065e8:	2201      	movs	r2, #1
 80065ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 fbc8 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d001      	beq.n	80065fe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80065fa:	2301      	movs	r3, #1
 80065fc:	e0bf      	b.n	800677e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2222      	movs	r2, #34	; 0x22
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2210      	movs	r2, #16
 800660a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	2200      	movs	r2, #0
 8006612:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	893a      	ldrh	r2, [r7, #8]
 800661e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2200      	movs	r2, #0
 8006624:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	2bff      	cmp	r3, #255	; 0xff
 800662e:	d90e      	bls.n	800664e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	22ff      	movs	r2, #255	; 0xff
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800663a:	b2da      	uxtb	r2, r3
 800663c:	8979      	ldrh	r1, [r7, #10]
 800663e:	4b52      	ldr	r3, [pc, #328]	; (8006788 <HAL_I2C_Master_Receive+0x1e4>)
 8006640:	9300      	str	r3, [sp, #0]
 8006642:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fdbe 	bl	80071c8 <I2C_TransferConfig>
 800664c:	e06d      	b.n	800672a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006652:	b29a      	uxth	r2, r3
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800665c:	b2da      	uxtb	r2, r3
 800665e:	8979      	ldrh	r1, [r7, #10]
 8006660:	4b49      	ldr	r3, [pc, #292]	; (8006788 <HAL_I2C_Master_Receive+0x1e4>)
 8006662:	9300      	str	r3, [sp, #0]
 8006664:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f000 fdad 	bl	80071c8 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800666e:	e05c      	b.n	800672a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	6a39      	ldr	r1, [r7, #32]
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fc41 	bl	8006efc <I2C_WaitOnRXNEFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8006680:	2301      	movs	r3, #1
 8006682:	e07c      	b.n	800677e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	b2d2      	uxtb	r2, r2
 8006690:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006696:	1c5a      	adds	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a0:	3b01      	subs	r3, #1
 80066a2:	b29a      	uxth	r2, r3
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	3b01      	subs	r3, #1
 80066b0:	b29a      	uxth	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d034      	beq.n	800672a <HAL_I2C_Master_Receive+0x186>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d130      	bne.n	800672a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	6a3b      	ldr	r3, [r7, #32]
 80066ce:	2200      	movs	r2, #0
 80066d0:	2180      	movs	r1, #128	; 0x80
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fb56 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e04d      	b.n	800677e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2bff      	cmp	r3, #255	; 0xff
 80066ea:	d90e      	bls.n	800670a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	22ff      	movs	r2, #255	; 0xff
 80066f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066f6:	b2da      	uxtb	r2, r3
 80066f8:	8979      	ldrh	r1, [r7, #10]
 80066fa:	2300      	movs	r3, #0
 80066fc:	9300      	str	r3, [sp, #0]
 80066fe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fd60 	bl	80071c8 <I2C_TransferConfig>
 8006708:	e00f      	b.n	800672a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800670e:	b29a      	uxth	r2, r3
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006718:	b2da      	uxtb	r2, r3
 800671a:	8979      	ldrh	r1, [r7, #10]
 800671c:	2300      	movs	r3, #0
 800671e:	9300      	str	r3, [sp, #0]
 8006720:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fd4f 	bl	80071c8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800672e:	b29b      	uxth	r3, r3
 8006730:	2b00      	cmp	r3, #0
 8006732:	d19d      	bne.n	8006670 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006734:	697a      	ldr	r2, [r7, #20]
 8006736:	6a39      	ldr	r1, [r7, #32]
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f000 fba3 	bl	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e01a      	b.n	800677e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2220      	movs	r2, #32
 800674e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	6859      	ldr	r1, [r3, #4]
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	4b0c      	ldr	r3, [pc, #48]	; (800678c <HAL_I2C_Master_Receive+0x1e8>)
 800675c:	400b      	ands	r3, r1
 800675e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2220      	movs	r2, #32
 8006764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2200      	movs	r2, #0
 8006774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006778:	2300      	movs	r3, #0
 800677a:	e000      	b.n	800677e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800677c:	2302      	movs	r3, #2
  }
}
 800677e:	4618      	mov	r0, r3
 8006780:	3718      	adds	r7, #24
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	80002400 	.word	0x80002400
 800678c:	fe00e800 	.word	0xfe00e800

08006790 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b088      	sub	sp, #32
 8006794:	af02      	add	r7, sp, #8
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	4608      	mov	r0, r1
 800679a:	4611      	mov	r1, r2
 800679c:	461a      	mov	r2, r3
 800679e:	4603      	mov	r3, r0
 80067a0:	817b      	strh	r3, [r7, #10]
 80067a2:	460b      	mov	r3, r1
 80067a4:	813b      	strh	r3, [r7, #8]
 80067a6:	4613      	mov	r3, r2
 80067a8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067b0:	b2db      	uxtb	r3, r3
 80067b2:	2b20      	cmp	r3, #32
 80067b4:	f040 80f9 	bne.w	80069aa <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d002      	beq.n	80067c4 <HAL_I2C_Mem_Write+0x34>
 80067be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d105      	bne.n	80067d0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067ca:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80067cc:	2301      	movs	r3, #1
 80067ce:	e0ed      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067d6:	2b01      	cmp	r3, #1
 80067d8:	d101      	bne.n	80067de <HAL_I2C_Mem_Write+0x4e>
 80067da:	2302      	movs	r3, #2
 80067dc:	e0e6      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2201      	movs	r2, #1
 80067e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80067e6:	f7fe fd77 	bl	80052d8 <HAL_GetTick>
 80067ea:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	2319      	movs	r3, #25
 80067f2:	2201      	movs	r2, #1
 80067f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067f8:	68f8      	ldr	r0, [r7, #12]
 80067fa:	f000 fac3 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 80067fe:	4603      	mov	r3, r0
 8006800:	2b00      	cmp	r3, #0
 8006802:	d001      	beq.n	8006808 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e0d1      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	2221      	movs	r2, #33	; 0x21
 800680c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	2240      	movs	r2, #64	; 0x40
 8006814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2200      	movs	r2, #0
 800681c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	6a3a      	ldr	r2, [r7, #32]
 8006822:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006828:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2200      	movs	r2, #0
 800682e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006830:	88f8      	ldrh	r0, [r7, #6]
 8006832:	893a      	ldrh	r2, [r7, #8]
 8006834:	8979      	ldrh	r1, [r7, #10]
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	9301      	str	r3, [sp, #4]
 800683a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683c:	9300      	str	r3, [sp, #0]
 800683e:	4603      	mov	r3, r0
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f000 f9d3 	bl	8006bec <I2C_RequestMemoryWrite>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d005      	beq.n	8006858 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2200      	movs	r2, #0
 8006850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	e0a9      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800685c:	b29b      	uxth	r3, r3
 800685e:	2bff      	cmp	r3, #255	; 0xff
 8006860:	d90e      	bls.n	8006880 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	22ff      	movs	r2, #255	; 0xff
 8006866:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800686c:	b2da      	uxtb	r2, r3
 800686e:	8979      	ldrh	r1, [r7, #10]
 8006870:	2300      	movs	r3, #0
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fca5 	bl	80071c8 <I2C_TransferConfig>
 800687e:	e00f      	b.n	80068a0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006884:	b29a      	uxth	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800688e:	b2da      	uxtb	r2, r3
 8006890:	8979      	ldrh	r1, [r7, #10]
 8006892:	2300      	movs	r3, #0
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 fc94 	bl	80071c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 faad 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e07b      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068b8:	781a      	ldrb	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068dc:	3b01      	subs	r3, #1
 80068de:	b29a      	uxth	r2, r3
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e8:	b29b      	uxth	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d034      	beq.n	8006958 <HAL_I2C_Mem_Write+0x1c8>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d130      	bne.n	8006958 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80068f6:	697b      	ldr	r3, [r7, #20]
 80068f8:	9300      	str	r3, [sp, #0]
 80068fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068fc:	2200      	movs	r2, #0
 80068fe:	2180      	movs	r1, #128	; 0x80
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fa3f 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e04d      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006914:	b29b      	uxth	r3, r3
 8006916:	2bff      	cmp	r3, #255	; 0xff
 8006918:	d90e      	bls.n	8006938 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	22ff      	movs	r2, #255	; 0xff
 800691e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006924:	b2da      	uxtb	r2, r3
 8006926:	8979      	ldrh	r1, [r7, #10]
 8006928:	2300      	movs	r3, #0
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 fc49 	bl	80071c8 <I2C_TransferConfig>
 8006936:	e00f      	b.n	8006958 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800693c:	b29a      	uxth	r2, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006946:	b2da      	uxtb	r2, r3
 8006948:	8979      	ldrh	r1, [r7, #10]
 800694a:	2300      	movs	r3, #0
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 fc38 	bl	80071c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800695c:	b29b      	uxth	r3, r3
 800695e:	2b00      	cmp	r3, #0
 8006960:	d19e      	bne.n	80068a0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006962:	697a      	ldr	r2, [r7, #20]
 8006964:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006966:	68f8      	ldr	r0, [r7, #12]
 8006968:	f000 fa8c 	bl	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006972:	2301      	movs	r3, #1
 8006974:	e01a      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	2220      	movs	r2, #32
 800697c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6859      	ldr	r1, [r3, #4]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	4b0a      	ldr	r3, [pc, #40]	; (80069b4 <HAL_I2C_Mem_Write+0x224>)
 800698a:	400b      	ands	r3, r1
 800698c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	2220      	movs	r2, #32
 8006992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2200      	movs	r2, #0
 800699a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2200      	movs	r2, #0
 80069a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e000      	b.n	80069ac <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80069aa:	2302      	movs	r3, #2
  }
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3718      	adds	r7, #24
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	fe00e800 	.word	0xfe00e800

080069b8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af02      	add	r7, sp, #8
 80069be:	60f8      	str	r0, [r7, #12]
 80069c0:	4608      	mov	r0, r1
 80069c2:	4611      	mov	r1, r2
 80069c4:	461a      	mov	r2, r3
 80069c6:	4603      	mov	r3, r0
 80069c8:	817b      	strh	r3, [r7, #10]
 80069ca:	460b      	mov	r3, r1
 80069cc:	813b      	strh	r3, [r7, #8]
 80069ce:	4613      	mov	r3, r2
 80069d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80069d8:	b2db      	uxtb	r3, r3
 80069da:	2b20      	cmp	r3, #32
 80069dc:	f040 80fd 	bne.w	8006bda <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d002      	beq.n	80069ec <HAL_I2C_Mem_Read+0x34>
 80069e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d105      	bne.n	80069f8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069f2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80069f4:	2301      	movs	r3, #1
 80069f6:	e0f1      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d101      	bne.n	8006a06 <HAL_I2C_Mem_Read+0x4e>
 8006a02:	2302      	movs	r3, #2
 8006a04:	e0ea      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	2201      	movs	r2, #1
 8006a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a0e:	f7fe fc63 	bl	80052d8 <HAL_GetTick>
 8006a12:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	2319      	movs	r3, #25
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a20:	68f8      	ldr	r0, [r7, #12]
 8006a22:	f000 f9af 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006a26:	4603      	mov	r3, r0
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d001      	beq.n	8006a30 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a2c:	2301      	movs	r3, #1
 8006a2e:	e0d5      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2222      	movs	r2, #34	; 0x22
 8006a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2240      	movs	r2, #64	; 0x40
 8006a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2200      	movs	r2, #0
 8006a44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a3a      	ldr	r2, [r7, #32]
 8006a4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006a50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2200      	movs	r2, #0
 8006a56:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006a58:	88f8      	ldrh	r0, [r7, #6]
 8006a5a:	893a      	ldrh	r2, [r7, #8]
 8006a5c:	8979      	ldrh	r1, [r7, #10]
 8006a5e:	697b      	ldr	r3, [r7, #20]
 8006a60:	9301      	str	r3, [sp, #4]
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	4603      	mov	r3, r0
 8006a68:	68f8      	ldr	r0, [r7, #12]
 8006a6a:	f000 f913 	bl	8006c94 <I2C_RequestMemoryRead>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d005      	beq.n	8006a80 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006a7c:	2301      	movs	r3, #1
 8006a7e:	e0ad      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29b      	uxth	r3, r3
 8006a86:	2bff      	cmp	r3, #255	; 0xff
 8006a88:	d90e      	bls.n	8006aa8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	22ff      	movs	r2, #255	; 0xff
 8006a8e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a94:	b2da      	uxtb	r2, r3
 8006a96:	8979      	ldrh	r1, [r7, #10]
 8006a98:	4b52      	ldr	r3, [pc, #328]	; (8006be4 <HAL_I2C_Mem_Read+0x22c>)
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006aa0:	68f8      	ldr	r0, [r7, #12]
 8006aa2:	f000 fb91 	bl	80071c8 <I2C_TransferConfig>
 8006aa6:	e00f      	b.n	8006ac8 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aac:	b29a      	uxth	r2, r3
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab6:	b2da      	uxtb	r2, r3
 8006ab8:	8979      	ldrh	r1, [r7, #10]
 8006aba:	4b4a      	ldr	r3, [pc, #296]	; (8006be4 <HAL_I2C_Mem_Read+0x22c>)
 8006abc:	9300      	str	r3, [sp, #0]
 8006abe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f000 fb80 	bl	80071c8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ace:	2200      	movs	r2, #0
 8006ad0:	2104      	movs	r1, #4
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 f956 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006ade:	2301      	movs	r3, #1
 8006ae0:	e07c      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aec:	b2d2      	uxtb	r2, r2
 8006aee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afe:	3b01      	subs	r3, #1
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d034      	beq.n	8006b88 <HAL_I2C_Mem_Read+0x1d0>
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d130      	bne.n	8006b88 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	2180      	movs	r1, #128	; 0x80
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f927 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e04d      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2bff      	cmp	r3, #255	; 0xff
 8006b48:	d90e      	bls.n	8006b68 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	22ff      	movs	r2, #255	; 0xff
 8006b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b54:	b2da      	uxtb	r2, r3
 8006b56:	8979      	ldrh	r1, [r7, #10]
 8006b58:	2300      	movs	r3, #0
 8006b5a:	9300      	str	r3, [sp, #0]
 8006b5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b60:	68f8      	ldr	r0, [r7, #12]
 8006b62:	f000 fb31 	bl	80071c8 <I2C_TransferConfig>
 8006b66:	e00f      	b.n	8006b88 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b76:	b2da      	uxtb	r2, r3
 8006b78:	8979      	ldrh	r1, [r7, #10]
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	9300      	str	r3, [sp, #0]
 8006b7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b82:	68f8      	ldr	r0, [r7, #12]
 8006b84:	f000 fb20 	bl	80071c8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d19a      	bne.n	8006ac8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b92:	697a      	ldr	r2, [r7, #20]
 8006b94:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b96:	68f8      	ldr	r0, [r7, #12]
 8006b98:	f000 f974 	bl	8006e84 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006b9c:	4603      	mov	r3, r0
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d001      	beq.n	8006ba6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e01a      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2220      	movs	r2, #32
 8006bac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	6859      	ldr	r1, [r3, #4]
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	4b0b      	ldr	r3, [pc, #44]	; (8006be8 <HAL_I2C_Mem_Read+0x230>)
 8006bba:	400b      	ands	r3, r1
 8006bbc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2220      	movs	r2, #32
 8006bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	e000      	b.n	8006bdc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006bda:	2302      	movs	r3, #2
  }
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	3718      	adds	r7, #24
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}
 8006be4:	80002400 	.word	0x80002400
 8006be8:	fe00e800 	.word	0xfe00e800

08006bec <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b086      	sub	sp, #24
 8006bf0:	af02      	add	r7, sp, #8
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	4608      	mov	r0, r1
 8006bf6:	4611      	mov	r1, r2
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	817b      	strh	r3, [r7, #10]
 8006bfe:	460b      	mov	r3, r1
 8006c00:	813b      	strh	r3, [r7, #8]
 8006c02:	4613      	mov	r3, r2
 8006c04:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	b2da      	uxtb	r2, r3
 8006c0a:	8979      	ldrh	r1, [r7, #10]
 8006c0c:	4b20      	ldr	r3, [pc, #128]	; (8006c90 <I2C_RequestMemoryWrite+0xa4>)
 8006c0e:	9300      	str	r3, [sp, #0]
 8006c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fad7 	bl	80071c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c1a:	69fa      	ldr	r2, [r7, #28]
 8006c1c:	69b9      	ldr	r1, [r7, #24]
 8006c1e:	68f8      	ldr	r0, [r7, #12]
 8006c20:	f000 f8f0 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d001      	beq.n	8006c2e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e02c      	b.n	8006c88 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c2e:	88fb      	ldrh	r3, [r7, #6]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d105      	bne.n	8006c40 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c34:	893b      	ldrh	r3, [r7, #8]
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	629a      	str	r2, [r3, #40]	; 0x28
 8006c3e:	e015      	b.n	8006c6c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c40:	893b      	ldrh	r3, [r7, #8]
 8006c42:	0a1b      	lsrs	r3, r3, #8
 8006c44:	b29b      	uxth	r3, r3
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c4e:	69fa      	ldr	r2, [r7, #28]
 8006c50:	69b9      	ldr	r1, [r7, #24]
 8006c52:	68f8      	ldr	r0, [r7, #12]
 8006c54:	f000 f8d6 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c58:	4603      	mov	r3, r0
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d001      	beq.n	8006c62 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	e012      	b.n	8006c88 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c62:	893b      	ldrh	r3, [r7, #8]
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	9300      	str	r3, [sp, #0]
 8006c70:	69bb      	ldr	r3, [r7, #24]
 8006c72:	2200      	movs	r2, #0
 8006c74:	2180      	movs	r1, #128	; 0x80
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 f884 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d001      	beq.n	8006c86 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006c82:	2301      	movs	r3, #1
 8006c84:	e000      	b.n	8006c88 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006c86:	2300      	movs	r3, #0
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3710      	adds	r7, #16
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	80002000 	.word	0x80002000

08006c94 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b086      	sub	sp, #24
 8006c98:	af02      	add	r7, sp, #8
 8006c9a:	60f8      	str	r0, [r7, #12]
 8006c9c:	4608      	mov	r0, r1
 8006c9e:	4611      	mov	r1, r2
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	817b      	strh	r3, [r7, #10]
 8006ca6:	460b      	mov	r3, r1
 8006ca8:	813b      	strh	r3, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006cae:	88fb      	ldrh	r3, [r7, #6]
 8006cb0:	b2da      	uxtb	r2, r3
 8006cb2:	8979      	ldrh	r1, [r7, #10]
 8006cb4:	4b20      	ldr	r3, [pc, #128]	; (8006d38 <I2C_RequestMemoryRead+0xa4>)
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	2300      	movs	r3, #0
 8006cba:	68f8      	ldr	r0, [r7, #12]
 8006cbc:	f000 fa84 	bl	80071c8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc0:	69fa      	ldr	r2, [r7, #28]
 8006cc2:	69b9      	ldr	r1, [r7, #24]
 8006cc4:	68f8      	ldr	r0, [r7, #12]
 8006cc6:	f000 f89d 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d001      	beq.n	8006cd4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e02c      	b.n	8006d2e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006cd4:	88fb      	ldrh	r3, [r7, #6]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d105      	bne.n	8006ce6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cda:	893b      	ldrh	r3, [r7, #8]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	629a      	str	r2, [r3, #40]	; 0x28
 8006ce4:	e015      	b.n	8006d12 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006ce6:	893b      	ldrh	r3, [r7, #8]
 8006ce8:	0a1b      	lsrs	r3, r3, #8
 8006cea:	b29b      	uxth	r3, r3
 8006cec:	b2da      	uxtb	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cf4:	69fa      	ldr	r2, [r7, #28]
 8006cf6:	69b9      	ldr	r1, [r7, #24]
 8006cf8:	68f8      	ldr	r0, [r7, #12]
 8006cfa:	f000 f883 	bl	8006e04 <I2C_WaitOnTXISFlagUntilTimeout>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d001      	beq.n	8006d08 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e012      	b.n	8006d2e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d08:	893b      	ldrh	r3, [r7, #8]
 8006d0a:	b2da      	uxtb	r2, r3
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d12:	69fb      	ldr	r3, [r7, #28]
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	69bb      	ldr	r3, [r7, #24]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	2140      	movs	r1, #64	; 0x40
 8006d1c:	68f8      	ldr	r0, [r7, #12]
 8006d1e:	f000 f831 	bl	8006d84 <I2C_WaitOnFlagUntilTimeout>
 8006d22:	4603      	mov	r3, r0
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d001      	beq.n	8006d2c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e000      	b.n	8006d2e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006d2c:	2300      	movs	r3, #0
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3710      	adds	r7, #16
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	80002000 	.word	0x80002000

08006d3c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	b083      	sub	sp, #12
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	699b      	ldr	r3, [r3, #24]
 8006d4a:	f003 0302 	and.w	r3, r3, #2
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d103      	bne.n	8006d5a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2200      	movs	r2, #0
 8006d58:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	699b      	ldr	r3, [r3, #24]
 8006d60:	f003 0301 	and.w	r3, r3, #1
 8006d64:	2b01      	cmp	r3, #1
 8006d66:	d007      	beq.n	8006d78 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0201 	orr.w	r2, r2, #1
 8006d76:	619a      	str	r2, [r3, #24]
  }
}
 8006d78:	bf00      	nop
 8006d7a:	370c      	adds	r7, #12
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d82:	4770      	bx	lr

08006d84 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	60f8      	str	r0, [r7, #12]
 8006d8c:	60b9      	str	r1, [r7, #8]
 8006d8e:	603b      	str	r3, [r7, #0]
 8006d90:	4613      	mov	r3, r2
 8006d92:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d94:	e022      	b.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9c:	d01e      	beq.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d9e:	f7fe fa9b 	bl	80052d8 <HAL_GetTick>
 8006da2:	4602      	mov	r2, r0
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	683a      	ldr	r2, [r7, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d302      	bcc.n	8006db4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d113      	bne.n	8006ddc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db8:	f043 0220 	orr.w	r2, r3, #32
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e00f      	b.n	8006dfc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	699a      	ldr	r2, [r3, #24]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	4013      	ands	r3, r2
 8006de6:	68ba      	ldr	r2, [r7, #8]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	bf0c      	ite	eq
 8006dec:	2301      	moveq	r3, #1
 8006dee:	2300      	movne	r3, #0
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	461a      	mov	r2, r3
 8006df4:	79fb      	ldrb	r3, [r7, #7]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d0cd      	beq.n	8006d96 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3710      	adds	r7, #16
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b084      	sub	sp, #16
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e10:	e02c      	b.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	68b9      	ldr	r1, [r7, #8]
 8006e16:	68f8      	ldr	r0, [r7, #12]
 8006e18:	f000 f8ea 	bl	8006ff0 <I2C_IsErrorOccurred>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e22:	2301      	movs	r3, #1
 8006e24:	e02a      	b.n	8006e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d01e      	beq.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e2e:	f7fe fa53 	bl	80052d8 <HAL_GetTick>
 8006e32:	4602      	mov	r2, r0
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	68ba      	ldr	r2, [r7, #8]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d302      	bcc.n	8006e44 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d113      	bne.n	8006e6c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e48:	f043 0220 	orr.w	r2, r3, #32
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2220      	movs	r2, #32
 8006e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	e007      	b.n	8006e7c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	f003 0302 	and.w	r3, r3, #2
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d1cb      	bne.n	8006e12 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	3710      	adds	r7, #16
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bd80      	pop	{r7, pc}

08006e84 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b084      	sub	sp, #16
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e90:	e028      	b.n	8006ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e92:	687a      	ldr	r2, [r7, #4]
 8006e94:	68b9      	ldr	r1, [r7, #8]
 8006e96:	68f8      	ldr	r0, [r7, #12]
 8006e98:	f000 f8aa 	bl	8006ff0 <I2C_IsErrorOccurred>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d001      	beq.n	8006ea6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e026      	b.n	8006ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fe fa17 	bl	80052d8 <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d113      	bne.n	8006ee4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e007      	b.n	8006ef4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	f003 0320 	and.w	r3, r3, #32
 8006eee:	2b20      	cmp	r3, #32
 8006ef0:	d1cf      	bne.n	8006e92 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f08:	e064      	b.n	8006fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f86e 	bl	8006ff0 <I2C_IsErrorOccurred>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e062      	b.n	8006fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	f003 0320 	and.w	r3, r3, #32
 8006f28:	2b20      	cmp	r3, #32
 8006f2a:	d138      	bne.n	8006f9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	699b      	ldr	r3, [r3, #24]
 8006f32:	f003 0304 	and.w	r3, r3, #4
 8006f36:	2b04      	cmp	r3, #4
 8006f38:	d105      	bne.n	8006f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	e04e      	b.n	8006fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	699b      	ldr	r3, [r3, #24]
 8006f4c:	f003 0310 	and.w	r3, r3, #16
 8006f50:	2b10      	cmp	r3, #16
 8006f52:	d107      	bne.n	8006f64 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2210      	movs	r2, #16
 8006f5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	2204      	movs	r2, #4
 8006f60:	645a      	str	r2, [r3, #68]	; 0x44
 8006f62:	e002      	b.n	8006f6a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2200      	movs	r2, #0
 8006f68:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	6859      	ldr	r1, [r3, #4]
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681a      	ldr	r2, [r3, #0]
 8006f7c:	4b1b      	ldr	r3, [pc, #108]	; (8006fec <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8006f7e:	400b      	ands	r3, r1
 8006f80:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2220      	movs	r2, #32
 8006f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	e022      	b.n	8006fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f9e:	f7fe f99b 	bl	80052d8 <HAL_GetTick>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	1ad3      	subs	r3, r2, r3
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	429a      	cmp	r2, r3
 8006fac:	d302      	bcc.n	8006fb4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d10f      	bne.n	8006fd4 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb8:	f043 0220 	orr.w	r2, r3, #32
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2220      	movs	r2, #32
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e007      	b.n	8006fe4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	699b      	ldr	r3, [r3, #24]
 8006fda:	f003 0304 	and.w	r3, r3, #4
 8006fde:	2b04      	cmp	r3, #4
 8006fe0:	d193      	bne.n	8006f0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006fe2:	2300      	movs	r3, #0
}
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	3710      	adds	r7, #16
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}
 8006fec:	fe00e800 	.word	0xfe00e800

08006ff0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b08a      	sub	sp, #40	; 0x28
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800700a:	2300      	movs	r3, #0
 800700c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	f003 0310 	and.w	r3, r3, #16
 8007018:	2b00      	cmp	r3, #0
 800701a:	d075      	beq.n	8007108 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	2210      	movs	r2, #16
 8007022:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007024:	e056      	b.n	80070d4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800702c:	d052      	beq.n	80070d4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800702e:	f7fe f953 	bl	80052d8 <HAL_GetTick>
 8007032:	4602      	mov	r2, r0
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	1ad3      	subs	r3, r2, r3
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	429a      	cmp	r2, r3
 800703c:	d302      	bcc.n	8007044 <I2C_IsErrorOccurred+0x54>
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d147      	bne.n	80070d4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800704e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007056:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	699b      	ldr	r3, [r3, #24]
 800705e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007062:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007066:	d12e      	bne.n	80070c6 <I2C_IsErrorOccurred+0xd6>
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800706e:	d02a      	beq.n	80070c6 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8007070:	7cfb      	ldrb	r3, [r7, #19]
 8007072:	2b20      	cmp	r3, #32
 8007074:	d027      	beq.n	80070c6 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	685a      	ldr	r2, [r3, #4]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007084:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007086:	f7fe f927 	bl	80052d8 <HAL_GetTick>
 800708a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800708c:	e01b      	b.n	80070c6 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800708e:	f7fe f923 	bl	80052d8 <HAL_GetTick>
 8007092:	4602      	mov	r2, r0
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	1ad3      	subs	r3, r2, r3
 8007098:	2b19      	cmp	r3, #25
 800709a:	d914      	bls.n	80070c6 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070a0:	f043 0220 	orr.w	r2, r3, #32
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2220      	movs	r2, #32
 80070ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	2200      	movs	r2, #0
 80070b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	2200      	movs	r2, #0
 80070bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80070c0:	2301      	movs	r3, #1
 80070c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b20      	cmp	r3, #32
 80070d2:	d1dc      	bne.n	800708e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	699b      	ldr	r3, [r3, #24]
 80070da:	f003 0320 	and.w	r3, r3, #32
 80070de:	2b20      	cmp	r3, #32
 80070e0:	d003      	beq.n	80070ea <I2C_IsErrorOccurred+0xfa>
 80070e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d09d      	beq.n	8007026 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80070ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d103      	bne.n	80070fa <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2220      	movs	r2, #32
 80070f8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	f043 0304 	orr.w	r3, r3, #4
 8007100:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	699b      	ldr	r3, [r3, #24]
 800710e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007110:	69bb      	ldr	r3, [r7, #24]
 8007112:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00b      	beq.n	8007132 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f44f 7280 	mov.w	r2, #256	; 0x100
 800712a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007138:	2b00      	cmp	r3, #0
 800713a:	d00b      	beq.n	8007154 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800713c:	6a3b      	ldr	r3, [r7, #32]
 800713e:	f043 0308 	orr.w	r3, r3, #8
 8007142:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800714c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007154:	69bb      	ldr	r3, [r7, #24]
 8007156:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800715a:	2b00      	cmp	r3, #0
 800715c:	d00b      	beq.n	8007176 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	f043 0302 	orr.w	r3, r3, #2
 8007164:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800716e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8007176:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800717a:	2b00      	cmp	r3, #0
 800717c:	d01c      	beq.n	80071b8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800717e:	68f8      	ldr	r0, [r7, #12]
 8007180:	f7ff fddc 	bl	8006d3c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b0d      	ldr	r3, [pc, #52]	; (80071c4 <I2C_IsErrorOccurred+0x1d4>)
 8007190:	400b      	ands	r3, r1
 8007192:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007198:	6a3b      	ldr	r3, [r7, #32]
 800719a:	431a      	orrs	r2, r3
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80071b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80071bc:	4618      	mov	r0, r3
 80071be:	3728      	adds	r7, #40	; 0x28
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bd80      	pop	{r7, pc}
 80071c4:	fe00e800 	.word	0xfe00e800

080071c8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	607b      	str	r3, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	817b      	strh	r3, [r7, #10]
 80071d6:	4613      	mov	r3, r2
 80071d8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071da:	897b      	ldrh	r3, [r7, #10]
 80071dc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071e0:	7a7b      	ldrb	r3, [r7, #9]
 80071e2:	041b      	lsls	r3, r3, #16
 80071e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071e8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	4313      	orrs	r3, r2
 80071f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071f6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	685a      	ldr	r2, [r3, #4]
 80071fe:	6a3b      	ldr	r3, [r7, #32]
 8007200:	0d5b      	lsrs	r3, r3, #21
 8007202:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007206:	4b08      	ldr	r3, [pc, #32]	; (8007228 <I2C_TransferConfig+0x60>)
 8007208:	430b      	orrs	r3, r1
 800720a:	43db      	mvns	r3, r3
 800720c:	ea02 0103 	and.w	r1, r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	697a      	ldr	r2, [r7, #20]
 8007216:	430a      	orrs	r2, r1
 8007218:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800721a:	bf00      	nop
 800721c:	371c      	adds	r7, #28
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	03ff63ff 	.word	0x03ff63ff

0800722c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
 8007234:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b20      	cmp	r3, #32
 8007240:	d138      	bne.n	80072b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800724c:	2302      	movs	r3, #2
 800724e:	e032      	b.n	80072b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2224      	movs	r2, #36	; 0x24
 800725c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f022 0201 	bic.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800727e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	6819      	ldr	r1, [r3, #0]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	683a      	ldr	r2, [r7, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0201 	orr.w	r2, r2, #1
 800729e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2220      	movs	r2, #32
 80072a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80072b0:	2300      	movs	r3, #0
 80072b2:	e000      	b.n	80072b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80072b4:	2302      	movs	r3, #2
  }
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	370c      	adds	r7, #12
 80072ba:	46bd      	mov	sp, r7
 80072bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c0:	4770      	bx	lr

080072c2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80072c2:	b480      	push	{r7}
 80072c4:	b085      	sub	sp, #20
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d139      	bne.n	800734c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072de:	2b01      	cmp	r3, #1
 80072e0:	d101      	bne.n	80072e6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80072e2:	2302      	movs	r3, #2
 80072e4:	e033      	b.n	800734e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2201      	movs	r2, #1
 80072ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	2224      	movs	r2, #36	; 0x24
 80072f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f022 0201 	bic.w	r2, r2, #1
 8007304:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007314:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	68fa      	ldr	r2, [r7, #12]
 800731c:	4313      	orrs	r3, r2
 800731e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68fa      	ldr	r2, [r7, #12]
 8007326:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	f042 0201 	orr.w	r2, r2, #1
 8007336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2220      	movs	r2, #32
 800733c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	2200      	movs	r2, #0
 8007344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	e000      	b.n	800734e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800734c:	2302      	movs	r3, #2
  }
}
 800734e:	4618      	mov	r0, r3
 8007350:	3714      	adds	r7, #20
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr

0800735a <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800735a:	b580      	push	{r7, lr}
 800735c:	b084      	sub	sp, #16
 800735e:	af00      	add	r7, sp, #0
 8007360:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d101      	bne.n	800736c <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007368:	2301      	movs	r3, #1
 800736a:	e041      	b.n	80073f0 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007374:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f245 5255 	movw	r2, #21845	; 0x5555
 800737e:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	6852      	ldr	r2, [r2, #4]
 8007388:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	6892      	ldr	r2, [r2, #8]
 8007392:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007394:	f7fd ffa0 	bl	80052d8 <HAL_GetTick>
 8007398:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800739a:	e00f      	b.n	80073bc <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800739c:	f7fd ff9c 	bl	80052d8 <HAL_GetTick>
 80073a0:	4602      	mov	r2, r0
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	1ad3      	subs	r3, r2, r3
 80073a6:	2b31      	cmp	r3, #49	; 0x31
 80073a8:	d908      	bls.n	80073bc <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68db      	ldr	r3, [r3, #12]
 80073b0:	f003 0307 	and.w	r3, r3, #7
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d001      	beq.n	80073bc <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 80073b8:	2303      	movs	r3, #3
 80073ba:	e019      	b.n	80073f0 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0307 	and.w	r3, r3, #7
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e8      	bne.n	800739c <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	691a      	ldr	r2, [r3, #16]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d005      	beq.n	80073e4 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	68d2      	ldr	r2, [r2, #12]
 80073e0:	611a      	str	r2, [r3, #16]
 80073e2:	e004      	b.n	80073ee <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 80073ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073ee:	2300      	movs	r3, #0
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007408:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	460b      	mov	r3, r1
 8007422:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d10c      	bne.n	8007444 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 800742a:	4b13      	ldr	r3, [pc, #76]	; (8007478 <HAL_PWR_EnterSLEEPMode+0x60>)
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007432:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007436:	d10e      	bne.n	8007456 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8007438:	f000 f8b6 	bl	80075a8 <HAL_PWREx_DisableLowPowerRunMode>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d009      	beq.n	8007456 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8007442:	e016      	b.n	8007472 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8007444:	4b0c      	ldr	r3, [pc, #48]	; (8007478 <HAL_PWR_EnterSLEEPMode+0x60>)
 8007446:	695b      	ldr	r3, [r3, #20]
 8007448:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800744c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007450:	d001      	beq.n	8007456 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8007452:	f000 f899 	bl	8007588 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8007456:	4b09      	ldr	r3, [pc, #36]	; (800747c <HAL_PWR_EnterSLEEPMode+0x64>)
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	4a08      	ldr	r2, [pc, #32]	; (800747c <HAL_PWR_EnterSLEEPMode+0x64>)
 800745c:	f023 0304 	bic.w	r3, r3, #4
 8007460:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8007462:	78fb      	ldrb	r3, [r7, #3]
 8007464:	2b01      	cmp	r3, #1
 8007466:	d101      	bne.n	800746c <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8007468:	bf30      	wfi
 800746a:	e002      	b.n	8007472 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 800746c:	bf40      	sev
    __WFE();
 800746e:	bf20      	wfe
    __WFE();
 8007470:	bf20      	wfe
  }

}
 8007472:	3708      	adds	r7, #8
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	40007000 	.word	0x40007000
 800747c:	e000ed00 	.word	0xe000ed00

08007480 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8007480:	b480      	push	{r7}
 8007482:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8007484:	4b05      	ldr	r3, [pc, #20]	; (800749c <HAL_PWR_EnableSleepOnExit+0x1c>)
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	4a04      	ldr	r2, [pc, #16]	; (800749c <HAL_PWR_EnableSleepOnExit+0x1c>)
 800748a:	f043 0302 	orr.w	r3, r3, #2
 800748e:	6113      	str	r3, [r2, #16]
}
 8007490:	bf00      	nop
 8007492:	46bd      	mov	sp, r7
 8007494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007498:	4770      	bx	lr
 800749a:	bf00      	nop
 800749c:	e000ed00 	.word	0xe000ed00

080074a0 <HAL_PWR_DisableSleepOnExit>:
  * @note Clear SLEEPONEXIT bit of SCR register. When this bit is set, the processor
  *       re-enters SLEEP mode when an interruption handling is over.
  * @retval None
  */
void HAL_PWR_DisableSleepOnExit(void)
{
 80074a0:	b480      	push	{r7}
 80074a2:	af00      	add	r7, sp, #0
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80074a4:	4b05      	ldr	r3, [pc, #20]	; (80074bc <HAL_PWR_DisableSleepOnExit+0x1c>)
 80074a6:	691b      	ldr	r3, [r3, #16]
 80074a8:	4a04      	ldr	r2, [pc, #16]	; (80074bc <HAL_PWR_DisableSleepOnExit+0x1c>)
 80074aa:	f023 0302 	bic.w	r3, r3, #2
 80074ae:	6113      	str	r3, [r2, #16]
}
 80074b0:	bf00      	nop
 80074b2:	46bd      	mov	sp, r7
 80074b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b8:	4770      	bx	lr
 80074ba:	bf00      	nop
 80074bc:	e000ed00 	.word	0xe000ed00

080074c0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80074c0:	b480      	push	{r7}
 80074c2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80074c4:	4b04      	ldr	r3, [pc, #16]	; (80074d8 <HAL_PWREx_GetVoltageRange+0x18>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	46bd      	mov	sp, r7
 80074d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d4:	4770      	bx	lr
 80074d6:	bf00      	nop
 80074d8:	40007000 	.word	0x40007000

080074dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80074dc:	b480      	push	{r7}
 80074de:	b085      	sub	sp, #20
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074ea:	d130      	bne.n	800754e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80074ec:	4b23      	ldr	r3, [pc, #140]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80074f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074f8:	d038      	beq.n	800756c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80074fa:	4b20      	ldr	r3, [pc, #128]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007502:	4a1e      	ldr	r2, [pc, #120]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007504:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007508:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800750a:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2232      	movs	r2, #50	; 0x32
 8007510:	fb02 f303 	mul.w	r3, r2, r3
 8007514:	4a1b      	ldr	r2, [pc, #108]	; (8007584 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8007516:	fba2 2303 	umull	r2, r3, r2, r3
 800751a:	0c9b      	lsrs	r3, r3, #18
 800751c:	3301      	adds	r3, #1
 800751e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007520:	e002      	b.n	8007528 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	3b01      	subs	r3, #1
 8007526:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007528:	4b14      	ldr	r3, [pc, #80]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800752a:	695b      	ldr	r3, [r3, #20]
 800752c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007530:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007534:	d102      	bne.n	800753c <HAL_PWREx_ControlVoltageScaling+0x60>
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1f2      	bne.n	8007522 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800753c:	4b0f      	ldr	r3, [pc, #60]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800753e:	695b      	ldr	r3, [r3, #20]
 8007540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007544:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007548:	d110      	bne.n	800756c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800754a:	2303      	movs	r3, #3
 800754c:	e00f      	b.n	800756e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800754e:	4b0b      	ldr	r3, [pc, #44]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007556:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800755a:	d007      	beq.n	800756c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800755c:	4b07      	ldr	r3, [pc, #28]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007564:	4a05      	ldr	r2, [pc, #20]	; (800757c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800756a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800756c:	2300      	movs	r3, #0
}
 800756e:	4618      	mov	r0, r3
 8007570:	3714      	adds	r7, #20
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40007000 	.word	0x40007000
 8007580:	2000000c 	.word	0x2000000c
 8007584:	431bde83 	.word	0x431bde83

08007588 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800758c:	4b05      	ldr	r3, [pc, #20]	; (80075a4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a04      	ldr	r2, [pc, #16]	; (80075a4 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8007592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007596:	6013      	str	r3, [r2, #0]
}
 8007598:	bf00      	nop
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40007000 	.word	0x40007000

080075a8 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 80075ae:	4b17      	ldr	r3, [pc, #92]	; (800760c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	4a16      	ldr	r2, [pc, #88]	; (800760c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80075b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80075b8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80075ba:	4b15      	ldr	r3, [pc, #84]	; (8007610 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	2232      	movs	r2, #50	; 0x32
 80075c0:	fb02 f303 	mul.w	r3, r2, r3
 80075c4:	4a13      	ldr	r2, [pc, #76]	; (8007614 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80075c6:	fba2 2303 	umull	r2, r3, r2, r3
 80075ca:	0c9b      	lsrs	r3, r3, #18
 80075cc:	3301      	adds	r3, #1
 80075ce:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80075d0:	e002      	b.n	80075d8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80075da:	695b      	ldr	r3, [r3, #20]
 80075dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e4:	d102      	bne.n	80075ec <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d1f2      	bne.n	80075d2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80075ec:	4b07      	ldr	r3, [pc, #28]	; (800760c <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80075ee:	695b      	ldr	r3, [r3, #20]
 80075f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075f8:	d101      	bne.n	80075fe <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80075fa:	2303      	movs	r3, #3
 80075fc:	e000      	b.n	8007600 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80075fe:	2300      	movs	r3, #0
}
 8007600:	4618      	mov	r0, r3
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	40007000 	.word	0x40007000
 8007610:	2000000c 	.word	0x2000000c
 8007614:	431bde83 	.word	0x431bde83

08007618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b088      	sub	sp, #32
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d102      	bne.n	800762c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007626:	2301      	movs	r3, #1
 8007628:	f000 bc02 	b.w	8007e30 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800762c:	4b96      	ldr	r3, [pc, #600]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f003 030c 	and.w	r3, r3, #12
 8007634:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007636:	4b94      	ldr	r3, [pc, #592]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f003 0303 	and.w	r3, r3, #3
 800763e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f003 0310 	and.w	r3, r3, #16
 8007648:	2b00      	cmp	r3, #0
 800764a:	f000 80e4 	beq.w	8007816 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800764e:	69bb      	ldr	r3, [r7, #24]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d007      	beq.n	8007664 <HAL_RCC_OscConfig+0x4c>
 8007654:	69bb      	ldr	r3, [r7, #24]
 8007656:	2b0c      	cmp	r3, #12
 8007658:	f040 808b 	bne.w	8007772 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800765c:	697b      	ldr	r3, [r7, #20]
 800765e:	2b01      	cmp	r3, #1
 8007660:	f040 8087 	bne.w	8007772 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007664:	4b88      	ldr	r3, [pc, #544]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f003 0302 	and.w	r3, r3, #2
 800766c:	2b00      	cmp	r3, #0
 800766e:	d005      	beq.n	800767c <HAL_RCC_OscConfig+0x64>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d101      	bne.n	800767c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007678:	2301      	movs	r3, #1
 800767a:	e3d9      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	6a1a      	ldr	r2, [r3, #32]
 8007680:	4b81      	ldr	r3, [pc, #516]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f003 0308 	and.w	r3, r3, #8
 8007688:	2b00      	cmp	r3, #0
 800768a:	d004      	beq.n	8007696 <HAL_RCC_OscConfig+0x7e>
 800768c:	4b7e      	ldr	r3, [pc, #504]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007694:	e005      	b.n	80076a2 <HAL_RCC_OscConfig+0x8a>
 8007696:	4b7c      	ldr	r3, [pc, #496]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007698:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800769c:	091b      	lsrs	r3, r3, #4
 800769e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80076a2:	4293      	cmp	r3, r2
 80076a4:	d223      	bcs.n	80076ee <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	4618      	mov	r0, r3
 80076ac:	f000 fd8c 	bl	80081c8 <RCC_SetFlashLatencyFromMSIRange>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	e3ba      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076ba:	4b73      	ldr	r3, [pc, #460]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a72      	ldr	r2, [pc, #456]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076c0:	f043 0308 	orr.w	r3, r3, #8
 80076c4:	6013      	str	r3, [r2, #0]
 80076c6:	4b70      	ldr	r3, [pc, #448]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	496d      	ldr	r1, [pc, #436]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076d4:	4313      	orrs	r3, r2
 80076d6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076d8:	4b6b      	ldr	r3, [pc, #428]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	021b      	lsls	r3, r3, #8
 80076e6:	4968      	ldr	r1, [pc, #416]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076e8:	4313      	orrs	r3, r2
 80076ea:	604b      	str	r3, [r1, #4]
 80076ec:	e025      	b.n	800773a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076ee:	4b66      	ldr	r3, [pc, #408]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a65      	ldr	r2, [pc, #404]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076f4:	f043 0308 	orr.w	r3, r3, #8
 80076f8:	6013      	str	r3, [r2, #0]
 80076fa:	4b63      	ldr	r3, [pc, #396]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	4960      	ldr	r1, [pc, #384]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007708:	4313      	orrs	r3, r2
 800770a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800770c:	4b5e      	ldr	r3, [pc, #376]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	69db      	ldr	r3, [r3, #28]
 8007718:	021b      	lsls	r3, r3, #8
 800771a:	495b      	ldr	r1, [pc, #364]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 800771c:	4313      	orrs	r3, r2
 800771e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007720:	69bb      	ldr	r3, [r7, #24]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d109      	bne.n	800773a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6a1b      	ldr	r3, [r3, #32]
 800772a:	4618      	mov	r0, r3
 800772c:	f000 fd4c 	bl	80081c8 <RCC_SetFlashLatencyFromMSIRange>
 8007730:	4603      	mov	r3, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	d001      	beq.n	800773a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8007736:	2301      	movs	r3, #1
 8007738:	e37a      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800773a:	f000 fc81 	bl	8008040 <HAL_RCC_GetSysClockFreq>
 800773e:	4602      	mov	r2, r0
 8007740:	4b51      	ldr	r3, [pc, #324]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	091b      	lsrs	r3, r3, #4
 8007746:	f003 030f 	and.w	r3, r3, #15
 800774a:	4950      	ldr	r1, [pc, #320]	; (800788c <HAL_RCC_OscConfig+0x274>)
 800774c:	5ccb      	ldrb	r3, [r1, r3]
 800774e:	f003 031f 	and.w	r3, r3, #31
 8007752:	fa22 f303 	lsr.w	r3, r2, r3
 8007756:	4a4e      	ldr	r2, [pc, #312]	; (8007890 <HAL_RCC_OscConfig+0x278>)
 8007758:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800775a:	4b4e      	ldr	r3, [pc, #312]	; (8007894 <HAL_RCC_OscConfig+0x27c>)
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4618      	mov	r0, r3
 8007760:	f7fd fd6a 	bl	8005238 <HAL_InitTick>
 8007764:	4603      	mov	r3, r0
 8007766:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007768:	7bfb      	ldrb	r3, [r7, #15]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d052      	beq.n	8007814 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800776e:	7bfb      	ldrb	r3, [r7, #15]
 8007770:	e35e      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	d032      	beq.n	80077e0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800777a:	4b43      	ldr	r3, [pc, #268]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a42      	ldr	r2, [pc, #264]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007780:	f043 0301 	orr.w	r3, r3, #1
 8007784:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007786:	f7fd fda7 	bl	80052d8 <HAL_GetTick>
 800778a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800778c:	e008      	b.n	80077a0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800778e:	f7fd fda3 	bl	80052d8 <HAL_GetTick>
 8007792:	4602      	mov	r2, r0
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	1ad3      	subs	r3, r2, r3
 8007798:	2b02      	cmp	r3, #2
 800779a:	d901      	bls.n	80077a0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e347      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80077a0:	4b39      	ldr	r3, [pc, #228]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f003 0302 	and.w	r3, r3, #2
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d0f0      	beq.n	800778e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80077ac:	4b36      	ldr	r3, [pc, #216]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a35      	ldr	r2, [pc, #212]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077b2:	f043 0308 	orr.w	r3, r3, #8
 80077b6:	6013      	str	r3, [r2, #0]
 80077b8:	4b33      	ldr	r3, [pc, #204]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6a1b      	ldr	r3, [r3, #32]
 80077c4:	4930      	ldr	r1, [pc, #192]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077c6:	4313      	orrs	r3, r2
 80077c8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80077ca:	4b2f      	ldr	r3, [pc, #188]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	69db      	ldr	r3, [r3, #28]
 80077d6:	021b      	lsls	r3, r3, #8
 80077d8:	492b      	ldr	r1, [pc, #172]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	604b      	str	r3, [r1, #4]
 80077de:	e01a      	b.n	8007816 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80077e0:	4b29      	ldr	r3, [pc, #164]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a28      	ldr	r2, [pc, #160]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 80077e6:	f023 0301 	bic.w	r3, r3, #1
 80077ea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80077ec:	f7fd fd74 	bl	80052d8 <HAL_GetTick>
 80077f0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80077f2:	e008      	b.n	8007806 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077f4:	f7fd fd70 	bl	80052d8 <HAL_GetTick>
 80077f8:	4602      	mov	r2, r0
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	1ad3      	subs	r3, r2, r3
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d901      	bls.n	8007806 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007802:	2303      	movs	r3, #3
 8007804:	e314      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007806:	4b20      	ldr	r3, [pc, #128]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1f0      	bne.n	80077f4 <HAL_RCC_OscConfig+0x1dc>
 8007812:	e000      	b.n	8007816 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007814:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f003 0301 	and.w	r3, r3, #1
 800781e:	2b00      	cmp	r3, #0
 8007820:	d073      	beq.n	800790a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007822:	69bb      	ldr	r3, [r7, #24]
 8007824:	2b08      	cmp	r3, #8
 8007826:	d005      	beq.n	8007834 <HAL_RCC_OscConfig+0x21c>
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	2b0c      	cmp	r3, #12
 800782c:	d10e      	bne.n	800784c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	2b03      	cmp	r3, #3
 8007832:	d10b      	bne.n	800784c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007834:	4b14      	ldr	r3, [pc, #80]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d063      	beq.n	8007908 <HAL_RCC_OscConfig+0x2f0>
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d15f      	bne.n	8007908 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e2f1      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	685b      	ldr	r3, [r3, #4]
 8007850:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007854:	d106      	bne.n	8007864 <HAL_RCC_OscConfig+0x24c>
 8007856:	4b0c      	ldr	r3, [pc, #48]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4a0b      	ldr	r2, [pc, #44]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 800785c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007860:	6013      	str	r3, [r2, #0]
 8007862:	e025      	b.n	80078b0 <HAL_RCC_OscConfig+0x298>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800786c:	d114      	bne.n	8007898 <HAL_RCC_OscConfig+0x280>
 800786e:	4b06      	ldr	r3, [pc, #24]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	4a05      	ldr	r2, [pc, #20]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007874:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	4b03      	ldr	r3, [pc, #12]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a02      	ldr	r2, [pc, #8]	; (8007888 <HAL_RCC_OscConfig+0x270>)
 8007880:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007884:	6013      	str	r3, [r2, #0]
 8007886:	e013      	b.n	80078b0 <HAL_RCC_OscConfig+0x298>
 8007888:	40021000 	.word	0x40021000
 800788c:	0800feac 	.word	0x0800feac
 8007890:	2000000c 	.word	0x2000000c
 8007894:	20000010 	.word	0x20000010
 8007898:	4ba0      	ldr	r3, [pc, #640]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a9f      	ldr	r2, [pc, #636]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 800789e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	4b9d      	ldr	r3, [pc, #628]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a9c      	ldr	r2, [pc, #624]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80078aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d013      	beq.n	80078e0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fd fd0e 	bl	80052d8 <HAL_GetTick>
 80078bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078be:	e008      	b.n	80078d2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078c0:	f7fd fd0a 	bl	80052d8 <HAL_GetTick>
 80078c4:	4602      	mov	r2, r0
 80078c6:	693b      	ldr	r3, [r7, #16]
 80078c8:	1ad3      	subs	r3, r2, r3
 80078ca:	2b64      	cmp	r3, #100	; 0x64
 80078cc:	d901      	bls.n	80078d2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80078ce:	2303      	movs	r3, #3
 80078d0:	e2ae      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80078d2:	4b92      	ldr	r3, [pc, #584]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d0f0      	beq.n	80078c0 <HAL_RCC_OscConfig+0x2a8>
 80078de:	e014      	b.n	800790a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078e0:	f7fd fcfa 	bl	80052d8 <HAL_GetTick>
 80078e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078e6:	e008      	b.n	80078fa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80078e8:	f7fd fcf6 	bl	80052d8 <HAL_GetTick>
 80078ec:	4602      	mov	r2, r0
 80078ee:	693b      	ldr	r3, [r7, #16]
 80078f0:	1ad3      	subs	r3, r2, r3
 80078f2:	2b64      	cmp	r3, #100	; 0x64
 80078f4:	d901      	bls.n	80078fa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80078f6:	2303      	movs	r3, #3
 80078f8:	e29a      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80078fa:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f0      	bne.n	80078e8 <HAL_RCC_OscConfig+0x2d0>
 8007906:	e000      	b.n	800790a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007908:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d060      	beq.n	80079d8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	2b04      	cmp	r3, #4
 800791a:	d005      	beq.n	8007928 <HAL_RCC_OscConfig+0x310>
 800791c:	69bb      	ldr	r3, [r7, #24]
 800791e:	2b0c      	cmp	r3, #12
 8007920:	d119      	bne.n	8007956 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	2b02      	cmp	r3, #2
 8007926:	d116      	bne.n	8007956 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007928:	4b7c      	ldr	r3, [pc, #496]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007930:	2b00      	cmp	r3, #0
 8007932:	d005      	beq.n	8007940 <HAL_RCC_OscConfig+0x328>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d101      	bne.n	8007940 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800793c:	2301      	movs	r3, #1
 800793e:	e277      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007940:	4b76      	ldr	r3, [pc, #472]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	691b      	ldr	r3, [r3, #16]
 800794c:	061b      	lsls	r3, r3, #24
 800794e:	4973      	ldr	r1, [pc, #460]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007950:	4313      	orrs	r3, r2
 8007952:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007954:	e040      	b.n	80079d8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	68db      	ldr	r3, [r3, #12]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d023      	beq.n	80079a6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800795e:	4b6f      	ldr	r3, [pc, #444]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a6e      	ldr	r2, [pc, #440]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007968:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800796a:	f7fd fcb5 	bl	80052d8 <HAL_GetTick>
 800796e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007970:	e008      	b.n	8007984 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007972:	f7fd fcb1 	bl	80052d8 <HAL_GetTick>
 8007976:	4602      	mov	r2, r0
 8007978:	693b      	ldr	r3, [r7, #16]
 800797a:	1ad3      	subs	r3, r2, r3
 800797c:	2b02      	cmp	r3, #2
 800797e:	d901      	bls.n	8007984 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e255      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007984:	4b65      	ldr	r3, [pc, #404]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800798c:	2b00      	cmp	r3, #0
 800798e:	d0f0      	beq.n	8007972 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007990:	4b62      	ldr	r3, [pc, #392]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007992:	685b      	ldr	r3, [r3, #4]
 8007994:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	691b      	ldr	r3, [r3, #16]
 800799c:	061b      	lsls	r3, r3, #24
 800799e:	495f      	ldr	r1, [pc, #380]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80079a0:	4313      	orrs	r3, r2
 80079a2:	604b      	str	r3, [r1, #4]
 80079a4:	e018      	b.n	80079d8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80079a6:	4b5d      	ldr	r3, [pc, #372]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	4a5c      	ldr	r2, [pc, #368]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80079ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80079b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079b2:	f7fd fc91 	bl	80052d8 <HAL_GetTick>
 80079b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079b8:	e008      	b.n	80079cc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079ba:	f7fd fc8d 	bl	80052d8 <HAL_GetTick>
 80079be:	4602      	mov	r2, r0
 80079c0:	693b      	ldr	r3, [r7, #16]
 80079c2:	1ad3      	subs	r3, r2, r3
 80079c4:	2b02      	cmp	r3, #2
 80079c6:	d901      	bls.n	80079cc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80079c8:	2303      	movs	r3, #3
 80079ca:	e231      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80079cc:	4b53      	ldr	r3, [pc, #332]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d1f0      	bne.n	80079ba <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0308 	and.w	r3, r3, #8
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d03c      	beq.n	8007a5e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	695b      	ldr	r3, [r3, #20]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d01c      	beq.n	8007a26 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079ec:	4b4b      	ldr	r3, [pc, #300]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80079ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80079f2:	4a4a      	ldr	r2, [pc, #296]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 80079f4:	f043 0301 	orr.w	r3, r3, #1
 80079f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079fc:	f7fd fc6c 	bl	80052d8 <HAL_GetTick>
 8007a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a02:	e008      	b.n	8007a16 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a04:	f7fd fc68 	bl	80052d8 <HAL_GetTick>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	693b      	ldr	r3, [r7, #16]
 8007a0c:	1ad3      	subs	r3, r2, r3
 8007a0e:	2b02      	cmp	r3, #2
 8007a10:	d901      	bls.n	8007a16 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007a12:	2303      	movs	r3, #3
 8007a14:	e20c      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007a16:	4b41      	ldr	r3, [pc, #260]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a1c:	f003 0302 	and.w	r3, r3, #2
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d0ef      	beq.n	8007a04 <HAL_RCC_OscConfig+0x3ec>
 8007a24:	e01b      	b.n	8007a5e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a26:	4b3d      	ldr	r3, [pc, #244]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a2c:	4a3b      	ldr	r2, [pc, #236]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a2e:	f023 0301 	bic.w	r3, r3, #1
 8007a32:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a36:	f7fd fc4f 	bl	80052d8 <HAL_GetTick>
 8007a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a3c:	e008      	b.n	8007a50 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a3e:	f7fd fc4b 	bl	80052d8 <HAL_GetTick>
 8007a42:	4602      	mov	r2, r0
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	1ad3      	subs	r3, r2, r3
 8007a48:	2b02      	cmp	r3, #2
 8007a4a:	d901      	bls.n	8007a50 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007a4c:	2303      	movs	r3, #3
 8007a4e:	e1ef      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007a50:	4b32      	ldr	r3, [pc, #200]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a52:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007a56:	f003 0302 	and.w	r3, r3, #2
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1ef      	bne.n	8007a3e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 0304 	and.w	r3, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 80a6 	beq.w	8007bb8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007a70:	4b2a      	ldr	r3, [pc, #168]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10d      	bne.n	8007a98 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a7c:	4b27      	ldr	r3, [pc, #156]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a80:	4a26      	ldr	r2, [pc, #152]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a86:	6593      	str	r3, [r2, #88]	; 0x58
 8007a88:	4b24      	ldr	r3, [pc, #144]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007a8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a94:	2301      	movs	r3, #1
 8007a96:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007a98:	4b21      	ldr	r3, [pc, #132]	; (8007b20 <HAL_RCC_OscConfig+0x508>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d118      	bne.n	8007ad6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007aa4:	4b1e      	ldr	r3, [pc, #120]	; (8007b20 <HAL_RCC_OscConfig+0x508>)
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	4a1d      	ldr	r2, [pc, #116]	; (8007b20 <HAL_RCC_OscConfig+0x508>)
 8007aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007aae:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007ab0:	f7fd fc12 	bl	80052d8 <HAL_GetTick>
 8007ab4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007ab6:	e008      	b.n	8007aca <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ab8:	f7fd fc0e 	bl	80052d8 <HAL_GetTick>
 8007abc:	4602      	mov	r2, r0
 8007abe:	693b      	ldr	r3, [r7, #16]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d901      	bls.n	8007aca <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007ac6:	2303      	movs	r3, #3
 8007ac8:	e1b2      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007aca:	4b15      	ldr	r3, [pc, #84]	; (8007b20 <HAL_RCC_OscConfig+0x508>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d0f0      	beq.n	8007ab8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	689b      	ldr	r3, [r3, #8]
 8007ada:	2b01      	cmp	r3, #1
 8007adc:	d108      	bne.n	8007af0 <HAL_RCC_OscConfig+0x4d8>
 8007ade:	4b0f      	ldr	r3, [pc, #60]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ae4:	4a0d      	ldr	r2, [pc, #52]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007ae6:	f043 0301 	orr.w	r3, r3, #1
 8007aea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007aee:	e029      	b.n	8007b44 <HAL_RCC_OscConfig+0x52c>
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	2b05      	cmp	r3, #5
 8007af6:	d115      	bne.n	8007b24 <HAL_RCC_OscConfig+0x50c>
 8007af8:	4b08      	ldr	r3, [pc, #32]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afe:	4a07      	ldr	r2, [pc, #28]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007b00:	f043 0304 	orr.w	r3, r3, #4
 8007b04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b08:	4b04      	ldr	r3, [pc, #16]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007b0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b0e:	4a03      	ldr	r2, [pc, #12]	; (8007b1c <HAL_RCC_OscConfig+0x504>)
 8007b10:	f043 0301 	orr.w	r3, r3, #1
 8007b14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b18:	e014      	b.n	8007b44 <HAL_RCC_OscConfig+0x52c>
 8007b1a:	bf00      	nop
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	40007000 	.word	0x40007000
 8007b24:	4b9a      	ldr	r3, [pc, #616]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007b26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b2a:	4a99      	ldr	r2, [pc, #612]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007b34:	4b96      	ldr	r3, [pc, #600]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b3a:	4a95      	ldr	r2, [pc, #596]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007b3c:	f023 0304 	bic.w	r3, r3, #4
 8007b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d016      	beq.n	8007b7a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b4c:	f7fd fbc4 	bl	80052d8 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b52:	e00a      	b.n	8007b6a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b54:	f7fd fbc0 	bl	80052d8 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b62:	4293      	cmp	r3, r2
 8007b64:	d901      	bls.n	8007b6a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e162      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007b6a:	4b89      	ldr	r3, [pc, #548]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0ed      	beq.n	8007b54 <HAL_RCC_OscConfig+0x53c>
 8007b78:	e015      	b.n	8007ba6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b7a:	f7fd fbad 	bl	80052d8 <HAL_GetTick>
 8007b7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b80:	e00a      	b.n	8007b98 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007b82:	f7fd fba9 	bl	80052d8 <HAL_GetTick>
 8007b86:	4602      	mov	r2, r0
 8007b88:	693b      	ldr	r3, [r7, #16]
 8007b8a:	1ad3      	subs	r3, r2, r3
 8007b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d901      	bls.n	8007b98 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007b94:	2303      	movs	r3, #3
 8007b96:	e14b      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007b98:	4b7d      	ldr	r3, [pc, #500]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1ed      	bne.n	8007b82 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007ba6:	7ffb      	ldrb	r3, [r7, #31]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d105      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bac:	4b78      	ldr	r3, [pc, #480]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb0:	4a77      	ldr	r2, [pc, #476]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007bb2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007bb6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	f003 0320 	and.w	r3, r3, #32
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d03c      	beq.n	8007c3e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d01c      	beq.n	8007c06 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007bcc:	4b70      	ldr	r3, [pc, #448]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007bce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bd2:	4a6f      	ldr	r2, [pc, #444]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007bd4:	f043 0301 	orr.w	r3, r3, #1
 8007bd8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bdc:	f7fd fb7c 	bl	80052d8 <HAL_GetTick>
 8007be0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007be2:	e008      	b.n	8007bf6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007be4:	f7fd fb78 	bl	80052d8 <HAL_GetTick>
 8007be8:	4602      	mov	r2, r0
 8007bea:	693b      	ldr	r3, [r7, #16]
 8007bec:	1ad3      	subs	r3, r2, r3
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d901      	bls.n	8007bf6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007bf2:	2303      	movs	r3, #3
 8007bf4:	e11c      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007bf6:	4b66      	ldr	r3, [pc, #408]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0ef      	beq.n	8007be4 <HAL_RCC_OscConfig+0x5cc>
 8007c04:	e01b      	b.n	8007c3e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007c06:	4b62      	ldr	r3, [pc, #392]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007c08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c0c:	4a60      	ldr	r2, [pc, #384]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007c0e:	f023 0301 	bic.w	r3, r3, #1
 8007c12:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c16:	f7fd fb5f 	bl	80052d8 <HAL_GetTick>
 8007c1a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c1c:	e008      	b.n	8007c30 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007c1e:	f7fd fb5b 	bl	80052d8 <HAL_GetTick>
 8007c22:	4602      	mov	r2, r0
 8007c24:	693b      	ldr	r3, [r7, #16]
 8007c26:	1ad3      	subs	r3, r2, r3
 8007c28:	2b02      	cmp	r3, #2
 8007c2a:	d901      	bls.n	8007c30 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007c2c:	2303      	movs	r3, #3
 8007c2e:	e0ff      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007c30:	4b57      	ldr	r3, [pc, #348]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007c32:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007c36:	f003 0302 	and.w	r3, r3, #2
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1ef      	bne.n	8007c1e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 80f3 	beq.w	8007e2e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4c:	2b02      	cmp	r3, #2
 8007c4e:	f040 80c9 	bne.w	8007de4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007c52:	4b4f      	ldr	r3, [pc, #316]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007c54:	68db      	ldr	r3, [r3, #12]
 8007c56:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	f003 0203 	and.w	r2, r3, #3
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d12c      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c70:	3b01      	subs	r3, #1
 8007c72:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d123      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c78:	697b      	ldr	r3, [r7, #20]
 8007c7a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c82:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d11b      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007c88:	697b      	ldr	r3, [r7, #20]
 8007c8a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c92:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007c94:	429a      	cmp	r2, r3
 8007c96:	d113      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca2:	085b      	lsrs	r3, r3, #1
 8007ca4:	3b01      	subs	r3, #1
 8007ca6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d109      	bne.n	8007cc0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cb6:	085b      	lsrs	r3, r3, #1
 8007cb8:	3b01      	subs	r3, #1
 8007cba:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d06b      	beq.n	8007d98 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007cc0:	69bb      	ldr	r3, [r7, #24]
 8007cc2:	2b0c      	cmp	r3, #12
 8007cc4:	d062      	beq.n	8007d8c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007cc6:	4b32      	ldr	r3, [pc, #200]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d001      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007cd2:	2301      	movs	r3, #1
 8007cd4:	e0ac      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007cd6:	4b2e      	ldr	r3, [pc, #184]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	4a2d      	ldr	r2, [pc, #180]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ce0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ce2:	f7fd faf9 	bl	80052d8 <HAL_GetTick>
 8007ce6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007ce8:	e008      	b.n	8007cfc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cea:	f7fd faf5 	bl	80052d8 <HAL_GetTick>
 8007cee:	4602      	mov	r2, r0
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	1ad3      	subs	r3, r2, r3
 8007cf4:	2b02      	cmp	r3, #2
 8007cf6:	d901      	bls.n	8007cfc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e099      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007cfc:	4b24      	ldr	r3, [pc, #144]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d1f0      	bne.n	8007cea <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007d08:	4b21      	ldr	r3, [pc, #132]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007d0a:	68da      	ldr	r2, [r3, #12]
 8007d0c:	4b21      	ldr	r3, [pc, #132]	; (8007d94 <HAL_RCC_OscConfig+0x77c>)
 8007d0e:	4013      	ands	r3, r2
 8007d10:	687a      	ldr	r2, [r7, #4]
 8007d12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007d18:	3a01      	subs	r2, #1
 8007d1a:	0112      	lsls	r2, r2, #4
 8007d1c:	4311      	orrs	r1, r2
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d22:	0212      	lsls	r2, r2, #8
 8007d24:	4311      	orrs	r1, r2
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007d2a:	0852      	lsrs	r2, r2, #1
 8007d2c:	3a01      	subs	r2, #1
 8007d2e:	0552      	lsls	r2, r2, #21
 8007d30:	4311      	orrs	r1, r2
 8007d32:	687a      	ldr	r2, [r7, #4]
 8007d34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007d36:	0852      	lsrs	r2, r2, #1
 8007d38:	3a01      	subs	r2, #1
 8007d3a:	0652      	lsls	r2, r2, #25
 8007d3c:	4311      	orrs	r1, r2
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007d42:	06d2      	lsls	r2, r2, #27
 8007d44:	430a      	orrs	r2, r1
 8007d46:	4912      	ldr	r1, [pc, #72]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007d48:	4313      	orrs	r3, r2
 8007d4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007d4c:	4b10      	ldr	r3, [pc, #64]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4a0f      	ldr	r2, [pc, #60]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007d52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007d58:	4b0d      	ldr	r3, [pc, #52]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	4a0c      	ldr	r2, [pc, #48]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007d5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007d64:	f7fd fab8 	bl	80052d8 <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d6c:	f7fd fab4 	bl	80052d8 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e058      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d7e:	4b04      	ldr	r3, [pc, #16]	; (8007d90 <HAL_RCC_OscConfig+0x778>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0f0      	beq.n	8007d6c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007d8a:	e050      	b.n	8007e2e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e04f      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
 8007d90:	40021000 	.word	0x40021000
 8007d94:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007d98:	4b27      	ldr	r3, [pc, #156]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d144      	bne.n	8007e2e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007da4:	4b24      	ldr	r3, [pc, #144]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a23      	ldr	r2, [pc, #140]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007db0:	4b21      	ldr	r3, [pc, #132]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	4a20      	ldr	r2, [pc, #128]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007db6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007dbc:	f7fd fa8c 	bl	80052d8 <HAL_GetTick>
 8007dc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dc2:	e008      	b.n	8007dd6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dc4:	f7fd fa88 	bl	80052d8 <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	d901      	bls.n	8007dd6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007dd2:	2303      	movs	r3, #3
 8007dd4:	e02c      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007dd6:	4b18      	ldr	r3, [pc, #96]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d0f0      	beq.n	8007dc4 <HAL_RCC_OscConfig+0x7ac>
 8007de2:	e024      	b.n	8007e2e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007de4:	69bb      	ldr	r3, [r7, #24]
 8007de6:	2b0c      	cmp	r3, #12
 8007de8:	d01f      	beq.n	8007e2a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dea:	4b13      	ldr	r3, [pc, #76]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a12      	ldr	r2, [pc, #72]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007df0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007df4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007df6:	f7fd fa6f 	bl	80052d8 <HAL_GetTick>
 8007dfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007dfc:	e008      	b.n	8007e10 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007dfe:	f7fd fa6b 	bl	80052d8 <HAL_GetTick>
 8007e02:	4602      	mov	r2, r0
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	1ad3      	subs	r3, r2, r3
 8007e08:	2b02      	cmp	r3, #2
 8007e0a:	d901      	bls.n	8007e10 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007e0c:	2303      	movs	r3, #3
 8007e0e:	e00f      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e10:	4b09      	ldr	r3, [pc, #36]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d1f0      	bne.n	8007dfe <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007e1c:	4b06      	ldr	r3, [pc, #24]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007e1e:	68da      	ldr	r2, [r3, #12]
 8007e20:	4905      	ldr	r1, [pc, #20]	; (8007e38 <HAL_RCC_OscConfig+0x820>)
 8007e22:	4b06      	ldr	r3, [pc, #24]	; (8007e3c <HAL_RCC_OscConfig+0x824>)
 8007e24:	4013      	ands	r3, r2
 8007e26:	60cb      	str	r3, [r1, #12]
 8007e28:	e001      	b.n	8007e2e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	e000      	b.n	8007e30 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3720      	adds	r7, #32
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}
 8007e38:	40021000 	.word	0x40021000
 8007e3c:	feeefffc 	.word	0xfeeefffc

08007e40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d101      	bne.n	8007e54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007e50:	2301      	movs	r3, #1
 8007e52:	e0e7      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007e54:	4b75      	ldr	r3, [pc, #468]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0307 	and.w	r3, r3, #7
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d910      	bls.n	8007e84 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007e62:	4b72      	ldr	r3, [pc, #456]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f023 0207 	bic.w	r2, r3, #7
 8007e6a:	4970      	ldr	r1, [pc, #448]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007e6c:	683b      	ldr	r3, [r7, #0]
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007e72:	4b6e      	ldr	r3, [pc, #440]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0307 	and.w	r3, r3, #7
 8007e7a:	683a      	ldr	r2, [r7, #0]
 8007e7c:	429a      	cmp	r2, r3
 8007e7e:	d001      	beq.n	8007e84 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007e80:	2301      	movs	r3, #1
 8007e82:	e0cf      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f003 0302 	and.w	r3, r3, #2
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d010      	beq.n	8007eb2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	689a      	ldr	r2, [r3, #8]
 8007e94:	4b66      	ldr	r3, [pc, #408]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d908      	bls.n	8007eb2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ea0:	4b63      	ldr	r3, [pc, #396]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	689b      	ldr	r3, [r3, #8]
 8007eac:	4960      	ldr	r1, [pc, #384]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0301 	and.w	r3, r3, #1
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d04c      	beq.n	8007f58 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	2b03      	cmp	r3, #3
 8007ec4:	d107      	bne.n	8007ed6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ec6:	4b5a      	ldr	r3, [pc, #360]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d121      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e0a6      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d107      	bne.n	8007eee <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007ede:	4b54      	ldr	r3, [pc, #336]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d115      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007eea:	2301      	movs	r3, #1
 8007eec:	e09a      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d107      	bne.n	8007f06 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007ef6:	4b4e      	ldr	r3, [pc, #312]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0302 	and.w	r3, r3, #2
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d109      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e08e      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007f06:	4b4a      	ldr	r3, [pc, #296]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d101      	bne.n	8007f16 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e086      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007f16:	4b46      	ldr	r3, [pc, #280]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	f023 0203 	bic.w	r2, r3, #3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	4943      	ldr	r1, [pc, #268]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f28:	f7fd f9d6 	bl	80052d8 <HAL_GetTick>
 8007f2c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f2e:	e00a      	b.n	8007f46 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007f30:	f7fd f9d2 	bl	80052d8 <HAL_GetTick>
 8007f34:	4602      	mov	r2, r0
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	1ad3      	subs	r3, r2, r3
 8007f3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d901      	bls.n	8007f46 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007f42:	2303      	movs	r3, #3
 8007f44:	e06e      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007f46:	4b3a      	ldr	r3, [pc, #232]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007f48:	689b      	ldr	r3, [r3, #8]
 8007f4a:	f003 020c 	and.w	r2, r3, #12
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	429a      	cmp	r2, r3
 8007f56:	d1eb      	bne.n	8007f30 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f003 0302 	and.w	r3, r3, #2
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d010      	beq.n	8007f86 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	4b31      	ldr	r3, [pc, #196]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007f6a:	689b      	ldr	r3, [r3, #8]
 8007f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f70:	429a      	cmp	r2, r3
 8007f72:	d208      	bcs.n	8007f86 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f74:	4b2e      	ldr	r3, [pc, #184]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	689b      	ldr	r3, [r3, #8]
 8007f80:	492b      	ldr	r1, [pc, #172]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007f82:	4313      	orrs	r3, r2
 8007f84:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007f86:	4b29      	ldr	r3, [pc, #164]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 0307 	and.w	r3, r3, #7
 8007f8e:	683a      	ldr	r2, [r7, #0]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d210      	bcs.n	8007fb6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f94:	4b25      	ldr	r3, [pc, #148]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	f023 0207 	bic.w	r2, r3, #7
 8007f9c:	4923      	ldr	r1, [pc, #140]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007f9e:	683b      	ldr	r3, [r7, #0]
 8007fa0:	4313      	orrs	r3, r2
 8007fa2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fa4:	4b21      	ldr	r3, [pc, #132]	; (800802c <HAL_RCC_ClockConfig+0x1ec>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f003 0307 	and.w	r3, r3, #7
 8007fac:	683a      	ldr	r2, [r7, #0]
 8007fae:	429a      	cmp	r2, r3
 8007fb0:	d001      	beq.n	8007fb6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e036      	b.n	8008024 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d008      	beq.n	8007fd4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007fc2:	4b1b      	ldr	r3, [pc, #108]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007fc4:	689b      	ldr	r3, [r3, #8]
 8007fc6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	4918      	ldr	r1, [pc, #96]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f003 0308 	and.w	r3, r3, #8
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d009      	beq.n	8007ff4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007fe0:	4b13      	ldr	r3, [pc, #76]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	691b      	ldr	r3, [r3, #16]
 8007fec:	00db      	lsls	r3, r3, #3
 8007fee:	4910      	ldr	r1, [pc, #64]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007ff4:	f000 f824 	bl	8008040 <HAL_RCC_GetSysClockFreq>
 8007ff8:	4602      	mov	r2, r0
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <HAL_RCC_ClockConfig+0x1f0>)
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	091b      	lsrs	r3, r3, #4
 8008000:	f003 030f 	and.w	r3, r3, #15
 8008004:	490b      	ldr	r1, [pc, #44]	; (8008034 <HAL_RCC_ClockConfig+0x1f4>)
 8008006:	5ccb      	ldrb	r3, [r1, r3]
 8008008:	f003 031f 	and.w	r3, r3, #31
 800800c:	fa22 f303 	lsr.w	r3, r2, r3
 8008010:	4a09      	ldr	r2, [pc, #36]	; (8008038 <HAL_RCC_ClockConfig+0x1f8>)
 8008012:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008014:	4b09      	ldr	r3, [pc, #36]	; (800803c <HAL_RCC_ClockConfig+0x1fc>)
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f7fd f90d 	bl	8005238 <HAL_InitTick>
 800801e:	4603      	mov	r3, r0
 8008020:	72fb      	strb	r3, [r7, #11]

  return status;
 8008022:	7afb      	ldrb	r3, [r7, #11]
}
 8008024:	4618      	mov	r0, r3
 8008026:	3710      	adds	r7, #16
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}
 800802c:	40022000 	.word	0x40022000
 8008030:	40021000 	.word	0x40021000
 8008034:	0800feac 	.word	0x0800feac
 8008038:	2000000c 	.word	0x2000000c
 800803c:	20000010 	.word	0x20000010

08008040 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008040:	b480      	push	{r7}
 8008042:	b089      	sub	sp, #36	; 0x24
 8008044:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008046:	2300      	movs	r3, #0
 8008048:	61fb      	str	r3, [r7, #28]
 800804a:	2300      	movs	r3, #0
 800804c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800804e:	4b3e      	ldr	r3, [pc, #248]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	f003 030c 	and.w	r3, r3, #12
 8008056:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008058:	4b3b      	ldr	r3, [pc, #236]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 800805a:	68db      	ldr	r3, [r3, #12]
 800805c:	f003 0303 	and.w	r3, r3, #3
 8008060:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d005      	beq.n	8008074 <HAL_RCC_GetSysClockFreq+0x34>
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	2b0c      	cmp	r3, #12
 800806c:	d121      	bne.n	80080b2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2b01      	cmp	r3, #1
 8008072:	d11e      	bne.n	80080b2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008074:	4b34      	ldr	r3, [pc, #208]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0308 	and.w	r3, r3, #8
 800807c:	2b00      	cmp	r3, #0
 800807e:	d107      	bne.n	8008090 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008080:	4b31      	ldr	r3, [pc, #196]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 8008082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008086:	0a1b      	lsrs	r3, r3, #8
 8008088:	f003 030f 	and.w	r3, r3, #15
 800808c:	61fb      	str	r3, [r7, #28]
 800808e:	e005      	b.n	800809c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008090:	4b2d      	ldr	r3, [pc, #180]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	091b      	lsrs	r3, r3, #4
 8008096:	f003 030f 	and.w	r3, r3, #15
 800809a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800809c:	4a2b      	ldr	r2, [pc, #172]	; (800814c <HAL_RCC_GetSysClockFreq+0x10c>)
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080a4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80080a6:	693b      	ldr	r3, [r7, #16]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d10d      	bne.n	80080c8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80080b0:	e00a      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80080b2:	693b      	ldr	r3, [r7, #16]
 80080b4:	2b04      	cmp	r3, #4
 80080b6:	d102      	bne.n	80080be <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80080b8:	4b25      	ldr	r3, [pc, #148]	; (8008150 <HAL_RCC_GetSysClockFreq+0x110>)
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	e004      	b.n	80080c8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80080be:	693b      	ldr	r3, [r7, #16]
 80080c0:	2b08      	cmp	r3, #8
 80080c2:	d101      	bne.n	80080c8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80080c4:	4b23      	ldr	r3, [pc, #140]	; (8008154 <HAL_RCC_GetSysClockFreq+0x114>)
 80080c6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80080c8:	693b      	ldr	r3, [r7, #16]
 80080ca:	2b0c      	cmp	r3, #12
 80080cc:	d134      	bne.n	8008138 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80080ce:	4b1e      	ldr	r3, [pc, #120]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 80080d0:	68db      	ldr	r3, [r3, #12]
 80080d2:	f003 0303 	and.w	r3, r3, #3
 80080d6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d003      	beq.n	80080e6 <HAL_RCC_GetSysClockFreq+0xa6>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b03      	cmp	r3, #3
 80080e2:	d003      	beq.n	80080ec <HAL_RCC_GetSysClockFreq+0xac>
 80080e4:	e005      	b.n	80080f2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80080e6:	4b1a      	ldr	r3, [pc, #104]	; (8008150 <HAL_RCC_GetSysClockFreq+0x110>)
 80080e8:	617b      	str	r3, [r7, #20]
      break;
 80080ea:	e005      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80080ec:	4b19      	ldr	r3, [pc, #100]	; (8008154 <HAL_RCC_GetSysClockFreq+0x114>)
 80080ee:	617b      	str	r3, [r7, #20]
      break;
 80080f0:	e002      	b.n	80080f8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	617b      	str	r3, [r7, #20]
      break;
 80080f6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80080f8:	4b13      	ldr	r3, [pc, #76]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	091b      	lsrs	r3, r3, #4
 80080fe:	f003 0307 	and.w	r3, r3, #7
 8008102:	3301      	adds	r3, #1
 8008104:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008106:	4b10      	ldr	r3, [pc, #64]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 8008108:	68db      	ldr	r3, [r3, #12]
 800810a:	0a1b      	lsrs	r3, r3, #8
 800810c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008110:	697a      	ldr	r2, [r7, #20]
 8008112:	fb03 f202 	mul.w	r2, r3, r2
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	fbb2 f3f3 	udiv	r3, r2, r3
 800811c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800811e:	4b0a      	ldr	r3, [pc, #40]	; (8008148 <HAL_RCC_GetSysClockFreq+0x108>)
 8008120:	68db      	ldr	r3, [r3, #12]
 8008122:	0e5b      	lsrs	r3, r3, #25
 8008124:	f003 0303 	and.w	r3, r3, #3
 8008128:	3301      	adds	r3, #1
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800812e:	697a      	ldr	r2, [r7, #20]
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	fbb2 f3f3 	udiv	r3, r2, r3
 8008136:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008138:	69bb      	ldr	r3, [r7, #24]
}
 800813a:	4618      	mov	r0, r3
 800813c:	3724      	adds	r7, #36	; 0x24
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	40021000 	.word	0x40021000
 800814c:	0800fec4 	.word	0x0800fec4
 8008150:	00f42400 	.word	0x00f42400
 8008154:	007a1200 	.word	0x007a1200

08008158 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008158:	b480      	push	{r7}
 800815a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800815c:	4b03      	ldr	r3, [pc, #12]	; (800816c <HAL_RCC_GetHCLKFreq+0x14>)
 800815e:	681b      	ldr	r3, [r3, #0]
}
 8008160:	4618      	mov	r0, r3
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	2000000c 	.word	0x2000000c

08008170 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008174:	f7ff fff0 	bl	8008158 <HAL_RCC_GetHCLKFreq>
 8008178:	4602      	mov	r2, r0
 800817a:	4b06      	ldr	r3, [pc, #24]	; (8008194 <HAL_RCC_GetPCLK1Freq+0x24>)
 800817c:	689b      	ldr	r3, [r3, #8]
 800817e:	0a1b      	lsrs	r3, r3, #8
 8008180:	f003 0307 	and.w	r3, r3, #7
 8008184:	4904      	ldr	r1, [pc, #16]	; (8008198 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008186:	5ccb      	ldrb	r3, [r1, r3]
 8008188:	f003 031f 	and.w	r3, r3, #31
 800818c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008190:	4618      	mov	r0, r3
 8008192:	bd80      	pop	{r7, pc}
 8008194:	40021000 	.word	0x40021000
 8008198:	0800febc 	.word	0x0800febc

0800819c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80081a0:	f7ff ffda 	bl	8008158 <HAL_RCC_GetHCLKFreq>
 80081a4:	4602      	mov	r2, r0
 80081a6:	4b06      	ldr	r3, [pc, #24]	; (80081c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80081a8:	689b      	ldr	r3, [r3, #8]
 80081aa:	0adb      	lsrs	r3, r3, #11
 80081ac:	f003 0307 	and.w	r3, r3, #7
 80081b0:	4904      	ldr	r1, [pc, #16]	; (80081c4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80081b2:	5ccb      	ldrb	r3, [r1, r3]
 80081b4:	f003 031f 	and.w	r3, r3, #31
 80081b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80081bc:	4618      	mov	r0, r3
 80081be:	bd80      	pop	{r7, pc}
 80081c0:	40021000 	.word	0x40021000
 80081c4:	0800febc 	.word	0x0800febc

080081c8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80081d0:	2300      	movs	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80081d4:	4b2a      	ldr	r3, [pc, #168]	; (8008280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d003      	beq.n	80081e8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80081e0:	f7ff f96e 	bl	80074c0 <HAL_PWREx_GetVoltageRange>
 80081e4:	6178      	str	r0, [r7, #20]
 80081e6:	e014      	b.n	8008212 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80081e8:	4b25      	ldr	r3, [pc, #148]	; (8008280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081ec:	4a24      	ldr	r2, [pc, #144]	; (8008280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081f2:	6593      	str	r3, [r2, #88]	; 0x58
 80081f4:	4b22      	ldr	r3, [pc, #136]	; (8008280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80081f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081fc:	60fb      	str	r3, [r7, #12]
 80081fe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8008200:	f7ff f95e 	bl	80074c0 <HAL_PWREx_GetVoltageRange>
 8008204:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008206:	4b1e      	ldr	r3, [pc, #120]	; (8008280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800820a:	4a1d      	ldr	r2, [pc, #116]	; (8008280 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800820c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008210:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008218:	d10b      	bne.n	8008232 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2b80      	cmp	r3, #128	; 0x80
 800821e:	d919      	bls.n	8008254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2ba0      	cmp	r3, #160	; 0xa0
 8008224:	d902      	bls.n	800822c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008226:	2302      	movs	r3, #2
 8008228:	613b      	str	r3, [r7, #16]
 800822a:	e013      	b.n	8008254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800822c:	2301      	movs	r3, #1
 800822e:	613b      	str	r3, [r7, #16]
 8008230:	e010      	b.n	8008254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2b80      	cmp	r3, #128	; 0x80
 8008236:	d902      	bls.n	800823e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008238:	2303      	movs	r3, #3
 800823a:	613b      	str	r3, [r7, #16]
 800823c:	e00a      	b.n	8008254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2b80      	cmp	r3, #128	; 0x80
 8008242:	d102      	bne.n	800824a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008244:	2302      	movs	r3, #2
 8008246:	613b      	str	r3, [r7, #16]
 8008248:	e004      	b.n	8008254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2b70      	cmp	r3, #112	; 0x70
 800824e:	d101      	bne.n	8008254 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008250:	2301      	movs	r3, #1
 8008252:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8008254:	4b0b      	ldr	r3, [pc, #44]	; (8008284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f023 0207 	bic.w	r2, r3, #7
 800825c:	4909      	ldr	r1, [pc, #36]	; (8008284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800825e:	693b      	ldr	r3, [r7, #16]
 8008260:	4313      	orrs	r3, r2
 8008262:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8008264:	4b07      	ldr	r3, [pc, #28]	; (8008284 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	f003 0307 	and.w	r3, r3, #7
 800826c:	693a      	ldr	r2, [r7, #16]
 800826e:	429a      	cmp	r2, r3
 8008270:	d001      	beq.n	8008276 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8008272:	2301      	movs	r3, #1
 8008274:	e000      	b.n	8008278 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3718      	adds	r7, #24
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}
 8008280:	40021000 	.word	0x40021000
 8008284:	40022000 	.word	0x40022000

08008288 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b086      	sub	sp, #24
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008290:	2300      	movs	r3, #0
 8008292:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008294:	2300      	movs	r3, #0
 8008296:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d031      	beq.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082a8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80082ac:	d01a      	beq.n	80082e4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80082ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80082b2:	d814      	bhi.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x56>
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d009      	beq.n	80082cc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80082b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80082bc:	d10f      	bne.n	80082de <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80082be:	4b5d      	ldr	r3, [pc, #372]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	4a5c      	ldr	r2, [pc, #368]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082c8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80082ca:	e00c      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	3304      	adds	r3, #4
 80082d0:	2100      	movs	r1, #0
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 f9f0 	bl	80086b8 <RCCEx_PLLSAI1_Config>
 80082d8:	4603      	mov	r3, r0
 80082da:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80082dc:	e003      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	74fb      	strb	r3, [r7, #19]
      break;
 80082e2:	e000      	b.n	80082e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80082e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082e6:	7cfb      	ldrb	r3, [r7, #19]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10b      	bne.n	8008304 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80082ec:	4b51      	ldr	r3, [pc, #324]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082f2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fa:	494e      	ldr	r1, [pc, #312]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008302:	e001      	b.n	8008308 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008304:	7cfb      	ldrb	r3, [r7, #19]
 8008306:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 809e 	beq.w	8008452 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008316:	2300      	movs	r3, #0
 8008318:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800831a:	4b46      	ldr	r3, [pc, #280]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8008326:	2301      	movs	r3, #1
 8008328:	e000      	b.n	800832c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800832a:	2300      	movs	r3, #0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00d      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008330:	4b40      	ldr	r3, [pc, #256]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008332:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008334:	4a3f      	ldr	r2, [pc, #252]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800833a:	6593      	str	r3, [r2, #88]	; 0x58
 800833c:	4b3d      	ldr	r3, [pc, #244]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800833e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008340:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008344:	60bb      	str	r3, [r7, #8]
 8008346:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008348:	2301      	movs	r3, #1
 800834a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800834c:	4b3a      	ldr	r3, [pc, #232]	; (8008438 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a39      	ldr	r2, [pc, #228]	; (8008438 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008352:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008356:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008358:	f7fc ffbe 	bl	80052d8 <HAL_GetTick>
 800835c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800835e:	e009      	b.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008360:	f7fc ffba 	bl	80052d8 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b02      	cmp	r3, #2
 800836c:	d902      	bls.n	8008374 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	74fb      	strb	r3, [r7, #19]
        break;
 8008372:	e005      	b.n	8008380 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008374:	4b30      	ldr	r3, [pc, #192]	; (8008438 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0ef      	beq.n	8008360 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008380:	7cfb      	ldrb	r3, [r7, #19]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d15a      	bne.n	800843c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008386:	4b2b      	ldr	r3, [pc, #172]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800838c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008390:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008392:	697b      	ldr	r3, [r7, #20]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d01e      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800839c:	697a      	ldr	r2, [r7, #20]
 800839e:	429a      	cmp	r2, r3
 80083a0:	d019      	beq.n	80083d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80083a2:	4b24      	ldr	r3, [pc, #144]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80083ae:	4b21      	ldr	r3, [pc, #132]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083b4:	4a1f      	ldr	r2, [pc, #124]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80083be:	4b1d      	ldr	r3, [pc, #116]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c4:	4a1b      	ldr	r2, [pc, #108]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80083ce:	4a19      	ldr	r2, [pc, #100]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80083d0:	697b      	ldr	r3, [r7, #20]
 80083d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f003 0301 	and.w	r3, r3, #1
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d016      	beq.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083e0:	f7fc ff7a 	bl	80052d8 <HAL_GetTick>
 80083e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80083e6:	e00b      	b.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80083e8:	f7fc ff76 	bl	80052d8 <HAL_GetTick>
 80083ec:	4602      	mov	r2, r0
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	1ad3      	subs	r3, r2, r3
 80083f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d902      	bls.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80083fa:	2303      	movs	r3, #3
 80083fc:	74fb      	strb	r3, [r7, #19]
            break;
 80083fe:	e006      	b.n	800840e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008400:	4b0c      	ldr	r3, [pc, #48]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008406:	f003 0302 	and.w	r3, r3, #2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d0ec      	beq.n	80083e8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800840e:	7cfb      	ldrb	r3, [r7, #19]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d10b      	bne.n	800842c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008414:	4b07      	ldr	r3, [pc, #28]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800841a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008422:	4904      	ldr	r1, [pc, #16]	; (8008434 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008424:	4313      	orrs	r3, r2
 8008426:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800842a:	e009      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800842c:	7cfb      	ldrb	r3, [r7, #19]
 800842e:	74bb      	strb	r3, [r7, #18]
 8008430:	e006      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8008432:	bf00      	nop
 8008434:	40021000 	.word	0x40021000
 8008438:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800843c:	7cfb      	ldrb	r3, [r7, #19]
 800843e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008440:	7c7b      	ldrb	r3, [r7, #17]
 8008442:	2b01      	cmp	r3, #1
 8008444:	d105      	bne.n	8008452 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008446:	4b9b      	ldr	r3, [pc, #620]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800844a:	4a9a      	ldr	r2, [pc, #616]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800844c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008450:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	f003 0301 	and.w	r3, r3, #1
 800845a:	2b00      	cmp	r3, #0
 800845c:	d00a      	beq.n	8008474 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800845e:	4b95      	ldr	r3, [pc, #596]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008460:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008464:	f023 0203 	bic.w	r2, r3, #3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	6a1b      	ldr	r3, [r3, #32]
 800846c:	4991      	ldr	r1, [pc, #580]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800846e:	4313      	orrs	r3, r2
 8008470:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	2b00      	cmp	r3, #0
 800847e:	d00a      	beq.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008480:	4b8c      	ldr	r3, [pc, #560]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008482:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008486:	f023 020c 	bic.w	r2, r3, #12
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	4989      	ldr	r1, [pc, #548]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008490:	4313      	orrs	r3, r2
 8008492:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f003 0304 	and.w	r3, r3, #4
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00a      	beq.n	80084b8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80084a2:	4b84      	ldr	r3, [pc, #528]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80084a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b0:	4980      	ldr	r1, [pc, #512]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80084b2:	4313      	orrs	r3, r2
 80084b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00a      	beq.n	80084da <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80084c4:	4b7b      	ldr	r3, [pc, #492]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80084c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d2:	4978      	ldr	r1, [pc, #480]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00a      	beq.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80084e6:	4b73      	ldr	r3, [pc, #460]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80084e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80084ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084f4:	496f      	ldr	r1, [pc, #444]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80084f6:	4313      	orrs	r3, r2
 80084f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008504:	2b00      	cmp	r3, #0
 8008506:	d00a      	beq.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008508:	4b6a      	ldr	r3, [pc, #424]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800850a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800850e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008516:	4967      	ldr	r1, [pc, #412]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008518:	4313      	orrs	r3, r2
 800851a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008526:	2b00      	cmp	r3, #0
 8008528:	d00a      	beq.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800852a:	4b62      	ldr	r3, [pc, #392]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800852c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008530:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	495e      	ldr	r1, [pc, #376]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800853a:	4313      	orrs	r3, r2
 800853c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008548:	2b00      	cmp	r3, #0
 800854a:	d00a      	beq.n	8008562 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800854c:	4b59      	ldr	r3, [pc, #356]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800854e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008552:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855a:	4956      	ldr	r1, [pc, #344]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800855c:	4313      	orrs	r3, r2
 800855e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800856e:	4b51      	ldr	r3, [pc, #324]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008570:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008574:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857c:	494d      	ldr	r1, [pc, #308]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800857e:	4313      	orrs	r3, r2
 8008580:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d028      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008590:	4b48      	ldr	r3, [pc, #288]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008596:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800859e:	4945      	ldr	r1, [pc, #276]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80085a0:	4313      	orrs	r3, r2
 80085a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80085ae:	d106      	bne.n	80085be <HAL_RCCEx_PeriphCLKConfig+0x336>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80085b0:	4b40      	ldr	r3, [pc, #256]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80085b2:	68db      	ldr	r3, [r3, #12]
 80085b4:	4a3f      	ldr	r2, [pc, #252]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80085b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80085ba:	60d3      	str	r3, [r2, #12]
 80085bc:	e011      	b.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80085c6:	d10c      	bne.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	3304      	adds	r3, #4
 80085cc:	2101      	movs	r1, #1
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f872 	bl	80086b8 <RCCEx_PLLSAI1_Config>
 80085d4:	4603      	mov	r3, r0
 80085d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80085d8:	7cfb      	ldrb	r3, [r7, #19]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
      {
        /* set overall return value */
        status = ret;
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d028      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085ee:	4b31      	ldr	r3, [pc, #196]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80085f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085fc:	492d      	ldr	r1, [pc, #180]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008608:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800860c:	d106      	bne.n	800861c <HAL_RCCEx_PeriphCLKConfig+0x394>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800860e:	4b29      	ldr	r3, [pc, #164]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008610:	68db      	ldr	r3, [r3, #12]
 8008612:	4a28      	ldr	r2, [pc, #160]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008614:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008618:	60d3      	str	r3, [r2, #12]
 800861a:	e011      	b.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008620:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008624:	d10c      	bne.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	3304      	adds	r3, #4
 800862a:	2101      	movs	r1, #1
 800862c:	4618      	mov	r0, r3
 800862e:	f000 f843 	bl	80086b8 <RCCEx_PLLSAI1_Config>
 8008632:	4603      	mov	r3, r0
 8008634:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008636:	7cfb      	ldrb	r3, [r7, #19]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d001      	beq.n	8008640 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 800863c:	7cfb      	ldrb	r3, [r7, #19]
 800863e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01c      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800864c:	4b19      	ldr	r3, [pc, #100]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800864e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008652:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800865a:	4916      	ldr	r1, [pc, #88]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 800865c:	4313      	orrs	r3, r2
 800865e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800866a:	d10c      	bne.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	3304      	adds	r3, #4
 8008670:	2102      	movs	r1, #2
 8008672:	4618      	mov	r0, r3
 8008674:	f000 f820 	bl	80086b8 <RCCEx_PLLSAI1_Config>
 8008678:	4603      	mov	r3, r0
 800867a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800867c:	7cfb      	ldrb	r3, [r7, #19]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d001      	beq.n	8008686 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
      {
        /* set overall return value */
        status = ret;
 8008682:	7cfb      	ldrb	r3, [r7, #19]
 8008684:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d00a      	beq.n	80086a8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008692:	4b08      	ldr	r3, [pc, #32]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 8008694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008698:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a0:	4904      	ldr	r1, [pc, #16]	; (80086b4 <HAL_RCCEx_PeriphCLKConfig+0x42c>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80086a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3718      	adds	r7, #24
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}
 80086b2:	bf00      	nop
 80086b4:	40021000 	.word	0x40021000

080086b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b084      	sub	sp, #16
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80086c2:	2300      	movs	r3, #0
 80086c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80086c6:	4b74      	ldr	r3, [pc, #464]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086c8:	68db      	ldr	r3, [r3, #12]
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d018      	beq.n	8008704 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80086d2:	4b71      	ldr	r3, [pc, #452]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	f003 0203 	and.w	r2, r3, #3
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	429a      	cmp	r2, r3
 80086e0:	d10d      	bne.n	80086fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
       ||
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d009      	beq.n	80086fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80086ea:	4b6b      	ldr	r3, [pc, #428]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 80086ec:	68db      	ldr	r3, [r3, #12]
 80086ee:	091b      	lsrs	r3, r3, #4
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	685b      	ldr	r3, [r3, #4]
       ||
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d047      	beq.n	800878e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	73fb      	strb	r3, [r7, #15]
 8008702:	e044      	b.n	800878e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	2b03      	cmp	r3, #3
 800870a:	d018      	beq.n	800873e <RCCEx_PLLSAI1_Config+0x86>
 800870c:	2b03      	cmp	r3, #3
 800870e:	d825      	bhi.n	800875c <RCCEx_PLLSAI1_Config+0xa4>
 8008710:	2b01      	cmp	r3, #1
 8008712:	d002      	beq.n	800871a <RCCEx_PLLSAI1_Config+0x62>
 8008714:	2b02      	cmp	r3, #2
 8008716:	d009      	beq.n	800872c <RCCEx_PLLSAI1_Config+0x74>
 8008718:	e020      	b.n	800875c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800871a:	4b5f      	ldr	r3, [pc, #380]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	f003 0302 	and.w	r3, r3, #2
 8008722:	2b00      	cmp	r3, #0
 8008724:	d11d      	bne.n	8008762 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800872a:	e01a      	b.n	8008762 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800872c:	4b5a      	ldr	r3, [pc, #360]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008734:	2b00      	cmp	r3, #0
 8008736:	d116      	bne.n	8008766 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008738:	2301      	movs	r3, #1
 800873a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800873c:	e013      	b.n	8008766 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800873e:	4b56      	ldr	r3, [pc, #344]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008746:	2b00      	cmp	r3, #0
 8008748:	d10f      	bne.n	800876a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800874a:	4b53      	ldr	r3, [pc, #332]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d109      	bne.n	800876a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008756:	2301      	movs	r3, #1
 8008758:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800875a:	e006      	b.n	800876a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800875c:	2301      	movs	r3, #1
 800875e:	73fb      	strb	r3, [r7, #15]
      break;
 8008760:	e004      	b.n	800876c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008762:	bf00      	nop
 8008764:	e002      	b.n	800876c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008766:	bf00      	nop
 8008768:	e000      	b.n	800876c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800876a:	bf00      	nop
    }

    if(status == HAL_OK)
 800876c:	7bfb      	ldrb	r3, [r7, #15]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d10d      	bne.n	800878e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008772:	4b49      	ldr	r3, [pc, #292]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008774:	68db      	ldr	r3, [r3, #12]
 8008776:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6819      	ldr	r1, [r3, #0]
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	3b01      	subs	r3, #1
 8008784:	011b      	lsls	r3, r3, #4
 8008786:	430b      	orrs	r3, r1
 8008788:	4943      	ldr	r1, [pc, #268]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800878a:	4313      	orrs	r3, r2
 800878c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800878e:	7bfb      	ldrb	r3, [r7, #15]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d17c      	bne.n	800888e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008794:	4b40      	ldr	r3, [pc, #256]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a3f      	ldr	r2, [pc, #252]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800879a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800879e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087a0:	f7fc fd9a 	bl	80052d8 <HAL_GetTick>
 80087a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087a6:	e009      	b.n	80087bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80087a8:	f7fc fd96 	bl	80052d8 <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d902      	bls.n	80087bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	73fb      	strb	r3, [r7, #15]
        break;
 80087ba:	e005      	b.n	80087c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80087bc:	4b36      	ldr	r3, [pc, #216]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d1ef      	bne.n	80087a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80087c8:	7bfb      	ldrb	r3, [r7, #15]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d15f      	bne.n	800888e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d110      	bne.n	80087f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087d4:	4b30      	ldr	r3, [pc, #192]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087d6:	691b      	ldr	r3, [r3, #16]
 80087d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80087dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	6892      	ldr	r2, [r2, #8]
 80087e4:	0211      	lsls	r1, r2, #8
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	68d2      	ldr	r2, [r2, #12]
 80087ea:	06d2      	lsls	r2, r2, #27
 80087ec:	430a      	orrs	r2, r1
 80087ee:	492a      	ldr	r1, [pc, #168]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087f0:	4313      	orrs	r3, r2
 80087f2:	610b      	str	r3, [r1, #16]
 80087f4:	e027      	b.n	8008846 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80087f6:	683b      	ldr	r3, [r7, #0]
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d112      	bne.n	8008822 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80087fc:	4b26      	ldr	r3, [pc, #152]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008804:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008808:	687a      	ldr	r2, [r7, #4]
 800880a:	6892      	ldr	r2, [r2, #8]
 800880c:	0211      	lsls	r1, r2, #8
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	6912      	ldr	r2, [r2, #16]
 8008812:	0852      	lsrs	r2, r2, #1
 8008814:	3a01      	subs	r2, #1
 8008816:	0552      	lsls	r2, r2, #21
 8008818:	430a      	orrs	r2, r1
 800881a:	491f      	ldr	r1, [pc, #124]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800881c:	4313      	orrs	r3, r2
 800881e:	610b      	str	r3, [r1, #16]
 8008820:	e011      	b.n	8008846 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008822:	4b1d      	ldr	r3, [pc, #116]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800882a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800882e:	687a      	ldr	r2, [r7, #4]
 8008830:	6892      	ldr	r2, [r2, #8]
 8008832:	0211      	lsls	r1, r2, #8
 8008834:	687a      	ldr	r2, [r7, #4]
 8008836:	6952      	ldr	r2, [r2, #20]
 8008838:	0852      	lsrs	r2, r2, #1
 800883a:	3a01      	subs	r2, #1
 800883c:	0652      	lsls	r2, r2, #25
 800883e:	430a      	orrs	r2, r1
 8008840:	4915      	ldr	r1, [pc, #84]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008842:	4313      	orrs	r3, r2
 8008844:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008846:	4b14      	ldr	r3, [pc, #80]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a13      	ldr	r2, [pc, #76]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800884c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008850:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008852:	f7fc fd41 	bl	80052d8 <HAL_GetTick>
 8008856:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008858:	e009      	b.n	800886e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800885a:	f7fc fd3d 	bl	80052d8 <HAL_GetTick>
 800885e:	4602      	mov	r2, r0
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	1ad3      	subs	r3, r2, r3
 8008864:	2b02      	cmp	r3, #2
 8008866:	d902      	bls.n	800886e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008868:	2303      	movs	r3, #3
 800886a:	73fb      	strb	r3, [r7, #15]
          break;
 800886c:	e005      	b.n	800887a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0ef      	beq.n	800885a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800887a:	7bfb      	ldrb	r3, [r7, #15]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d106      	bne.n	800888e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008880:	4b05      	ldr	r3, [pc, #20]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	699b      	ldr	r3, [r3, #24]
 8008888:	4903      	ldr	r1, [pc, #12]	; (8008898 <RCCEx_PLLSAI1_Config+0x1e0>)
 800888a:	4313      	orrs	r3, r2
 800888c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800888e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	40021000 	.word	0x40021000

0800889c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800889c:	b580      	push	{r7, lr}
 800889e:	b084      	sub	sp, #16
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80088a4:	2301      	movs	r3, #1
 80088a6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d06c      	beq.n	8008988 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088b4:	b2db      	uxtb	r3, r3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d106      	bne.n	80088c8 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2200      	movs	r2, #0
 80088be:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f7fc fa7c 	bl	8004dc0 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2202      	movs	r2, #2
 80088cc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	22ca      	movs	r2, #202	; 0xca
 80088d6:	625a      	str	r2, [r3, #36]	; 0x24
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	2253      	movs	r2, #83	; 0x53
 80088de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 f87c 	bl	80089de <RTC_EnterInitMode>
 80088e6:	4603      	mov	r3, r0
 80088e8:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80088ea:	7bfb      	ldrb	r3, [r7, #15]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d14b      	bne.n	8008988 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	687a      	ldr	r2, [r7, #4]
 80088f8:	6812      	ldr	r2, [r2, #0]
 80088fa:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80088fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008902:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6899      	ldr	r1, [r3, #8]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	685a      	ldr	r2, [r3, #4]
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	691b      	ldr	r3, [r3, #16]
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	431a      	orrs	r2, r3
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	430a      	orrs	r2, r1
 8008920:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	687a      	ldr	r2, [r7, #4]
 8008928:	68d2      	ldr	r2, [r2, #12]
 800892a:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	6919      	ldr	r1, [r3, #16]
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	689b      	ldr	r3, [r3, #8]
 8008936:	041a      	lsls	r2, r3, #16
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	430a      	orrs	r2, r1
 800893e:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f000 f87f 	bl	8008a44 <RTC_ExitInitMode>
 8008946:	4603      	mov	r3, r0
 8008948:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800894a:	7bfb      	ldrb	r3, [r7, #15]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d11b      	bne.n	8008988 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0203 	bic.w	r2, r2, #3
 800895e:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	69da      	ldr	r2, [r3, #28]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	695b      	ldr	r3, [r3, #20]
 800896e:	431a      	orrs	r2, r3
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	430a      	orrs	r2, r1
 8008976:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	22ff      	movs	r2, #255	; 0xff
 800897e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2201      	movs	r2, #1
 8008984:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}

08008992 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008992:	b580      	push	{r7, lr}
 8008994:	b084      	sub	sp, #16
 8008996:	af00      	add	r7, sp, #0
 8008998:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68da      	ldr	r2, [r3, #12]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80089a8:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 80089aa:	f7fc fc95 	bl	80052d8 <HAL_GetTick>
 80089ae:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089b0:	e009      	b.n	80089c6 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089b2:	f7fc fc91 	bl	80052d8 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80089c0:	d901      	bls.n	80089c6 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e007      	b.n	80089d6 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	68db      	ldr	r3, [r3, #12]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0ee      	beq.n	80089b2 <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 80089d4:	2300      	movs	r3, #0
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}

080089de <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80089de:	b580      	push	{r7, lr}
 80089e0:	b084      	sub	sp, #16
 80089e2:	af00      	add	r7, sp, #0
 80089e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089e6:	2300      	movs	r3, #0
 80089e8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	68db      	ldr	r3, [r3, #12]
 80089f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d120      	bne.n	8008a3a <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008a00:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008a02:	f7fc fc69 	bl	80052d8 <HAL_GetTick>
 8008a06:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a08:	e00d      	b.n	8008a26 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008a0a:	f7fc fc65 	bl	80052d8 <HAL_GetTick>
 8008a0e:	4602      	mov	r2, r0
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008a18:	d905      	bls.n	8008a26 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008a1a:	2303      	movs	r3, #3
 8008a1c:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	2203      	movs	r2, #3
 8008a22:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	68db      	ldr	r3, [r3, #12]
 8008a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <RTC_EnterInitMode+0x5c>
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d1e7      	bne.n	8008a0a <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a3c:	4618      	mov	r0, r3
 8008a3e:	3710      	adds	r7, #16
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008a50:	4b1a      	ldr	r3, [pc, #104]	; (8008abc <RTC_ExitInitMode+0x78>)
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	4a19      	ldr	r2, [pc, #100]	; (8008abc <RTC_ExitInitMode+0x78>)
 8008a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a5a:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008a5c:	4b17      	ldr	r3, [pc, #92]	; (8008abc <RTC_ExitInitMode+0x78>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	f003 0320 	and.w	r3, r3, #32
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d10c      	bne.n	8008a82 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f7ff ff92 	bl	8008992 <HAL_RTC_WaitForSynchro>
 8008a6e:	4603      	mov	r3, r0
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d01e      	beq.n	8008ab2 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	2203      	movs	r2, #3
 8008a78:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008a7c:	2303      	movs	r3, #3
 8008a7e:	73fb      	strb	r3, [r7, #15]
 8008a80:	e017      	b.n	8008ab2 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008a82:	4b0e      	ldr	r3, [pc, #56]	; (8008abc <RTC_ExitInitMode+0x78>)
 8008a84:	689b      	ldr	r3, [r3, #8]
 8008a86:	4a0d      	ldr	r2, [pc, #52]	; (8008abc <RTC_ExitInitMode+0x78>)
 8008a88:	f023 0320 	bic.w	r3, r3, #32
 8008a8c:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f7ff ff7f 	bl	8008992 <HAL_RTC_WaitForSynchro>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d005      	beq.n	8008aa6 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	2203      	movs	r2, #3
 8008a9e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008aa2:	2303      	movs	r3, #3
 8008aa4:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008aa6:	4b05      	ldr	r3, [pc, #20]	; (8008abc <RTC_ExitInitMode+0x78>)
 8008aa8:	689b      	ldr	r3, [r3, #8]
 8008aaa:	4a04      	ldr	r2, [pc, #16]	; (8008abc <RTC_ExitInitMode+0x78>)
 8008aac:	f043 0320 	orr.w	r3, r3, #32
 8008ab0:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3710      	adds	r7, #16
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}
 8008abc:	40002800 	.word	0x40002800

08008ac0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b082      	sub	sp, #8
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d101      	bne.n	8008ad2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e049      	b.n	8008b66 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ad8:	b2db      	uxtb	r3, r3
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d106      	bne.n	8008aec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2200      	movs	r2, #0
 8008ae2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f7fc f99a 	bl	8004e20 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2202      	movs	r2, #2
 8008af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681a      	ldr	r2, [r3, #0]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	3304      	adds	r3, #4
 8008afc:	4619      	mov	r1, r3
 8008afe:	4610      	mov	r0, r2
 8008b00:	f000 fa1e 	bl	8008f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2201      	movs	r2, #1
 8008b10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2201      	movs	r2, #1
 8008b18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2201      	movs	r2, #1
 8008b20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2201      	movs	r2, #1
 8008b28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	2201      	movs	r2, #1
 8008b30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	2201      	movs	r2, #1
 8008b38:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	2201      	movs	r2, #1
 8008b40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2201      	movs	r2, #1
 8008b50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008b64:	2300      	movs	r3, #0
}
 8008b66:	4618      	mov	r0, r3
 8008b68:	3708      	adds	r7, #8
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	bd80      	pop	{r7, pc}
	...

08008b70 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008b70:	b480      	push	{r7}
 8008b72:	b085      	sub	sp, #20
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b7e:	b2db      	uxtb	r3, r3
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d001      	beq.n	8008b88 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e033      	b.n	8008bf0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	2202      	movs	r2, #2
 8008b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	4a19      	ldr	r2, [pc, #100]	; (8008bfc <HAL_TIM_Base_Start+0x8c>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d009      	beq.n	8008bae <HAL_TIM_Base_Start+0x3e>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ba2:	d004      	beq.n	8008bae <HAL_TIM_Base_Start+0x3e>
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	4a15      	ldr	r2, [pc, #84]	; (8008c00 <HAL_TIM_Base_Start+0x90>)
 8008baa:	4293      	cmp	r3, r2
 8008bac:	d115      	bne.n	8008bda <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	689a      	ldr	r2, [r3, #8]
 8008bb4:	4b13      	ldr	r3, [pc, #76]	; (8008c04 <HAL_TIM_Base_Start+0x94>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	2b06      	cmp	r3, #6
 8008bbe:	d015      	beq.n	8008bec <HAL_TIM_Base_Start+0x7c>
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bc6:	d011      	beq.n	8008bec <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bd8:	e008      	b.n	8008bec <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	681a      	ldr	r2, [r3, #0]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f042 0201 	orr.w	r2, r2, #1
 8008be8:	601a      	str	r2, [r3, #0]
 8008bea:	e000      	b.n	8008bee <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008bec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3714      	adds	r7, #20
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr
 8008bfc:	40012c00 	.word	0x40012c00
 8008c00:	40014000 	.word	0x40014000
 8008c04:	00010007 	.word	0x00010007

08008c08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b085      	sub	sp, #20
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c16:	b2db      	uxtb	r3, r3
 8008c18:	2b01      	cmp	r3, #1
 8008c1a:	d001      	beq.n	8008c20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	e03b      	b.n	8008c98 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	2202      	movs	r2, #2
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	68da      	ldr	r2, [r3, #12]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f042 0201 	orr.w	r2, r2, #1
 8008c36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a19      	ldr	r2, [pc, #100]	; (8008ca4 <HAL_TIM_Base_Start_IT+0x9c>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d009      	beq.n	8008c56 <HAL_TIM_Base_Start_IT+0x4e>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c4a:	d004      	beq.n	8008c56 <HAL_TIM_Base_Start_IT+0x4e>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a15      	ldr	r2, [pc, #84]	; (8008ca8 <HAL_TIM_Base_Start_IT+0xa0>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d115      	bne.n	8008c82 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	689a      	ldr	r2, [r3, #8]
 8008c5c:	4b13      	ldr	r3, [pc, #76]	; (8008cac <HAL_TIM_Base_Start_IT+0xa4>)
 8008c5e:	4013      	ands	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2b06      	cmp	r3, #6
 8008c66:	d015      	beq.n	8008c94 <HAL_TIM_Base_Start_IT+0x8c>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c6e:	d011      	beq.n	8008c94 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	681a      	ldr	r2, [r3, #0]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	f042 0201 	orr.w	r2, r2, #1
 8008c7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c80:	e008      	b.n	8008c94 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	f042 0201 	orr.w	r2, r2, #1
 8008c90:	601a      	str	r2, [r3, #0]
 8008c92:	e000      	b.n	8008c96 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c94:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c96:	2300      	movs	r3, #0
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	3714      	adds	r7, #20
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr
 8008ca4:	40012c00 	.word	0x40012c00
 8008ca8:	40014000 	.word	0x40014000
 8008cac:	00010007 	.word	0x00010007

08008cb0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b082      	sub	sp, #8
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	691b      	ldr	r3, [r3, #16]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d122      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	68db      	ldr	r3, [r3, #12]
 8008ccc:	f003 0302 	and.w	r3, r3, #2
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	d11b      	bne.n	8008d0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f06f 0202 	mvn.w	r2, #2
 8008cdc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	2201      	movs	r2, #1
 8008ce2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	699b      	ldr	r3, [r3, #24]
 8008cea:	f003 0303 	and.w	r3, r3, #3
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d003      	beq.n	8008cfa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cf2:	6878      	ldr	r0, [r7, #4]
 8008cf4:	f000 f905 	bl	8008f02 <HAL_TIM_IC_CaptureCallback>
 8008cf8:	e005      	b.n	8008d06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f8f7 	bl	8008eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f000 f908 	bl	8008f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f003 0304 	and.w	r3, r3, #4
 8008d16:	2b04      	cmp	r3, #4
 8008d18:	d122      	bne.n	8008d60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	68db      	ldr	r3, [r3, #12]
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	d11b      	bne.n	8008d60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	f06f 0204 	mvn.w	r2, #4
 8008d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2202      	movs	r2, #2
 8008d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	699b      	ldr	r3, [r3, #24]
 8008d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f8db 	bl	8008f02 <HAL_TIM_IC_CaptureCallback>
 8008d4c:	e005      	b.n	8008d5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f8cd 	bl	8008eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 f8de 	bl	8008f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	691b      	ldr	r3, [r3, #16]
 8008d66:	f003 0308 	and.w	r3, r3, #8
 8008d6a:	2b08      	cmp	r3, #8
 8008d6c:	d122      	bne.n	8008db4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	68db      	ldr	r3, [r3, #12]
 8008d74:	f003 0308 	and.w	r3, r3, #8
 8008d78:	2b08      	cmp	r3, #8
 8008d7a:	d11b      	bne.n	8008db4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f06f 0208 	mvn.w	r2, #8
 8008d84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	2204      	movs	r2, #4
 8008d8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	69db      	ldr	r3, [r3, #28]
 8008d92:	f003 0303 	and.w	r3, r3, #3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d003      	beq.n	8008da2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d9a:	6878      	ldr	r0, [r7, #4]
 8008d9c:	f000 f8b1 	bl	8008f02 <HAL_TIM_IC_CaptureCallback>
 8008da0:	e005      	b.n	8008dae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f8a3 	bl	8008eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008da8:	6878      	ldr	r0, [r7, #4]
 8008daa:	f000 f8b4 	bl	8008f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2200      	movs	r2, #0
 8008db2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	691b      	ldr	r3, [r3, #16]
 8008dba:	f003 0310 	and.w	r3, r3, #16
 8008dbe:	2b10      	cmp	r3, #16
 8008dc0:	d122      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	68db      	ldr	r3, [r3, #12]
 8008dc8:	f003 0310 	and.w	r3, r3, #16
 8008dcc:	2b10      	cmp	r3, #16
 8008dce:	d11b      	bne.n	8008e08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f06f 0210 	mvn.w	r2, #16
 8008dd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2208      	movs	r2, #8
 8008dde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	69db      	ldr	r3, [r3, #28]
 8008de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d003      	beq.n	8008df6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f000 f887 	bl	8008f02 <HAL_TIM_IC_CaptureCallback>
 8008df4:	e005      	b.n	8008e02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f879 	bl	8008eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f000 f88a 	bl	8008f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	2200      	movs	r2, #0
 8008e06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	691b      	ldr	r3, [r3, #16]
 8008e0e:	f003 0301 	and.w	r3, r3, #1
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d10e      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	68db      	ldr	r3, [r3, #12]
 8008e1c:	f003 0301 	and.w	r3, r3, #1
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	d107      	bne.n	8008e34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f06f 0201 	mvn.w	r2, #1
 8008e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f7fb f8f0 	bl	8004014 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e3e:	2b80      	cmp	r3, #128	; 0x80
 8008e40:	d10e      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	68db      	ldr	r3, [r3, #12]
 8008e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e4c:	2b80      	cmp	r3, #128	; 0x80
 8008e4e:	d107      	bne.n	8008e60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f944 	bl	80090e8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e6e:	d10e      	bne.n	8008e8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	68db      	ldr	r3, [r3, #12]
 8008e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e7a:	2b80      	cmp	r3, #128	; 0x80
 8008e7c:	d107      	bne.n	8008e8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008e86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f937 	bl	80090fc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	691b      	ldr	r3, [r3, #16]
 8008e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e98:	2b40      	cmp	r3, #64	; 0x40
 8008e9a:	d10e      	bne.n	8008eba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ea6:	2b40      	cmp	r3, #64	; 0x40
 8008ea8:	d107      	bne.n	8008eba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008eb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f838 	bl	8008f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	691b      	ldr	r3, [r3, #16]
 8008ec0:	f003 0320 	and.w	r3, r3, #32
 8008ec4:	2b20      	cmp	r3, #32
 8008ec6:	d10e      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f003 0320 	and.w	r3, r3, #32
 8008ed2:	2b20      	cmp	r3, #32
 8008ed4:	d107      	bne.n	8008ee6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f06f 0220 	mvn.w	r2, #32
 8008ede:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f000 f8f7 	bl	80090d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ee6:	bf00      	nop
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008eee:	b480      	push	{r7}
 8008ef0:	b083      	sub	sp, #12
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ef6:	bf00      	nop
 8008ef8:	370c      	adds	r7, #12
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr

08008f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008f02:	b480      	push	{r7}
 8008f04:	b083      	sub	sp, #12
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008f0a:	bf00      	nop
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr

08008f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008f16:	b480      	push	{r7}
 8008f18:	b083      	sub	sp, #12
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008f1e:	bf00      	nop
 8008f20:	370c      	adds	r7, #12
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr

08008f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008f2a:	b480      	push	{r7}
 8008f2c:	b083      	sub	sp, #12
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f32:	bf00      	nop
 8008f34:	370c      	adds	r7, #12
 8008f36:	46bd      	mov	sp, r7
 8008f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3c:	4770      	bx	lr
	...

08008f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
 8008f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	4a2a      	ldr	r2, [pc, #168]	; (8008ffc <TIM_Base_SetConfig+0xbc>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d003      	beq.n	8008f60 <TIM_Base_SetConfig+0x20>
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f5e:	d108      	bne.n	8008f72 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	685b      	ldr	r3, [r3, #4]
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a21      	ldr	r2, [pc, #132]	; (8008ffc <TIM_Base_SetConfig+0xbc>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d00b      	beq.n	8008f92 <TIM_Base_SetConfig+0x52>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f80:	d007      	beq.n	8008f92 <TIM_Base_SetConfig+0x52>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a1e      	ldr	r2, [pc, #120]	; (8009000 <TIM_Base_SetConfig+0xc0>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d003      	beq.n	8008f92 <TIM_Base_SetConfig+0x52>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a1d      	ldr	r2, [pc, #116]	; (8009004 <TIM_Base_SetConfig+0xc4>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d108      	bne.n	8008fa4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	68db      	ldr	r3, [r3, #12]
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008faa:	683b      	ldr	r3, [r7, #0]
 8008fac:	695b      	ldr	r3, [r3, #20]
 8008fae:	4313      	orrs	r3, r2
 8008fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	689a      	ldr	r2, [r3, #8]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	4a0c      	ldr	r2, [pc, #48]	; (8008ffc <TIM_Base_SetConfig+0xbc>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d007      	beq.n	8008fe0 <TIM_Base_SetConfig+0xa0>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	4a0b      	ldr	r2, [pc, #44]	; (8009000 <TIM_Base_SetConfig+0xc0>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d003      	beq.n	8008fe0 <TIM_Base_SetConfig+0xa0>
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	4a0a      	ldr	r2, [pc, #40]	; (8009004 <TIM_Base_SetConfig+0xc4>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d103      	bne.n	8008fe8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	691a      	ldr	r2, [r3, #16]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	615a      	str	r2, [r3, #20]
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
 8008ffa:	bf00      	nop
 8008ffc:	40012c00 	.word	0x40012c00
 8009000:	40014000 	.word	0x40014000
 8009004:	40014400 	.word	0x40014400

08009008 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009018:	2b01      	cmp	r3, #1
 800901a:	d101      	bne.n	8009020 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800901c:	2302      	movs	r3, #2
 800901e:	e04f      	b.n	80090c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2201      	movs	r2, #1
 8009024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689b      	ldr	r3, [r3, #8]
 800903e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a21      	ldr	r2, [pc, #132]	; (80090cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d108      	bne.n	800905c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009050:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	4313      	orrs	r3, r2
 800905a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68fa      	ldr	r2, [r7, #12]
 800906a:	4313      	orrs	r3, r2
 800906c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68fa      	ldr	r2, [r7, #12]
 8009074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	4a14      	ldr	r2, [pc, #80]	; (80090cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800907c:	4293      	cmp	r3, r2
 800907e:	d009      	beq.n	8009094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009088:	d004      	beq.n	8009094 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4a10      	ldr	r2, [pc, #64]	; (80090d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d10c      	bne.n	80090ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800909a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	68ba      	ldr	r2, [r7, #8]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	2200      	movs	r2, #0
 80090ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3714      	adds	r7, #20
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr
 80090cc:	40012c00 	.word	0x40012c00
 80090d0:	40014000 	.word	0x40014000

080090d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b083      	sub	sp, #12
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80090dc:	bf00      	nop
 80090de:	370c      	adds	r7, #12
 80090e0:	46bd      	mov	sp, r7
 80090e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e6:	4770      	bx	lr

080090e8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b083      	sub	sp, #12
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80090f0:	bf00      	nop
 80090f2:	370c      	adds	r7, #12
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009104:	bf00      	nop
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b082      	sub	sp, #8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e040      	b.n	80091a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009126:	2b00      	cmp	r3, #0
 8009128:	d106      	bne.n	8009138 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f7fb fcbc 	bl	8004ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	2224      	movs	r2, #36	; 0x24
 800913c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f022 0201 	bic.w	r2, r2, #1
 800914c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fd12 	bl	8009b78 <UART_SetConfig>
 8009154:	4603      	mov	r3, r0
 8009156:	2b01      	cmp	r3, #1
 8009158:	d101      	bne.n	800915e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e022      	b.n	80091a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009162:	2b00      	cmp	r3, #0
 8009164:	d002      	beq.n	800916c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009166:	6878      	ldr	r0, [r7, #4]
 8009168:	f000 ff60 	bl	800a02c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	685a      	ldr	r2, [r3, #4]
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800917a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	689a      	ldr	r2, [r3, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800918a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f042 0201 	orr.w	r2, r2, #1
 800919a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 ffe7 	bl	800a170 <UART_CheckIdleState>
 80091a2:	4603      	mov	r3, r0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	3708      	adds	r7, #8
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bd80      	pop	{r7, pc}

080091ac <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b08a      	sub	sp, #40	; 0x28
 80091b0:	af02      	add	r7, sp, #8
 80091b2:	60f8      	str	r0, [r7, #12]
 80091b4:	60b9      	str	r1, [r7, #8]
 80091b6:	603b      	str	r3, [r7, #0]
 80091b8:	4613      	mov	r3, r2
 80091ba:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80091c0:	2b20      	cmp	r3, #32
 80091c2:	f040 8082 	bne.w	80092ca <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d002      	beq.n	80091d2 <HAL_UART_Transmit+0x26>
 80091cc:	88fb      	ldrh	r3, [r7, #6]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d101      	bne.n	80091d6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80091d2:	2301      	movs	r3, #1
 80091d4:	e07a      	b.n	80092cc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80091dc:	2b01      	cmp	r3, #1
 80091de:	d101      	bne.n	80091e4 <HAL_UART_Transmit+0x38>
 80091e0:	2302      	movs	r3, #2
 80091e2:	e073      	b.n	80092cc <HAL_UART_Transmit+0x120>
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	2201      	movs	r2, #1
 80091e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	2200      	movs	r2, #0
 80091f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2221      	movs	r2, #33	; 0x21
 80091f8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80091fa:	f7fc f86d 	bl	80052d8 <HAL_GetTick>
 80091fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	88fa      	ldrh	r2, [r7, #6]
 8009204:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	88fa      	ldrh	r2, [r7, #6]
 800920c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009218:	d108      	bne.n	800922c <HAL_UART_Transmit+0x80>
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	691b      	ldr	r3, [r3, #16]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d104      	bne.n	800922c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009222:	2300      	movs	r3, #0
 8009224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009226:	68bb      	ldr	r3, [r7, #8]
 8009228:	61bb      	str	r3, [r7, #24]
 800922a:	e003      	b.n	8009234 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009230:	2300      	movs	r3, #0
 8009232:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800923c:	e02d      	b.n	800929a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	9300      	str	r3, [sp, #0]
 8009242:	697b      	ldr	r3, [r7, #20]
 8009244:	2200      	movs	r2, #0
 8009246:	2180      	movs	r1, #128	; 0x80
 8009248:	68f8      	ldr	r0, [r7, #12]
 800924a:	f000 ffda 	bl	800a202 <UART_WaitOnFlagUntilTimeout>
 800924e:	4603      	mov	r3, r0
 8009250:	2b00      	cmp	r3, #0
 8009252:	d001      	beq.n	8009258 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8009254:	2303      	movs	r3, #3
 8009256:	e039      	b.n	80092cc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8009258:	69fb      	ldr	r3, [r7, #28]
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10b      	bne.n	8009276 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800925e:	69bb      	ldr	r3, [r7, #24]
 8009260:	881a      	ldrh	r2, [r3, #0]
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800926a:	b292      	uxth	r2, r2
 800926c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800926e:	69bb      	ldr	r3, [r7, #24]
 8009270:	3302      	adds	r3, #2
 8009272:	61bb      	str	r3, [r7, #24]
 8009274:	e008      	b.n	8009288 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009276:	69fb      	ldr	r3, [r7, #28]
 8009278:	781a      	ldrb	r2, [r3, #0]
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	b292      	uxth	r2, r2
 8009280:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009282:	69fb      	ldr	r3, [r7, #28]
 8009284:	3301      	adds	r3, #1
 8009286:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800928e:	b29b      	uxth	r3, r3
 8009290:	3b01      	subs	r3, #1
 8009292:	b29a      	uxth	r2, r3
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80092a0:	b29b      	uxth	r3, r3
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d1cb      	bne.n	800923e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	9300      	str	r3, [sp, #0]
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	2200      	movs	r2, #0
 80092ae:	2140      	movs	r1, #64	; 0x40
 80092b0:	68f8      	ldr	r0, [r7, #12]
 80092b2:	f000 ffa6 	bl	800a202 <UART_WaitOnFlagUntilTimeout>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d001      	beq.n	80092c0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80092bc:	2303      	movs	r3, #3
 80092be:	e005      	b.n	80092cc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2220      	movs	r2, #32
 80092c4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80092c6:	2300      	movs	r3, #0
 80092c8:	e000      	b.n	80092cc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80092ca:	2302      	movs	r3, #2
  }
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3720      	adds	r7, #32
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b08a      	sub	sp, #40	; 0x28
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	4613      	mov	r3, r2
 80092e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092e6:	2b20      	cmp	r3, #32
 80092e8:	d142      	bne.n	8009370 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d002      	beq.n	80092f6 <HAL_UART_Receive_IT+0x22>
 80092f0:	88fb      	ldrh	r3, [r7, #6]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d101      	bne.n	80092fa <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80092f6:	2301      	movs	r3, #1
 80092f8:	e03b      	b.n	8009372 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009300:	2b01      	cmp	r3, #1
 8009302:	d101      	bne.n	8009308 <HAL_UART_Receive_IT+0x34>
 8009304:	2302      	movs	r3, #2
 8009306:	e034      	b.n	8009372 <HAL_UART_Receive_IT+0x9e>
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	2201      	movs	r2, #1
 800930c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	4a18      	ldr	r2, [pc, #96]	; (800937c <HAL_UART_Receive_IT+0xa8>)
 800931c:	4293      	cmp	r3, r2
 800931e:	d01f      	beq.n	8009360 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	685b      	ldr	r3, [r3, #4]
 8009326:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800932a:	2b00      	cmp	r3, #0
 800932c:	d018      	beq.n	8009360 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	e853 3f00 	ldrex	r3, [r3]
 800933a:	613b      	str	r3, [r7, #16]
   return(result);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009342:	627b      	str	r3, [r7, #36]	; 0x24
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	461a      	mov	r2, r3
 800934a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934c:	623b      	str	r3, [r7, #32]
 800934e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009350:	69f9      	ldr	r1, [r7, #28]
 8009352:	6a3a      	ldr	r2, [r7, #32]
 8009354:	e841 2300 	strex	r3, r2, [r1]
 8009358:	61bb      	str	r3, [r7, #24]
   return(result);
 800935a:	69bb      	ldr	r3, [r7, #24]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1e6      	bne.n	800932e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009360:	88fb      	ldrh	r3, [r7, #6]
 8009362:	461a      	mov	r2, r3
 8009364:	68b9      	ldr	r1, [r7, #8]
 8009366:	68f8      	ldr	r0, [r7, #12]
 8009368:	f001 f810 	bl	800a38c <UART_Start_Receive_IT>
 800936c:	4603      	mov	r3, r0
 800936e:	e000      	b.n	8009372 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8009370:	2302      	movs	r3, #2
  }
}
 8009372:	4618      	mov	r0, r3
 8009374:	3728      	adds	r7, #40	; 0x28
 8009376:	46bd      	mov	sp, r7
 8009378:	bd80      	pop	{r7, pc}
 800937a:	bf00      	nop
 800937c:	40008000 	.word	0x40008000

08009380 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8009380:	b580      	push	{r7, lr}
 8009382:	b08a      	sub	sp, #40	; 0x28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009392:	2b20      	cmp	r3, #32
 8009394:	d178      	bne.n	8009488 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d002      	beq.n	80093a2 <HAL_UART_Transmit_DMA+0x22>
 800939c:	88fb      	ldrh	r3, [r7, #6]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d101      	bne.n	80093a6 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 80093a2:	2301      	movs	r3, #1
 80093a4:	e071      	b.n	800948a <HAL_UART_Transmit_DMA+0x10a>
    }

    __HAL_LOCK(huart);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80093ac:	2b01      	cmp	r3, #1
 80093ae:	d101      	bne.n	80093b4 <HAL_UART_Transmit_DMA+0x34>
 80093b0:	2302      	movs	r3, #2
 80093b2:	e06a      	b.n	800948a <HAL_UART_Transmit_DMA+0x10a>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2201      	movs	r2, #1
 80093b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	68ba      	ldr	r2, [r7, #8]
 80093c0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	88fa      	ldrh	r2, [r7, #6]
 80093c6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	88fa      	ldrh	r2, [r7, #6]
 80093ce:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	2221      	movs	r2, #33	; 0x21
 80093de:	679a      	str	r2, [r3, #120]	; 0x78

    if (huart->hdmatx != NULL)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d02b      	beq.n	8009440 <HAL_UART_Transmit_DMA+0xc0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ec:	4a29      	ldr	r2, [pc, #164]	; (8009494 <HAL_UART_Transmit_DMA+0x114>)
 80093ee:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093f4:	4a28      	ldr	r2, [pc, #160]	; (8009498 <HAL_UART_Transmit_DMA+0x118>)
 80093f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093fc:	4a27      	ldr	r2, [pc, #156]	; (800949c <HAL_UART_Transmit_DMA+0x11c>)
 80093fe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009404:	2200      	movs	r2, #0
 8009406:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009410:	4619      	mov	r1, r3
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	3328      	adds	r3, #40	; 0x28
 8009418:	461a      	mov	r2, r3
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	f7fc fba4 	bl	8005b68 <HAL_DMA_Start_IT>
 8009420:	4603      	mov	r3, r0
 8009422:	2b00      	cmp	r3, #0
 8009424:	d00c      	beq.n	8009440 <HAL_UART_Transmit_DMA+0xc0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	2210      	movs	r2, #16
 800942a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	2200      	movs	r2, #0
 8009432:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	2220      	movs	r2, #32
 800943a:	679a      	str	r2, [r3, #120]	; 0x78

        return HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	e024      	b.n	800948a <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2240      	movs	r2, #64	; 0x40
 8009446:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	613b      	str	r3, [r7, #16]
   return(result);
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009466:	627b      	str	r3, [r7, #36]	; 0x24
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3308      	adds	r3, #8
 800946e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009470:	623a      	str	r2, [r7, #32]
 8009472:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009474:	69f9      	ldr	r1, [r7, #28]
 8009476:	6a3a      	ldr	r2, [r7, #32]
 8009478:	e841 2300 	strex	r3, r2, [r1]
 800947c:	61bb      	str	r3, [r7, #24]
   return(result);
 800947e:	69bb      	ldr	r3, [r7, #24]
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1e5      	bne.n	8009450 <HAL_UART_Transmit_DMA+0xd0>

    return HAL_OK;
 8009484:	2300      	movs	r3, #0
 8009486:	e000      	b.n	800948a <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8009488:	2302      	movs	r3, #2
  }
}
 800948a:	4618      	mov	r0, r3
 800948c:	3728      	adds	r7, #40	; 0x28
 800948e:	46bd      	mov	sp, r7
 8009490:	bd80      	pop	{r7, pc}
 8009492:	bf00      	nop
 8009494:	0800a77f 	.word	0x0800a77f
 8009498:	0800a819 	.word	0x0800a819
 800949c:	0800a991 	.word	0x0800a991

080094a0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b08a      	sub	sp, #40	; 0x28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	4613      	mov	r3, r2
 80094ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094b2:	2b20      	cmp	r3, #32
 80094b4:	d142      	bne.n	800953c <HAL_UART_Receive_DMA+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80094b6:	68bb      	ldr	r3, [r7, #8]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d002      	beq.n	80094c2 <HAL_UART_Receive_DMA+0x22>
 80094bc:	88fb      	ldrh	r3, [r7, #6]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d101      	bne.n	80094c6 <HAL_UART_Receive_DMA+0x26>
    {
      return HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	e03b      	b.n	800953e <HAL_UART_Receive_DMA+0x9e>
    }

    __HAL_LOCK(huart);
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d101      	bne.n	80094d4 <HAL_UART_Receive_DMA+0x34>
 80094d0:	2302      	movs	r3, #2
 80094d2:	e034      	b.n	800953e <HAL_UART_Receive_DMA+0x9e>
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2201      	movs	r2, #1
 80094d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2200      	movs	r2, #0
 80094e0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a18      	ldr	r2, [pc, #96]	; (8009548 <HAL_UART_Receive_DMA+0xa8>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d01f      	beq.n	800952c <HAL_UART_Receive_DMA+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d018      	beq.n	800952c <HAL_UART_Receive_DMA+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009500:	697b      	ldr	r3, [r7, #20]
 8009502:	e853 3f00 	ldrex	r3, [r3]
 8009506:	613b      	str	r3, [r7, #16]
   return(result);
 8009508:	693b      	ldr	r3, [r7, #16]
 800950a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800950e:	627b      	str	r3, [r7, #36]	; 0x24
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	461a      	mov	r2, r3
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	623b      	str	r3, [r7, #32]
 800951a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951c:	69f9      	ldr	r1, [r7, #28]
 800951e:	6a3a      	ldr	r2, [r7, #32]
 8009520:	e841 2300 	strex	r3, r2, [r1]
 8009524:	61bb      	str	r3, [r7, #24]
   return(result);
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e6      	bne.n	80094fa <HAL_UART_Receive_DMA+0x5a>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800952c:	88fb      	ldrh	r3, [r7, #6]
 800952e:	461a      	mov	r2, r3
 8009530:	68b9      	ldr	r1, [r7, #8]
 8009532:	68f8      	ldr	r0, [r7, #12]
 8009534:	f000 fff4 	bl	800a520 <UART_Start_Receive_DMA>
 8009538:	4603      	mov	r3, r0
 800953a:	e000      	b.n	800953e <HAL_UART_Receive_DMA+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800953c:	2302      	movs	r3, #2
  }
}
 800953e:	4618      	mov	r0, r3
 8009540:	3728      	adds	r7, #40	; 0x28
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	40008000 	.word	0x40008000

0800954c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b0ba      	sub	sp, #232	; 0xe8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009576:	f640 030f 	movw	r3, #2063	; 0x80f
 800957a:	4013      	ands	r3, r2
 800957c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d115      	bne.n	80095b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d00f      	beq.n	80095b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d009      	beq.n	80095b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	f000 82a6 	beq.w	8009af6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
      }
      return;
 80095b2:	e2a0      	b.n	8009af6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80095b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	f000 8117 	beq.w	80097ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80095be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095c2:	f003 0301 	and.w	r3, r3, #1
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d106      	bne.n	80095d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80095ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095ce:	4b85      	ldr	r3, [pc, #532]	; (80097e4 <HAL_UART_IRQHandler+0x298>)
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	f000 810a 	beq.w	80097ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d011      	beq.n	8009608 <HAL_UART_IRQHandler+0xbc>
 80095e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d00b      	beq.n	8009608 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	2201      	movs	r2, #1
 80095f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095fe:	f043 0201 	orr.w	r2, r3, #1
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d011      	beq.n	8009638 <HAL_UART_IRQHandler+0xec>
 8009614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009618:	f003 0301 	and.w	r3, r3, #1
 800961c:	2b00      	cmp	r3, #0
 800961e:	d00b      	beq.n	8009638 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2202      	movs	r2, #2
 8009626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800962e:	f043 0204 	orr.w	r2, r3, #4
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800963c:	f003 0304 	and.w	r3, r3, #4
 8009640:	2b00      	cmp	r3, #0
 8009642:	d011      	beq.n	8009668 <HAL_UART_IRQHandler+0x11c>
 8009644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009648:	f003 0301 	and.w	r3, r3, #1
 800964c:	2b00      	cmp	r3, #0
 800964e:	d00b      	beq.n	8009668 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	2204      	movs	r2, #4
 8009656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800965e:	f043 0202 	orr.w	r2, r3, #2
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800966c:	f003 0308 	and.w	r3, r3, #8
 8009670:	2b00      	cmp	r3, #0
 8009672:	d017      	beq.n	80096a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009678:	f003 0320 	and.w	r3, r3, #32
 800967c:	2b00      	cmp	r3, #0
 800967e:	d105      	bne.n	800968c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8009680:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009684:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8009688:	2b00      	cmp	r3, #0
 800968a:	d00b      	beq.n	80096a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2208      	movs	r2, #8
 8009692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800969a:	f043 0208 	orr.w	r2, r3, #8
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d012      	beq.n	80096d6 <HAL_UART_IRQHandler+0x18a>
 80096b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00c      	beq.n	80096d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096cc:	f043 0220 	orr.w	r2, r3, #32
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096dc:	2b00      	cmp	r3, #0
 80096de:	f000 820c 	beq.w	8009afa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80096e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096e6:	f003 0320 	and.w	r3, r3, #32
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d00d      	beq.n	800970a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80096ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d007      	beq.n	800970a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d003      	beq.n	800970a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	689b      	ldr	r3, [r3, #8]
 800971a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800971e:	2b40      	cmp	r3, #64	; 0x40
 8009720:	d005      	beq.n	800972e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009726:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800972a:	2b00      	cmp	r3, #0
 800972c:	d04f      	beq.n	80097ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 ffc2 	bl	800a6b8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	689b      	ldr	r3, [r3, #8]
 800973a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800973e:	2b40      	cmp	r3, #64	; 0x40
 8009740:	d141      	bne.n	80097c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	3308      	adds	r3, #8
 8009748:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800975c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009760:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	3308      	adds	r3, #8
 800976a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800976e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009772:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009776:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800977a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009786:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d1d9      	bne.n	8009742 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009792:	2b00      	cmp	r3, #0
 8009794:	d013      	beq.n	80097be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800979a:	4a13      	ldr	r2, [pc, #76]	; (80097e8 <HAL_UART_IRQHandler+0x29c>)
 800979c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097a2:	4618      	mov	r0, r3
 80097a4:	f7fc fa7e 	bl	8005ca4 <HAL_DMA_Abort_IT>
 80097a8:	4603      	mov	r3, r0
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d017      	beq.n	80097de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097b4:	687a      	ldr	r2, [r7, #4]
 80097b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80097b8:	4610      	mov	r0, r2
 80097ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097bc:	e00f      	b.n	80097de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	f000 f9c4 	bl	8009b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097c4:	e00b      	b.n	80097de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097c6:	6878      	ldr	r0, [r7, #4]
 80097c8:	f000 f9c0 	bl	8009b4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097cc:	e007      	b.n	80097de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097ce:	6878      	ldr	r0, [r7, #4]
 80097d0:	f000 f9bc 	bl	8009b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80097dc:	e18d      	b.n	8009afa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097de:	bf00      	nop
    return;
 80097e0:	e18b      	b.n	8009afa <HAL_UART_IRQHandler+0x5ae>
 80097e2:	bf00      	nop
 80097e4:	04000120 	.word	0x04000120
 80097e8:	0800aa0d 	.word	0x0800aa0d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	f040 8146 	bne.w	8009a82 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80097f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097fa:	f003 0310 	and.w	r3, r3, #16
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 813f 	beq.w	8009a82 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009808:	f003 0310 	and.w	r3, r3, #16
 800980c:	2b00      	cmp	r3, #0
 800980e:	f000 8138 	beq.w	8009a82 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	2210      	movs	r2, #16
 8009818:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	689b      	ldr	r3, [r3, #8]
 8009820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009824:	2b40      	cmp	r3, #64	; 0x40
 8009826:	f040 80b4 	bne.w	8009992 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	685b      	ldr	r3, [r3, #4]
 8009832:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009836:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800983a:	2b00      	cmp	r3, #0
 800983c:	f000 815f 	beq.w	8009afe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009846:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800984a:	429a      	cmp	r2, r3
 800984c:	f080 8157 	bcs.w	8009afe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009856:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f003 0320 	and.w	r3, r3, #32
 8009866:	2b00      	cmp	r3, #0
 8009868:	f040 8085 	bne.w	8009976 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009878:	e853 3f00 	ldrex	r3, [r3]
 800987c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009880:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009888:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	461a      	mov	r2, r3
 8009892:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009896:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800989a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800989e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80098a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80098a6:	e841 2300 	strex	r3, r2, [r1]
 80098aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80098ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d1da      	bne.n	800986c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3308      	adds	r3, #8
 80098bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80098c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80098c8:	f023 0301 	bic.w	r3, r3, #1
 80098cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	3308      	adds	r3, #8
 80098d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80098da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80098de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80098e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80098e6:	e841 2300 	strex	r3, r2, [r1]
 80098ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80098ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d1e1      	bne.n	80098b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	3308      	adds	r3, #8
 80098f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80098fc:	e853 3f00 	ldrex	r3, [r3]
 8009900:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009902:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009904:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009908:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	3308      	adds	r3, #8
 8009912:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009916:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009918:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800991c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e3      	bne.n	80098f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	2220      	movs	r2, #32
 800992e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	2200      	movs	r2, #0
 8009934:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800993c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800993e:	e853 3f00 	ldrex	r3, [r3]
 8009942:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009944:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009946:	f023 0310 	bic.w	r3, r3, #16
 800994a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009958:	65bb      	str	r3, [r7, #88]	; 0x58
 800995a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800995c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800995e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009960:	e841 2300 	strex	r3, r2, [r1]
 8009964:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009966:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009968:	2b00      	cmp	r3, #0
 800996a:	d1e4      	bne.n	8009936 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009970:	4618      	mov	r0, r3
 8009972:	f7fc f959 	bl	8005c28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009982:	b29b      	uxth	r3, r3
 8009984:	1ad3      	subs	r3, r2, r3
 8009986:	b29b      	uxth	r3, r3
 8009988:	4619      	mov	r1, r3
 800998a:	6878      	ldr	r0, [r7, #4]
 800998c:	f000 f8e8 	bl	8009b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009990:	e0b5      	b.n	8009afe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800999e:	b29b      	uxth	r3, r3
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80099ac:	b29b      	uxth	r3, r3
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	f000 80a7 	beq.w	8009b02 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80099b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	f000 80a2 	beq.w	8009b02 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80099c6:	e853 3f00 	ldrex	r3, [r3]
 80099ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80099cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80099ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80099d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	461a      	mov	r2, r3
 80099dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80099e0:	647b      	str	r3, [r7, #68]	; 0x44
 80099e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80099e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80099e8:	e841 2300 	strex	r3, r2, [r1]
 80099ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80099ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d1e4      	bne.n	80099be <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099fe:	e853 3f00 	ldrex	r3, [r3]
 8009a02:	623b      	str	r3, [r7, #32]
   return(result);
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	f023 0301 	bic.w	r3, r3, #1
 8009a0a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	3308      	adds	r3, #8
 8009a14:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009a18:	633a      	str	r2, [r7, #48]	; 0x30
 8009a1a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a1c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009a1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a20:	e841 2300 	strex	r3, r2, [r1]
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1e3      	bne.n	80099f4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2220      	movs	r2, #32
 8009a30:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	e853 3f00 	ldrex	r3, [r3]
 8009a4a:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	f023 0310 	bic.w	r3, r3, #16
 8009a52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	461a      	mov	r2, r3
 8009a5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009a60:	61fb      	str	r3, [r7, #28]
 8009a62:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a64:	69b9      	ldr	r1, [r7, #24]
 8009a66:	69fa      	ldr	r2, [r7, #28]
 8009a68:	e841 2300 	strex	r3, r2, [r1]
 8009a6c:	617b      	str	r3, [r7, #20]
   return(result);
 8009a6e:	697b      	ldr	r3, [r7, #20]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d1e4      	bne.n	8009a3e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009a78:	4619      	mov	r1, r3
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f000 f870 	bl	8009b60 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a80:	e03f      	b.n	8009b02 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009a82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00e      	beq.n	8009aac <HAL_UART_IRQHandler+0x560>
 8009a8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d008      	beq.n	8009aac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009aa2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f001 f951 	bl	800ad4c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009aaa:	e02d      	b.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8009aac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d00e      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8009ab8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d008      	beq.n	8009ad6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d01c      	beq.n	8009b06 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	4798      	blx	r3
    }
    return;
 8009ad4:	e017      	b.n	8009b06 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d012      	beq.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
 8009ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d00c      	beq.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 ffa2 	bl	800aa38 <UART_EndTransmit_IT>
    return;
 8009af4:	e008      	b.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009af6:	bf00      	nop
 8009af8:	e006      	b.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009afa:	bf00      	nop
 8009afc:	e004      	b.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009afe:	bf00      	nop
 8009b00:	e002      	b.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
      return;
 8009b02:	bf00      	nop
 8009b04:	e000      	b.n	8009b08 <HAL_UART_IRQHandler+0x5bc>
    return;
 8009b06:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8009b08:	37e8      	adds	r7, #232	; 0xe8
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	bd80      	pop	{r7, pc}
 8009b0e:	bf00      	nop

08009b10 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009b18:	bf00      	nop
 8009b1a:	370c      	adds	r7, #12
 8009b1c:	46bd      	mov	sp, r7
 8009b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b22:	4770      	bx	lr

08009b24 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b083      	sub	sp, #12
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009b38:	b480      	push	{r7}
 8009b3a:	b083      	sub	sp, #12
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009b40:	bf00      	nop
 8009b42:	370c      	adds	r7, #12
 8009b44:	46bd      	mov	sp, r7
 8009b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4a:	4770      	bx	lr

08009b4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b083      	sub	sp, #12
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	460b      	mov	r3, r1
 8009b6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009b78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009b7c:	b08a      	sub	sp, #40	; 0x28
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009b82:	2300      	movs	r3, #0
 8009b84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	689a      	ldr	r2, [r3, #8]
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	691b      	ldr	r3, [r3, #16]
 8009b90:	431a      	orrs	r2, r3
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	695b      	ldr	r3, [r3, #20]
 8009b96:	431a      	orrs	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	69db      	ldr	r3, [r3, #28]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	681a      	ldr	r2, [r3, #0]
 8009ba6:	4b9e      	ldr	r3, [pc, #632]	; (8009e20 <UART_SetConfig+0x2a8>)
 8009ba8:	4013      	ands	r3, r2
 8009baa:	68fa      	ldr	r2, [r7, #12]
 8009bac:	6812      	ldr	r2, [r2, #0]
 8009bae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009bb0:	430b      	orrs	r3, r1
 8009bb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	685b      	ldr	r3, [r3, #4]
 8009bba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	68da      	ldr	r2, [r3, #12]
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	430a      	orrs	r2, r1
 8009bc8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	699b      	ldr	r3, [r3, #24]
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	4a93      	ldr	r2, [pc, #588]	; (8009e24 <UART_SetConfig+0x2ac>)
 8009bd6:	4293      	cmp	r3, r2
 8009bd8:	d004      	beq.n	8009be4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	6a1b      	ldr	r3, [r3, #32]
 8009bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009be0:	4313      	orrs	r3, r2
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	689b      	ldr	r3, [r3, #8]
 8009bea:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf4:	430a      	orrs	r2, r1
 8009bf6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	4a8a      	ldr	r2, [pc, #552]	; (8009e28 <UART_SetConfig+0x2b0>)
 8009bfe:	4293      	cmp	r3, r2
 8009c00:	d126      	bne.n	8009c50 <UART_SetConfig+0xd8>
 8009c02:	4b8a      	ldr	r3, [pc, #552]	; (8009e2c <UART_SetConfig+0x2b4>)
 8009c04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c08:	f003 0303 	and.w	r3, r3, #3
 8009c0c:	2b03      	cmp	r3, #3
 8009c0e:	d81b      	bhi.n	8009c48 <UART_SetConfig+0xd0>
 8009c10:	a201      	add	r2, pc, #4	; (adr r2, 8009c18 <UART_SetConfig+0xa0>)
 8009c12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c16:	bf00      	nop
 8009c18:	08009c29 	.word	0x08009c29
 8009c1c:	08009c39 	.word	0x08009c39
 8009c20:	08009c31 	.word	0x08009c31
 8009c24:	08009c41 	.word	0x08009c41
 8009c28:	2301      	movs	r3, #1
 8009c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c2e:	e0ab      	b.n	8009d88 <UART_SetConfig+0x210>
 8009c30:	2302      	movs	r3, #2
 8009c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c36:	e0a7      	b.n	8009d88 <UART_SetConfig+0x210>
 8009c38:	2304      	movs	r3, #4
 8009c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c3e:	e0a3      	b.n	8009d88 <UART_SetConfig+0x210>
 8009c40:	2308      	movs	r3, #8
 8009c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c46:	e09f      	b.n	8009d88 <UART_SetConfig+0x210>
 8009c48:	2310      	movs	r3, #16
 8009c4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009c4e:	e09b      	b.n	8009d88 <UART_SetConfig+0x210>
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4a76      	ldr	r2, [pc, #472]	; (8009e30 <UART_SetConfig+0x2b8>)
 8009c56:	4293      	cmp	r3, r2
 8009c58:	d138      	bne.n	8009ccc <UART_SetConfig+0x154>
 8009c5a:	4b74      	ldr	r3, [pc, #464]	; (8009e2c <UART_SetConfig+0x2b4>)
 8009c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c60:	f003 030c 	and.w	r3, r3, #12
 8009c64:	2b0c      	cmp	r3, #12
 8009c66:	d82d      	bhi.n	8009cc4 <UART_SetConfig+0x14c>
 8009c68:	a201      	add	r2, pc, #4	; (adr r2, 8009c70 <UART_SetConfig+0xf8>)
 8009c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c6e:	bf00      	nop
 8009c70:	08009ca5 	.word	0x08009ca5
 8009c74:	08009cc5 	.word	0x08009cc5
 8009c78:	08009cc5 	.word	0x08009cc5
 8009c7c:	08009cc5 	.word	0x08009cc5
 8009c80:	08009cb5 	.word	0x08009cb5
 8009c84:	08009cc5 	.word	0x08009cc5
 8009c88:	08009cc5 	.word	0x08009cc5
 8009c8c:	08009cc5 	.word	0x08009cc5
 8009c90:	08009cad 	.word	0x08009cad
 8009c94:	08009cc5 	.word	0x08009cc5
 8009c98:	08009cc5 	.word	0x08009cc5
 8009c9c:	08009cc5 	.word	0x08009cc5
 8009ca0:	08009cbd 	.word	0x08009cbd
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009caa:	e06d      	b.n	8009d88 <UART_SetConfig+0x210>
 8009cac:	2302      	movs	r3, #2
 8009cae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cb2:	e069      	b.n	8009d88 <UART_SetConfig+0x210>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cba:	e065      	b.n	8009d88 <UART_SetConfig+0x210>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cc2:	e061      	b.n	8009d88 <UART_SetConfig+0x210>
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009cca:	e05d      	b.n	8009d88 <UART_SetConfig+0x210>
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a58      	ldr	r2, [pc, #352]	; (8009e34 <UART_SetConfig+0x2bc>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d125      	bne.n	8009d22 <UART_SetConfig+0x1aa>
 8009cd6:	4b55      	ldr	r3, [pc, #340]	; (8009e2c <UART_SetConfig+0x2b4>)
 8009cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cdc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ce0:	2b30      	cmp	r3, #48	; 0x30
 8009ce2:	d016      	beq.n	8009d12 <UART_SetConfig+0x19a>
 8009ce4:	2b30      	cmp	r3, #48	; 0x30
 8009ce6:	d818      	bhi.n	8009d1a <UART_SetConfig+0x1a2>
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	d00a      	beq.n	8009d02 <UART_SetConfig+0x18a>
 8009cec:	2b20      	cmp	r3, #32
 8009cee:	d814      	bhi.n	8009d1a <UART_SetConfig+0x1a2>
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d002      	beq.n	8009cfa <UART_SetConfig+0x182>
 8009cf4:	2b10      	cmp	r3, #16
 8009cf6:	d008      	beq.n	8009d0a <UART_SetConfig+0x192>
 8009cf8:	e00f      	b.n	8009d1a <UART_SetConfig+0x1a2>
 8009cfa:	2300      	movs	r3, #0
 8009cfc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d00:	e042      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d02:	2302      	movs	r3, #2
 8009d04:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d08:	e03e      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d0a:	2304      	movs	r3, #4
 8009d0c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d10:	e03a      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d12:	2308      	movs	r3, #8
 8009d14:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d18:	e036      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d1a:	2310      	movs	r3, #16
 8009d1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d20:	e032      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	4a3f      	ldr	r2, [pc, #252]	; (8009e24 <UART_SetConfig+0x2ac>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d12a      	bne.n	8009d82 <UART_SetConfig+0x20a>
 8009d2c:	4b3f      	ldr	r3, [pc, #252]	; (8009e2c <UART_SetConfig+0x2b4>)
 8009d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009d32:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009d36:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d3a:	d01a      	beq.n	8009d72 <UART_SetConfig+0x1fa>
 8009d3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009d40:	d81b      	bhi.n	8009d7a <UART_SetConfig+0x202>
 8009d42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d46:	d00c      	beq.n	8009d62 <UART_SetConfig+0x1ea>
 8009d48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d4c:	d815      	bhi.n	8009d7a <UART_SetConfig+0x202>
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d003      	beq.n	8009d5a <UART_SetConfig+0x1e2>
 8009d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d56:	d008      	beq.n	8009d6a <UART_SetConfig+0x1f2>
 8009d58:	e00f      	b.n	8009d7a <UART_SetConfig+0x202>
 8009d5a:	2300      	movs	r3, #0
 8009d5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d60:	e012      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d62:	2302      	movs	r3, #2
 8009d64:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d68:	e00e      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d6a:	2304      	movs	r3, #4
 8009d6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d70:	e00a      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d72:	2308      	movs	r3, #8
 8009d74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d78:	e006      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d7a:	2310      	movs	r3, #16
 8009d7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009d80:	e002      	b.n	8009d88 <UART_SetConfig+0x210>
 8009d82:	2310      	movs	r3, #16
 8009d84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a25      	ldr	r2, [pc, #148]	; (8009e24 <UART_SetConfig+0x2ac>)
 8009d8e:	4293      	cmp	r3, r2
 8009d90:	f040 808a 	bne.w	8009ea8 <UART_SetConfig+0x330>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d94:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009d98:	2b08      	cmp	r3, #8
 8009d9a:	d824      	bhi.n	8009de6 <UART_SetConfig+0x26e>
 8009d9c:	a201      	add	r2, pc, #4	; (adr r2, 8009da4 <UART_SetConfig+0x22c>)
 8009d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009da2:	bf00      	nop
 8009da4:	08009dc9 	.word	0x08009dc9
 8009da8:	08009de7 	.word	0x08009de7
 8009dac:	08009dd1 	.word	0x08009dd1
 8009db0:	08009de7 	.word	0x08009de7
 8009db4:	08009dd7 	.word	0x08009dd7
 8009db8:	08009de7 	.word	0x08009de7
 8009dbc:	08009de7 	.word	0x08009de7
 8009dc0:	08009de7 	.word	0x08009de7
 8009dc4:	08009ddf 	.word	0x08009ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009dc8:	f7fe f9d2 	bl	8008170 <HAL_RCC_GetPCLK1Freq>
 8009dcc:	61f8      	str	r0, [r7, #28]
        break;
 8009dce:	e010      	b.n	8009df2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009dd0:	4b19      	ldr	r3, [pc, #100]	; (8009e38 <UART_SetConfig+0x2c0>)
 8009dd2:	61fb      	str	r3, [r7, #28]
        break;
 8009dd4:	e00d      	b.n	8009df2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009dd6:	f7fe f933 	bl	8008040 <HAL_RCC_GetSysClockFreq>
 8009dda:	61f8      	str	r0, [r7, #28]
        break;
 8009ddc:	e009      	b.n	8009df2 <UART_SetConfig+0x27a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009de2:	61fb      	str	r3, [r7, #28]
        break;
 8009de4:	e005      	b.n	8009df2 <UART_SetConfig+0x27a>
      default:
        pclk = 0U;
 8009de6:	2300      	movs	r3, #0
 8009de8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009dea:	2301      	movs	r3, #1
 8009dec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009df0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8109 	beq.w	800a00c <UART_SetConfig+0x494>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	685a      	ldr	r2, [r3, #4]
 8009dfe:	4613      	mov	r3, r2
 8009e00:	005b      	lsls	r3, r3, #1
 8009e02:	4413      	add	r3, r2
 8009e04:	69fa      	ldr	r2, [r7, #28]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d305      	bcc.n	8009e16 <UART_SetConfig+0x29e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	685b      	ldr	r3, [r3, #4]
 8009e0e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009e10:	69fa      	ldr	r2, [r7, #28]
 8009e12:	429a      	cmp	r2, r3
 8009e14:	d912      	bls.n	8009e3c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009e1c:	e0f6      	b.n	800a00c <UART_SetConfig+0x494>
 8009e1e:	bf00      	nop
 8009e20:	efff69f3 	.word	0xefff69f3
 8009e24:	40008000 	.word	0x40008000
 8009e28:	40013800 	.word	0x40013800
 8009e2c:	40021000 	.word	0x40021000
 8009e30:	40004400 	.word	0x40004400
 8009e34:	40004800 	.word	0x40004800
 8009e38:	00f42400 	.word	0x00f42400
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	2200      	movs	r2, #0
 8009e40:	461c      	mov	r4, r3
 8009e42:	4615      	mov	r5, r2
 8009e44:	f04f 0200 	mov.w	r2, #0
 8009e48:	f04f 0300 	mov.w	r3, #0
 8009e4c:	022b      	lsls	r3, r5, #8
 8009e4e:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009e52:	0222      	lsls	r2, r4, #8
 8009e54:	68f9      	ldr	r1, [r7, #12]
 8009e56:	6849      	ldr	r1, [r1, #4]
 8009e58:	0849      	lsrs	r1, r1, #1
 8009e5a:	2000      	movs	r0, #0
 8009e5c:	4688      	mov	r8, r1
 8009e5e:	4681      	mov	r9, r0
 8009e60:	eb12 0a08 	adds.w	sl, r2, r8
 8009e64:	eb43 0b09 	adc.w	fp, r3, r9
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	603b      	str	r3, [r7, #0]
 8009e70:	607a      	str	r2, [r7, #4]
 8009e72:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e76:	4650      	mov	r0, sl
 8009e78:	4659      	mov	r1, fp
 8009e7a:	f7f6 ffe3 	bl	8000e44 <__aeabi_uldivmod>
 8009e7e:	4602      	mov	r2, r0
 8009e80:	460b      	mov	r3, r1
 8009e82:	4613      	mov	r3, r2
 8009e84:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009e8c:	d308      	bcc.n	8009ea0 <UART_SetConfig+0x328>
 8009e8e:	69bb      	ldr	r3, [r7, #24]
 8009e90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e94:	d204      	bcs.n	8009ea0 <UART_SetConfig+0x328>
        {
          huart->Instance->BRR = usartdiv;
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	69ba      	ldr	r2, [r7, #24]
 8009e9c:	60da      	str	r2, [r3, #12]
 8009e9e:	e0b5      	b.n	800a00c <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8009ea0:	2301      	movs	r3, #1
 8009ea2:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009ea6:	e0b1      	b.n	800a00c <UART_SetConfig+0x494>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	69db      	ldr	r3, [r3, #28]
 8009eac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009eb0:	d15d      	bne.n	8009f6e <UART_SetConfig+0x3f6>
  {
    switch (clocksource)
 8009eb2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009eb6:	2b08      	cmp	r3, #8
 8009eb8:	d827      	bhi.n	8009f0a <UART_SetConfig+0x392>
 8009eba:	a201      	add	r2, pc, #4	; (adr r2, 8009ec0 <UART_SetConfig+0x348>)
 8009ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ec0:	08009ee5 	.word	0x08009ee5
 8009ec4:	08009eed 	.word	0x08009eed
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	08009f0b 	.word	0x08009f0b
 8009ed0:	08009efb 	.word	0x08009efb
 8009ed4:	08009f0b 	.word	0x08009f0b
 8009ed8:	08009f0b 	.word	0x08009f0b
 8009edc:	08009f0b 	.word	0x08009f0b
 8009ee0:	08009f03 	.word	0x08009f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ee4:	f7fe f944 	bl	8008170 <HAL_RCC_GetPCLK1Freq>
 8009ee8:	61f8      	str	r0, [r7, #28]
        break;
 8009eea:	e014      	b.n	8009f16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009eec:	f7fe f956 	bl	800819c <HAL_RCC_GetPCLK2Freq>
 8009ef0:	61f8      	str	r0, [r7, #28]
        break;
 8009ef2:	e010      	b.n	8009f16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009ef4:	4b4c      	ldr	r3, [pc, #304]	; (800a028 <UART_SetConfig+0x4b0>)
 8009ef6:	61fb      	str	r3, [r7, #28]
        break;
 8009ef8:	e00d      	b.n	8009f16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009efa:	f7fe f8a1 	bl	8008040 <HAL_RCC_GetSysClockFreq>
 8009efe:	61f8      	str	r0, [r7, #28]
        break;
 8009f00:	e009      	b.n	8009f16 <UART_SetConfig+0x39e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f06:	61fb      	str	r3, [r7, #28]
        break;
 8009f08:	e005      	b.n	8009f16 <UART_SetConfig+0x39e>
      default:
        pclk = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009f14:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009f16:	69fb      	ldr	r3, [r7, #28]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d077      	beq.n	800a00c <UART_SetConfig+0x494>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009f1c:	69fb      	ldr	r3, [r7, #28]
 8009f1e:	005a      	lsls	r2, r3, #1
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	685b      	ldr	r3, [r3, #4]
 8009f24:	085b      	lsrs	r3, r3, #1
 8009f26:	441a      	add	r2, r3
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	685b      	ldr	r3, [r3, #4]
 8009f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009f30:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009f32:	69bb      	ldr	r3, [r7, #24]
 8009f34:	2b0f      	cmp	r3, #15
 8009f36:	d916      	bls.n	8009f66 <UART_SetConfig+0x3ee>
 8009f38:	69bb      	ldr	r3, [r7, #24]
 8009f3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f3e:	d212      	bcs.n	8009f66 <UART_SetConfig+0x3ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009f40:	69bb      	ldr	r3, [r7, #24]
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	f023 030f 	bic.w	r3, r3, #15
 8009f48:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	085b      	lsrs	r3, r3, #1
 8009f4e:	b29b      	uxth	r3, r3
 8009f50:	f003 0307 	and.w	r3, r3, #7
 8009f54:	b29a      	uxth	r2, r3
 8009f56:	8afb      	ldrh	r3, [r7, #22]
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	8afa      	ldrh	r2, [r7, #22]
 8009f62:	60da      	str	r2, [r3, #12]
 8009f64:	e052      	b.n	800a00c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8009f66:	2301      	movs	r3, #1
 8009f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009f6c:	e04e      	b.n	800a00c <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009f6e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009f72:	2b08      	cmp	r3, #8
 8009f74:	d827      	bhi.n	8009fc6 <UART_SetConfig+0x44e>
 8009f76:	a201      	add	r2, pc, #4	; (adr r2, 8009f7c <UART_SetConfig+0x404>)
 8009f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f7c:	08009fa1 	.word	0x08009fa1
 8009f80:	08009fa9 	.word	0x08009fa9
 8009f84:	08009fb1 	.word	0x08009fb1
 8009f88:	08009fc7 	.word	0x08009fc7
 8009f8c:	08009fb7 	.word	0x08009fb7
 8009f90:	08009fc7 	.word	0x08009fc7
 8009f94:	08009fc7 	.word	0x08009fc7
 8009f98:	08009fc7 	.word	0x08009fc7
 8009f9c:	08009fbf 	.word	0x08009fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009fa0:	f7fe f8e6 	bl	8008170 <HAL_RCC_GetPCLK1Freq>
 8009fa4:	61f8      	str	r0, [r7, #28]
        break;
 8009fa6:	e014      	b.n	8009fd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009fa8:	f7fe f8f8 	bl	800819c <HAL_RCC_GetPCLK2Freq>
 8009fac:	61f8      	str	r0, [r7, #28]
        break;
 8009fae:	e010      	b.n	8009fd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009fb0:	4b1d      	ldr	r3, [pc, #116]	; (800a028 <UART_SetConfig+0x4b0>)
 8009fb2:	61fb      	str	r3, [r7, #28]
        break;
 8009fb4:	e00d      	b.n	8009fd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009fb6:	f7fe f843 	bl	8008040 <HAL_RCC_GetSysClockFreq>
 8009fba:	61f8      	str	r0, [r7, #28]
        break;
 8009fbc:	e009      	b.n	8009fd2 <UART_SetConfig+0x45a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009fc2:	61fb      	str	r3, [r7, #28]
        break;
 8009fc4:	e005      	b.n	8009fd2 <UART_SetConfig+0x45a>
      default:
        pclk = 0U;
 8009fc6:	2300      	movs	r3, #0
 8009fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009fd0:	bf00      	nop
    }

    if (pclk != 0U)
 8009fd2:	69fb      	ldr	r3, [r7, #28]
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d019      	beq.n	800a00c <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	085a      	lsrs	r2, r3, #1
 8009fde:	69fb      	ldr	r3, [r7, #28]
 8009fe0:	441a      	add	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	fbb2 f3f3 	udiv	r3, r2, r3
 8009fea:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	2b0f      	cmp	r3, #15
 8009ff0:	d909      	bls.n	800a006 <UART_SetConfig+0x48e>
 8009ff2:	69bb      	ldr	r3, [r7, #24]
 8009ff4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ff8:	d205      	bcs.n	800a006 <UART_SetConfig+0x48e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009ffa:	69bb      	ldr	r3, [r7, #24]
 8009ffc:	b29a      	uxth	r2, r3
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	60da      	str	r2, [r3, #12]
 800a004:	e002      	b.n	800a00c <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800a006:	2301      	movs	r3, #1
 800a008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	2200      	movs	r2, #0
 800a010:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	2200      	movs	r2, #0
 800a016:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a018:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3728      	adds	r7, #40	; 0x28
 800a020:	46bd      	mov	sp, r7
 800a022:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a026:	bf00      	nop
 800a028:	00f42400 	.word	0x00f42400

0800a02c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b083      	sub	sp, #12
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a038:	f003 0301 	and.w	r3, r3, #1
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d00a      	beq.n	800a056 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	685b      	ldr	r3, [r3, #4]
 800a046:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	430a      	orrs	r2, r1
 800a054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a05a:	f003 0302 	and.w	r3, r3, #2
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d00a      	beq.n	800a078 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	430a      	orrs	r2, r1
 800a076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07c:	f003 0304 	and.w	r3, r3, #4
 800a080:	2b00      	cmp	r3, #0
 800a082:	d00a      	beq.n	800a09a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	430a      	orrs	r2, r1
 800a098:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09e:	f003 0308 	and.w	r3, r3, #8
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d00a      	beq.n	800a0bc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0c0:	f003 0310 	and.w	r3, r3, #16
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d00a      	beq.n	800a0de <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	430a      	orrs	r2, r1
 800a0dc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0e2:	f003 0320 	and.w	r3, r3, #32
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d00a      	beq.n	800a100 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	689b      	ldr	r3, [r3, #8]
 800a0f0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	430a      	orrs	r2, r1
 800a0fe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a104:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d01a      	beq.n	800a142 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	430a      	orrs	r2, r1
 800a120:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12a:	d10a      	bne.n	800a142 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	430a      	orrs	r2, r1
 800a140:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d00a      	beq.n	800a164 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	685b      	ldr	r3, [r3, #4]
 800a154:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	430a      	orrs	r2, r1
 800a162:	605a      	str	r2, [r3, #4]
  }
}
 800a164:	bf00      	nop
 800a166:	370c      	adds	r7, #12
 800a168:	46bd      	mov	sp, r7
 800a16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a16e:	4770      	bx	lr

0800a170 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af02      	add	r7, sp, #8
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a180:	f7fb f8aa 	bl	80052d8 <HAL_GetTick>
 800a184:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	f003 0308 	and.w	r3, r3, #8
 800a190:	2b08      	cmp	r3, #8
 800a192:	d10e      	bne.n	800a1b2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a194:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f82d 	bl	800a202 <UART_WaitOnFlagUntilTimeout>
 800a1a8:	4603      	mov	r3, r0
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d001      	beq.n	800a1b2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1ae:	2303      	movs	r3, #3
 800a1b0:	e023      	b.n	800a1fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b04      	cmp	r3, #4
 800a1be:	d10e      	bne.n	800a1de <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a1c0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a1c4:	9300      	str	r3, [sp, #0]
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	2200      	movs	r2, #0
 800a1ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 f817 	bl	800a202 <UART_WaitOnFlagUntilTimeout>
 800a1d4:	4603      	mov	r3, r0
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d001      	beq.n	800a1de <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a1da:	2303      	movs	r3, #3
 800a1dc:	e00d      	b.n	800a1fa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2220      	movs	r2, #32
 800a1e2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2220      	movs	r2, #32
 800a1e8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800a1f8:	2300      	movs	r3, #0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3710      	adds	r7, #16
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}

0800a202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a202:	b580      	push	{r7, lr}
 800a204:	b09c      	sub	sp, #112	; 0x70
 800a206:	af00      	add	r7, sp, #0
 800a208:	60f8      	str	r0, [r7, #12]
 800a20a:	60b9      	str	r1, [r7, #8]
 800a20c:	603b      	str	r3, [r7, #0]
 800a20e:	4613      	mov	r3, r2
 800a210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a212:	e0a5      	b.n	800a360 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a214:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a21a:	f000 80a1 	beq.w	800a360 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a21e:	f7fb f85b 	bl	80052d8 <HAL_GetTick>
 800a222:	4602      	mov	r2, r0
 800a224:	683b      	ldr	r3, [r7, #0]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d302      	bcc.n	800a234 <UART_WaitOnFlagUntilTimeout+0x32>
 800a22e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a230:	2b00      	cmp	r3, #0
 800a232:	d13e      	bne.n	800a2b2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a23c:	e853 3f00 	ldrex	r3, [r3]
 800a240:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a242:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a244:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a248:	667b      	str	r3, [r7, #100]	; 0x64
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	461a      	mov	r2, r3
 800a250:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a252:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a254:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a256:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a258:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a25a:	e841 2300 	strex	r3, r2, [r1]
 800a25e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a262:	2b00      	cmp	r3, #0
 800a264:	d1e6      	bne.n	800a234 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3308      	adds	r3, #8
 800a26c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a26e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a270:	e853 3f00 	ldrex	r3, [r3]
 800a274:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a278:	f023 0301 	bic.w	r3, r3, #1
 800a27c:	663b      	str	r3, [r7, #96]	; 0x60
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	3308      	adds	r3, #8
 800a284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a286:	64ba      	str	r2, [r7, #72]	; 0x48
 800a288:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a28a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a28c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a28e:	e841 2300 	strex	r3, r2, [r1]
 800a292:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a296:	2b00      	cmp	r3, #0
 800a298:	d1e5      	bne.n	800a266 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	2220      	movs	r2, #32
 800a29e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	2220      	movs	r2, #32
 800a2a4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800a2ae:	2303      	movs	r3, #3
 800a2b0:	e067      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0304 	and.w	r3, r3, #4
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d04f      	beq.n	800a360 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	69db      	ldr	r3, [r3, #28]
 800a2c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a2ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a2ce:	d147      	bne.n	800a360 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a2d8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2e2:	e853 3f00 	ldrex	r3, [r3]
 800a2e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a2ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	461a      	mov	r2, r3
 800a2f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a2f8:	637b      	str	r3, [r7, #52]	; 0x34
 800a2fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a2fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a2fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a300:	e841 2300 	strex	r3, r2, [r1]
 800a304:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d1e6      	bne.n	800a2da <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	3308      	adds	r3, #8
 800a312:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a314:	697b      	ldr	r3, [r7, #20]
 800a316:	e853 3f00 	ldrex	r3, [r3]
 800a31a:	613b      	str	r3, [r7, #16]
   return(result);
 800a31c:	693b      	ldr	r3, [r7, #16]
 800a31e:	f023 0301 	bic.w	r3, r3, #1
 800a322:	66bb      	str	r3, [r7, #104]	; 0x68
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	3308      	adds	r3, #8
 800a32a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a32c:	623a      	str	r2, [r7, #32]
 800a32e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a330:	69f9      	ldr	r1, [r7, #28]
 800a332:	6a3a      	ldr	r2, [r7, #32]
 800a334:	e841 2300 	strex	r3, r2, [r1]
 800a338:	61bb      	str	r3, [r7, #24]
   return(result);
 800a33a:	69bb      	ldr	r3, [r7, #24]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d1e5      	bne.n	800a30c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2220      	movs	r2, #32
 800a344:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2220      	movs	r2, #32
 800a34a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2220      	movs	r2, #32
 800a350:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e010      	b.n	800a382 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	69da      	ldr	r2, [r3, #28]
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	4013      	ands	r3, r2
 800a36a:	68ba      	ldr	r2, [r7, #8]
 800a36c:	429a      	cmp	r2, r3
 800a36e:	bf0c      	ite	eq
 800a370:	2301      	moveq	r3, #1
 800a372:	2300      	movne	r3, #0
 800a374:	b2db      	uxtb	r3, r3
 800a376:	461a      	mov	r2, r3
 800a378:	79fb      	ldrb	r3, [r7, #7]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	f43f af4a 	beq.w	800a214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a380:	2300      	movs	r3, #0
}
 800a382:	4618      	mov	r0, r3
 800a384:	3770      	adds	r7, #112	; 0x70
 800a386:	46bd      	mov	sp, r7
 800a388:	bd80      	pop	{r7, pc}
	...

0800a38c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b097      	sub	sp, #92	; 0x5c
 800a390:	af00      	add	r7, sp, #0
 800a392:	60f8      	str	r0, [r7, #12]
 800a394:	60b9      	str	r1, [r7, #8]
 800a396:	4613      	mov	r3, r2
 800a398:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	68ba      	ldr	r2, [r7, #8]
 800a39e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	88fa      	ldrh	r2, [r7, #6]
 800a3a4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	88fa      	ldrh	r2, [r7, #6]
 800a3ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3be:	d10e      	bne.n	800a3de <UART_Start_Receive_IT+0x52>
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	691b      	ldr	r3, [r3, #16]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d105      	bne.n	800a3d4 <UART_Start_Receive_IT+0x48>
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a3ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3d2:	e02d      	b.n	800a430 <UART_Start_Receive_IT+0xa4>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	22ff      	movs	r2, #255	; 0xff
 800a3d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3dc:	e028      	b.n	800a430 <UART_Start_Receive_IT+0xa4>
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	689b      	ldr	r3, [r3, #8]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d10d      	bne.n	800a402 <UART_Start_Receive_IT+0x76>
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	691b      	ldr	r3, [r3, #16]
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d104      	bne.n	800a3f8 <UART_Start_Receive_IT+0x6c>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	22ff      	movs	r2, #255	; 0xff
 800a3f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a3f6:	e01b      	b.n	800a430 <UART_Start_Receive_IT+0xa4>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	227f      	movs	r2, #127	; 0x7f
 800a3fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a400:	e016      	b.n	800a430 <UART_Start_Receive_IT+0xa4>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a40a:	d10d      	bne.n	800a428 <UART_Start_Receive_IT+0x9c>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	691b      	ldr	r3, [r3, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d104      	bne.n	800a41e <UART_Start_Receive_IT+0x92>
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	227f      	movs	r2, #127	; 0x7f
 800a418:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a41c:	e008      	b.n	800a430 <UART_Start_Receive_IT+0xa4>
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	223f      	movs	r2, #63	; 0x3f
 800a422:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a426:	e003      	b.n	800a430 <UART_Start_Receive_IT+0xa4>
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	2200      	movs	r2, #0
 800a42c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a430:	68fb      	ldr	r3, [r7, #12]
 800a432:	2200      	movs	r2, #0
 800a434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2222      	movs	r2, #34	; 0x22
 800a43c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	3308      	adds	r3, #8
 800a444:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a446:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a448:	e853 3f00 	ldrex	r3, [r3]
 800a44c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a44e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a450:	f043 0301 	orr.w	r3, r3, #1
 800a454:	657b      	str	r3, [r7, #84]	; 0x54
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	3308      	adds	r3, #8
 800a45c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800a45e:	64ba      	str	r2, [r7, #72]	; 0x48
 800a460:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a462:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a464:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a466:	e841 2300 	strex	r3, r2, [r1]
 800a46a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a46c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d1e5      	bne.n	800a43e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	689b      	ldr	r3, [r3, #8]
 800a476:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a47a:	d107      	bne.n	800a48c <UART_Start_Receive_IT+0x100>
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	691b      	ldr	r3, [r3, #16]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d103      	bne.n	800a48c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	4a24      	ldr	r2, [pc, #144]	; (800a518 <UART_Start_Receive_IT+0x18c>)
 800a488:	665a      	str	r2, [r3, #100]	; 0x64
 800a48a:	e002      	b.n	800a492 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a23      	ldr	r2, [pc, #140]	; (800a51c <UART_Start_Receive_IT+0x190>)
 800a490:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	691b      	ldr	r3, [r3, #16]
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d019      	beq.n	800a4d6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800a4b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	461a      	mov	r2, r3
 800a4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a4c0:	637b      	str	r3, [r7, #52]	; 0x34
 800a4c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a4c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a4ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e6      	bne.n	800a4a2 <UART_Start_Receive_IT+0x116>
 800a4d4:	e018      	b.n	800a508 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4dc:	697b      	ldr	r3, [r7, #20]
 800a4de:	e853 3f00 	ldrex	r3, [r3]
 800a4e2:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e4:	693b      	ldr	r3, [r7, #16]
 800a4e6:	f043 0320 	orr.w	r3, r3, #32
 800a4ea:	653b      	str	r3, [r7, #80]	; 0x50
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	461a      	mov	r2, r3
 800a4f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4f4:	623b      	str	r3, [r7, #32]
 800a4f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4f8:	69f9      	ldr	r1, [r7, #28]
 800a4fa:	6a3a      	ldr	r2, [r7, #32]
 800a4fc:	e841 2300 	strex	r3, r2, [r1]
 800a500:	61bb      	str	r3, [r7, #24]
   return(result);
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	2b00      	cmp	r3, #0
 800a506:	d1e6      	bne.n	800a4d6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	375c      	adds	r7, #92	; 0x5c
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr
 800a516:	bf00      	nop
 800a518:	0800abed 	.word	0x0800abed
 800a51c:	0800aa8d 	.word	0x0800aa8d

0800a520 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a520:	b580      	push	{r7, lr}
 800a522:	b096      	sub	sp, #88	; 0x58
 800a524:	af00      	add	r7, sp, #0
 800a526:	60f8      	str	r0, [r7, #12]
 800a528:	60b9      	str	r1, [r7, #8]
 800a52a:	4613      	mov	r3, r2
 800a52c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	68ba      	ldr	r2, [r7, #8]
 800a532:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	88fa      	ldrh	r2, [r7, #6]
 800a538:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	2200      	movs	r2, #0
 800a540:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	2222      	movs	r2, #34	; 0x22
 800a548:	67da      	str	r2, [r3, #124]	; 0x7c

  if (huart->hdmarx != NULL)
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d02b      	beq.n	800a5aa <UART_Start_Receive_DMA+0x8a>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a556:	4a42      	ldr	r2, [pc, #264]	; (800a660 <UART_Start_Receive_DMA+0x140>)
 800a558:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a55e:	4a41      	ldr	r2, [pc, #260]	; (800a664 <UART_Start_Receive_DMA+0x144>)
 800a560:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a566:	4a40      	ldr	r2, [pc, #256]	; (800a668 <UART_Start_Receive_DMA+0x148>)
 800a568:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a56e:	2200      	movs	r2, #0
 800a570:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3324      	adds	r3, #36	; 0x24
 800a57c:	4619      	mov	r1, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a582:	461a      	mov	r2, r3
 800a584:	88fb      	ldrh	r3, [r7, #6]
 800a586:	f7fb faef 	bl	8005b68 <HAL_DMA_Start_IT>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d00c      	beq.n	800a5aa <UART_Start_Receive_DMA+0x8a>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	2210      	movs	r2, #16
 800a594:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	2200      	movs	r2, #0
 800a59c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	2220      	movs	r2, #32
 800a5a4:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_ERROR;
 800a5a6:	2301      	movs	r3, #1
 800a5a8:	e055      	b.n	800a656 <UART_Start_Receive_DMA+0x136>
    }
  }
  __HAL_UNLOCK(huart);
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	691b      	ldr	r3, [r3, #16]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d018      	beq.n	800a5ec <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	e853 3f00 	ldrex	r3, [r3]
 800a5c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a5c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5ce:	657b      	str	r3, [r7, #84]	; 0x54
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	461a      	mov	r2, r3
 800a5d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a5d8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a5da:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a5dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a5de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a5e0:	e841 2300 	strex	r3, r2, [r1]
 800a5e4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a5e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d1e6      	bne.n	800a5ba <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	3308      	adds	r3, #8
 800a5f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a5f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5f6:	e853 3f00 	ldrex	r3, [r3]
 800a5fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fe:	f043 0301 	orr.w	r3, r3, #1
 800a602:	653b      	str	r3, [r7, #80]	; 0x50
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	3308      	adds	r3, #8
 800a60a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a60c:	637a      	str	r2, [r7, #52]	; 0x34
 800a60e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a610:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a612:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a614:	e841 2300 	strex	r3, r2, [r1]
 800a618:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1e5      	bne.n	800a5ec <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	3308      	adds	r3, #8
 800a626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a628:	697b      	ldr	r3, [r7, #20]
 800a62a:	e853 3f00 	ldrex	r3, [r3]
 800a62e:	613b      	str	r3, [r7, #16]
   return(result);
 800a630:	693b      	ldr	r3, [r7, #16]
 800a632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a636:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	3308      	adds	r3, #8
 800a63e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a640:	623a      	str	r2, [r7, #32]
 800a642:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a644:	69f9      	ldr	r1, [r7, #28]
 800a646:	6a3a      	ldr	r2, [r7, #32]
 800a648:	e841 2300 	strex	r3, r2, [r1]
 800a64c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	2b00      	cmp	r3, #0
 800a652:	d1e5      	bne.n	800a620 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800a654:	2300      	movs	r3, #0
}
 800a656:	4618      	mov	r0, r3
 800a658:	3758      	adds	r7, #88	; 0x58
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	0800a835 	.word	0x0800a835
 800a664:	0800a959 	.word	0x0800a959
 800a668:	0800a991 	.word	0x0800a991

0800a66c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b089      	sub	sp, #36	; 0x24
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
#else
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	e853 3f00 	ldrex	r3, [r3]
 800a680:	60bb      	str	r3, [r7, #8]
   return(result);
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800a688:	61fb      	str	r3, [r7, #28]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	461a      	mov	r2, r3
 800a690:	69fb      	ldr	r3, [r7, #28]
 800a692:	61bb      	str	r3, [r7, #24]
 800a694:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a696:	6979      	ldr	r1, [r7, #20]
 800a698:	69ba      	ldr	r2, [r7, #24]
 800a69a:	e841 2300 	strex	r3, r2, [r1]
 800a69e:	613b      	str	r3, [r7, #16]
   return(result);
 800a6a0:	693b      	ldr	r3, [r7, #16]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d1e6      	bne.n	800a674 <UART_EndTxTransfer+0x8>
#endif /* USART_CR1_FIFOEN */

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	679a      	str	r2, [r3, #120]	; 0x78
}
 800a6ac:	bf00      	nop
 800a6ae:	3724      	adds	r7, #36	; 0x24
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b095      	sub	sp, #84	; 0x54
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a6c8:	e853 3f00 	ldrex	r3, [r3]
 800a6cc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a6ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a6d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a6d4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	461a      	mov	r2, r3
 800a6dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a6de:	643b      	str	r3, [r7, #64]	; 0x40
 800a6e0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a6e2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a6e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a6e6:	e841 2300 	strex	r3, r2, [r1]
 800a6ea:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a6ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d1e6      	bne.n	800a6c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	3308      	adds	r3, #8
 800a6f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	6a3b      	ldr	r3, [r7, #32]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	61fb      	str	r3, [r7, #28]
   return(result);
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f023 0301 	bic.w	r3, r3, #1
 800a708:	64bb      	str	r3, [r7, #72]	; 0x48
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	3308      	adds	r3, #8
 800a710:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a712:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a714:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a718:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a72a:	2b01      	cmp	r3, #1
 800a72c:	d118      	bne.n	800a760 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	e853 3f00 	ldrex	r3, [r3]
 800a73a:	60bb      	str	r3, [r7, #8]
   return(result);
 800a73c:	68bb      	ldr	r3, [r7, #8]
 800a73e:	f023 0310 	bic.w	r3, r3, #16
 800a742:	647b      	str	r3, [r7, #68]	; 0x44
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	461a      	mov	r2, r3
 800a74a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a74c:	61bb      	str	r3, [r7, #24]
 800a74e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a750:	6979      	ldr	r1, [r7, #20]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	e841 2300 	strex	r3, r2, [r1]
 800a758:	613b      	str	r3, [r7, #16]
   return(result);
 800a75a:	693b      	ldr	r3, [r7, #16]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d1e6      	bne.n	800a72e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2220      	movs	r2, #32
 800a764:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	2200      	movs	r2, #0
 800a76a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	665a      	str	r2, [r3, #100]	; 0x64
}
 800a772:	bf00      	nop
 800a774:	3754      	adds	r7, #84	; 0x54
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a77e:	b580      	push	{r7, lr}
 800a780:	b090      	sub	sp, #64	; 0x40
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	f003 0320 	and.w	r3, r3, #32
 800a796:	2b00      	cmp	r3, #0
 800a798:	d137      	bne.n	800a80a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800a79a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a79c:	2200      	movs	r2, #0
 800a79e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a7a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	3308      	adds	r3, #8
 800a7a8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ac:	e853 3f00 	ldrex	r3, [r3]
 800a7b0:	623b      	str	r3, [r7, #32]
   return(result);
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7b8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	3308      	adds	r3, #8
 800a7c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a7c2:	633a      	str	r2, [r7, #48]	; 0x30
 800a7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a7c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a7ca:	e841 2300 	strex	r3, r2, [r1]
 800a7ce:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d1e5      	bne.n	800a7a2 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a7d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	e853 3f00 	ldrex	r3, [r3]
 800a7e2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a7ea:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	461a      	mov	r2, r3
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f4:	61fb      	str	r3, [r7, #28]
 800a7f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a7f8:	69b9      	ldr	r1, [r7, #24]
 800a7fa:	69fa      	ldr	r2, [r7, #28]
 800a7fc:	e841 2300 	strex	r3, r2, [r1]
 800a800:	617b      	str	r3, [r7, #20]
   return(result);
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d1e6      	bne.n	800a7d6 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a808:	e002      	b.n	800a810 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800a80a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800a80c:	f7ff f980 	bl	8009b10 <HAL_UART_TxCpltCallback>
}
 800a810:	bf00      	nop
 800a812:	3740      	adds	r7, #64	; 0x40
 800a814:	46bd      	mov	sp, r7
 800a816:	bd80      	pop	{r7, pc}

0800a818 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a824:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800a826:	68f8      	ldr	r0, [r7, #12]
 800a828:	f7ff f97c 	bl	8009b24 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a82c:	bf00      	nop
 800a82e:	3710      	adds	r7, #16
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b09c      	sub	sp, #112	; 0x70
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a840:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f003 0320 	and.w	r3, r3, #32
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d170      	bne.n	800a932 <UART_DMAReceiveCplt+0xfe>
  {
    huart->RxXferCount = 0U;
 800a850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a852:	2200      	movs	r2, #0
 800a854:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a85e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a860:	e853 3f00 	ldrex	r3, [r3]
 800a864:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a86c:	66bb      	str	r3, [r7, #104]	; 0x68
 800a86e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	461a      	mov	r2, r3
 800a874:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a876:	65bb      	str	r3, [r7, #88]	; 0x58
 800a878:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a87a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a87c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a87e:	e841 2300 	strex	r3, r2, [r1]
 800a882:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a884:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a886:	2b00      	cmp	r3, #0
 800a888:	d1e6      	bne.n	800a858 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a88a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	3308      	adds	r3, #8
 800a890:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a894:	e853 3f00 	ldrex	r3, [r3]
 800a898:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a89c:	f023 0301 	bic.w	r3, r3, #1
 800a8a0:	667b      	str	r3, [r7, #100]	; 0x64
 800a8a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3308      	adds	r3, #8
 800a8a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800a8aa:	647a      	str	r2, [r7, #68]	; 0x44
 800a8ac:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ae:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a8b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a8b2:	e841 2300 	strex	r3, r2, [r1]
 800a8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a8b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d1e5      	bne.n	800a88a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a8be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	3308      	adds	r3, #8
 800a8c4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8c8:	e853 3f00 	ldrex	r3, [r3]
 800a8cc:	623b      	str	r3, [r7, #32]
   return(result);
 800a8ce:	6a3b      	ldr	r3, [r7, #32]
 800a8d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a8d4:	663b      	str	r3, [r7, #96]	; 0x60
 800a8d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	3308      	adds	r3, #8
 800a8dc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a8de:	633a      	str	r2, [r7, #48]	; 0x30
 800a8e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a8e6:	e841 2300 	strex	r3, r2, [r1]
 800a8ea:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a8ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d1e5      	bne.n	800a8be <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800a8f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8f4:	2220      	movs	r2, #32
 800a8f6:	67da      	str	r2, [r3, #124]	; 0x7c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a8f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8fc:	2b01      	cmp	r3, #1
 800a8fe:	d118      	bne.n	800a932 <UART_DMAReceiveCplt+0xfe>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a900:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	e853 3f00 	ldrex	r3, [r3]
 800a90c:	60fb      	str	r3, [r7, #12]
   return(result);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f023 0310 	bic.w	r3, r3, #16
 800a914:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	461a      	mov	r2, r3
 800a91c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a91e:	61fb      	str	r3, [r7, #28]
 800a920:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a922:	69b9      	ldr	r1, [r7, #24]
 800a924:	69fa      	ldr	r2, [r7, #28]
 800a926:	e841 2300 	strex	r3, r2, [r1]
 800a92a:	617b      	str	r3, [r7, #20]
   return(result);
 800a92c:	697b      	ldr	r3, [r7, #20]
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d1e6      	bne.n	800a900 <UART_DMAReceiveCplt+0xcc>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a936:	2b01      	cmp	r3, #1
 800a938:	d107      	bne.n	800a94a <UART_DMAReceiveCplt+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a93a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a93c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a940:	4619      	mov	r1, r3
 800a942:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a944:	f7ff f90c 	bl	8009b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a948:	e002      	b.n	800a950 <UART_DMAReceiveCplt+0x11c>
    HAL_UART_RxCpltCallback(huart);
 800a94a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800a94c:	f7f9 fbc4 	bl	80040d8 <HAL_UART_RxCpltCallback>
}
 800a950:	bf00      	nop
 800a952:	3770      	adds	r7, #112	; 0x70
 800a954:	46bd      	mov	sp, r7
 800a956:	bd80      	pop	{r7, pc}

0800a958 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b084      	sub	sp, #16
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a964:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a96a:	2b01      	cmp	r3, #1
 800a96c:	d109      	bne.n	800a982 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800a974:	085b      	lsrs	r3, r3, #1
 800a976:	b29b      	uxth	r3, r3
 800a978:	4619      	mov	r1, r3
 800a97a:	68f8      	ldr	r0, [r7, #12]
 800a97c:	f7ff f8f0 	bl	8009b60 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800a980:	e002      	b.n	800a988 <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f7ff f8d8 	bl	8009b38 <HAL_UART_RxHalfCpltCallback>
}
 800a988:	bf00      	nop
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a99c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9a2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800a9a4:	697b      	ldr	r3, [r7, #20]
 800a9a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9a8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800a9aa:	697b      	ldr	r3, [r7, #20]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b4:	2b80      	cmp	r3, #128	; 0x80
 800a9b6:	d109      	bne.n	800a9cc <UART_DMAError+0x3c>
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	2b21      	cmp	r3, #33	; 0x21
 800a9bc:	d106      	bne.n	800a9cc <UART_DMAError+0x3c>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800a9be:	697b      	ldr	r3, [r7, #20]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800a9c6:	6978      	ldr	r0, [r7, #20]
 800a9c8:	f7ff fe50 	bl	800a66c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800a9cc:	697b      	ldr	r3, [r7, #20]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9d6:	2b40      	cmp	r3, #64	; 0x40
 800a9d8:	d109      	bne.n	800a9ee <UART_DMAError+0x5e>
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	2b22      	cmp	r3, #34	; 0x22
 800a9de:	d106      	bne.n	800a9ee <UART_DMAError+0x5e>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a9e0:	697b      	ldr	r3, [r7, #20]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800a9e8:	6978      	ldr	r0, [r7, #20]
 800a9ea:	f7ff fe65 	bl	800a6b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a9ee:	697b      	ldr	r3, [r7, #20]
 800a9f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a9f4:	f043 0210 	orr.w	r2, r3, #16
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a9fe:	6978      	ldr	r0, [r7, #20]
 800aa00:	f7ff f8a4 	bl	8009b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa04:	bf00      	nop
 800aa06:	3718      	adds	r7, #24
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	bd80      	pop	{r7, pc}

0800aa0c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b084      	sub	sp, #16
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa18:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	2200      	movs	r2, #0
 800aa26:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800aa2a:	68f8      	ldr	r0, [r7, #12]
 800aa2c:	f7ff f88e 	bl	8009b4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa30:	bf00      	nop
 800aa32:	3710      	adds	r7, #16
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}

0800aa38 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b088      	sub	sp, #32
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	e853 3f00 	ldrex	r3, [r3]
 800aa4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa54:	61fb      	str	r3, [r7, #28]
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	69fb      	ldr	r3, [r7, #28]
 800aa5e:	61bb      	str	r3, [r7, #24]
 800aa60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa62:	6979      	ldr	r1, [r7, #20]
 800aa64:	69ba      	ldr	r2, [r7, #24]
 800aa66:	e841 2300 	strex	r3, r2, [r1]
 800aa6a:	613b      	str	r3, [r7, #16]
   return(result);
 800aa6c:	693b      	ldr	r3, [r7, #16]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d1e6      	bne.n	800aa40 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2220      	movs	r2, #32
 800aa76:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f7ff f846 	bl	8009b10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800aa84:	bf00      	nop
 800aa86:	3720      	adds	r7, #32
 800aa88:	46bd      	mov	sp, r7
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	b096      	sub	sp, #88	; 0x58
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800aa9a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aaa2:	2b22      	cmp	r3, #34	; 0x22
 800aaa4:	f040 8094 	bne.w	800abd0 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800aaae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800aab2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800aab6:	b2d9      	uxtb	r1, r3
 800aab8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800aabc:	b2da      	uxtb	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aac2:	400a      	ands	r2, r1
 800aac4:	b2d2      	uxtb	r2, r2
 800aac6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aacc:	1c5a      	adds	r2, r3, #1
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aad8:	b29b      	uxth	r3, r3
 800aada:	3b01      	subs	r3, #1
 800aadc:	b29a      	uxth	r2, r3
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800aaea:	b29b      	uxth	r3, r3
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	d179      	bne.n	800abe4 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	e853 3f00 	ldrex	r3, [r3]
 800aafc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800aafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab00:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab04:	653b      	str	r3, [r7, #80]	; 0x50
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ab0e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab10:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ab14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ab16:	e841 2300 	strex	r3, r2, [r1]
 800ab1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ab1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d1e6      	bne.n	800aaf0 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	3308      	adds	r3, #8
 800ab28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab2c:	e853 3f00 	ldrex	r3, [r3]
 800ab30:	623b      	str	r3, [r7, #32]
   return(result);
 800ab32:	6a3b      	ldr	r3, [r7, #32]
 800ab34:	f023 0301 	bic.w	r3, r3, #1
 800ab38:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	3308      	adds	r3, #8
 800ab40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ab42:	633a      	str	r2, [r7, #48]	; 0x30
 800ab44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ab48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab4a:	e841 2300 	strex	r3, r2, [r1]
 800ab4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ab50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d1e5      	bne.n	800ab22 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	2220      	movs	r2, #32
 800ab5a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab66:	2b01      	cmp	r3, #1
 800ab68:	d12e      	bne.n	800abc8 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab76:	693b      	ldr	r3, [r7, #16]
 800ab78:	e853 3f00 	ldrex	r3, [r3]
 800ab7c:	60fb      	str	r3, [r7, #12]
   return(result);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f023 0310 	bic.w	r3, r3, #16
 800ab84:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	461a      	mov	r2, r3
 800ab8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab8e:	61fb      	str	r3, [r7, #28]
 800ab90:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab92:	69b9      	ldr	r1, [r7, #24]
 800ab94:	69fa      	ldr	r2, [r7, #28]
 800ab96:	e841 2300 	strex	r3, r2, [r1]
 800ab9a:	617b      	str	r3, [r7, #20]
   return(result);
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d1e6      	bne.n	800ab70 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	69db      	ldr	r3, [r3, #28]
 800aba8:	f003 0310 	and.w	r3, r3, #16
 800abac:	2b10      	cmp	r3, #16
 800abae:	d103      	bne.n	800abb8 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	2210      	movs	r2, #16
 800abb6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800abbe:	4619      	mov	r1, r3
 800abc0:	6878      	ldr	r0, [r7, #4]
 800abc2:	f7fe ffcd 	bl	8009b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800abc6:	e00d      	b.n	800abe4 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800abc8:	6878      	ldr	r0, [r7, #4]
 800abca:	f7f9 fa85 	bl	80040d8 <HAL_UART_RxCpltCallback>
}
 800abce:	e009      	b.n	800abe4 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	8b1b      	ldrh	r3, [r3, #24]
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	f042 0208 	orr.w	r2, r2, #8
 800abe0:	b292      	uxth	r2, r2
 800abe2:	831a      	strh	r2, [r3, #24]
}
 800abe4:	bf00      	nop
 800abe6:	3758      	adds	r7, #88	; 0x58
 800abe8:	46bd      	mov	sp, r7
 800abea:	bd80      	pop	{r7, pc}

0800abec <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800abec:	b580      	push	{r7, lr}
 800abee:	b096      	sub	sp, #88	; 0x58
 800abf0:	af00      	add	r7, sp, #0
 800abf2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800abfa:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac02:	2b22      	cmp	r3, #34	; 0x22
 800ac04:	f040 8094 	bne.w	800ad30 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ac0e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac16:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800ac18:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800ac1c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800ac20:	4013      	ands	r3, r2
 800ac22:	b29a      	uxth	r2, r3
 800ac24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac26:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac2c:	1c9a      	adds	r2, r3, #2
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac38:	b29b      	uxth	r3, r3
 800ac3a:	3b01      	subs	r3, #1
 800ac3c:	b29a      	uxth	r2, r3
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d179      	bne.n	800ad44 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac58:	e853 3f00 	ldrex	r3, [r3]
 800ac5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ac5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac60:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ac64:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	461a      	mov	r2, r3
 800ac6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac6e:	643b      	str	r3, [r7, #64]	; 0x40
 800ac70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ac74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ac76:	e841 2300 	strex	r3, r2, [r1]
 800ac7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d1e6      	bne.n	800ac50 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	3308      	adds	r3, #8
 800ac88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac8a:	6a3b      	ldr	r3, [r7, #32]
 800ac8c:	e853 3f00 	ldrex	r3, [r3]
 800ac90:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac92:	69fb      	ldr	r3, [r7, #28]
 800ac94:	f023 0301 	bic.w	r3, r3, #1
 800ac98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	3308      	adds	r3, #8
 800aca0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800aca2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800aca4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aca6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aca8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800acaa:	e841 2300 	strex	r3, r2, [r1]
 800acae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d1e5      	bne.n	800ac82 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	2220      	movs	r2, #32
 800acba:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2200      	movs	r2, #0
 800acc0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acc6:	2b01      	cmp	r3, #1
 800acc8:	d12e      	bne.n	800ad28 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	e853 3f00 	ldrex	r3, [r3]
 800acdc:	60bb      	str	r3, [r7, #8]
   return(result);
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	f023 0310 	bic.w	r3, r3, #16
 800ace4:	647b      	str	r3, [r7, #68]	; 0x44
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800acee:	61bb      	str	r3, [r7, #24]
 800acf0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acf2:	6979      	ldr	r1, [r7, #20]
 800acf4:	69ba      	ldr	r2, [r7, #24]
 800acf6:	e841 2300 	strex	r3, r2, [r1]
 800acfa:	613b      	str	r3, [r7, #16]
   return(result);
 800acfc:	693b      	ldr	r3, [r7, #16]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d1e6      	bne.n	800acd0 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	69db      	ldr	r3, [r3, #28]
 800ad08:	f003 0310 	and.w	r3, r3, #16
 800ad0c:	2b10      	cmp	r3, #16
 800ad0e:	d103      	bne.n	800ad18 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	2210      	movs	r2, #16
 800ad16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ad1e:	4619      	mov	r1, r3
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f7fe ff1d 	bl	8009b60 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800ad26:	e00d      	b.n	800ad44 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800ad28:	6878      	ldr	r0, [r7, #4]
 800ad2a:	f7f9 f9d5 	bl	80040d8 <HAL_UART_RxCpltCallback>
}
 800ad2e:	e009      	b.n	800ad44 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	8b1b      	ldrh	r3, [r3, #24]
 800ad36:	b29a      	uxth	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f042 0208 	orr.w	r2, r2, #8
 800ad40:	b292      	uxth	r2, r2
 800ad42:	831a      	strh	r2, [r3, #24]
}
 800ad44:	bf00      	nop
 800ad46:	3758      	adds	r7, #88	; 0x58
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ad4c:	b480      	push	{r7}
 800ad4e:	b083      	sub	sp, #12
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ad54:	bf00      	nop
 800ad56:	370c      	adds	r7, #12
 800ad58:	46bd      	mov	sp, r7
 800ad5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad5e:	4770      	bx	lr

0800ad60 <sulp>:
 800ad60:	b570      	push	{r4, r5, r6, lr}
 800ad62:	4604      	mov	r4, r0
 800ad64:	460d      	mov	r5, r1
 800ad66:	ec45 4b10 	vmov	d0, r4, r5
 800ad6a:	4616      	mov	r6, r2
 800ad6c:	f002 fa9c 	bl	800d2a8 <__ulp>
 800ad70:	ec51 0b10 	vmov	r0, r1, d0
 800ad74:	b17e      	cbz	r6, 800ad96 <sulp+0x36>
 800ad76:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad7a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	dd09      	ble.n	800ad96 <sulp+0x36>
 800ad82:	051b      	lsls	r3, r3, #20
 800ad84:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ad88:	2400      	movs	r4, #0
 800ad8a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ad8e:	4622      	mov	r2, r4
 800ad90:	462b      	mov	r3, r5
 800ad92:	f7f5 fc29 	bl	80005e8 <__aeabi_dmul>
 800ad96:	bd70      	pop	{r4, r5, r6, pc}

0800ad98 <_strtod_l>:
 800ad98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9c:	ed2d 8b02 	vpush	{d8}
 800ada0:	b09b      	sub	sp, #108	; 0x6c
 800ada2:	4604      	mov	r4, r0
 800ada4:	9213      	str	r2, [sp, #76]	; 0x4c
 800ada6:	2200      	movs	r2, #0
 800ada8:	9216      	str	r2, [sp, #88]	; 0x58
 800adaa:	460d      	mov	r5, r1
 800adac:	f04f 0800 	mov.w	r8, #0
 800adb0:	f04f 0900 	mov.w	r9, #0
 800adb4:	460a      	mov	r2, r1
 800adb6:	9215      	str	r2, [sp, #84]	; 0x54
 800adb8:	7811      	ldrb	r1, [r2, #0]
 800adba:	292b      	cmp	r1, #43	; 0x2b
 800adbc:	d04c      	beq.n	800ae58 <_strtod_l+0xc0>
 800adbe:	d83a      	bhi.n	800ae36 <_strtod_l+0x9e>
 800adc0:	290d      	cmp	r1, #13
 800adc2:	d834      	bhi.n	800ae2e <_strtod_l+0x96>
 800adc4:	2908      	cmp	r1, #8
 800adc6:	d834      	bhi.n	800ae32 <_strtod_l+0x9a>
 800adc8:	2900      	cmp	r1, #0
 800adca:	d03d      	beq.n	800ae48 <_strtod_l+0xb0>
 800adcc:	2200      	movs	r2, #0
 800adce:	920a      	str	r2, [sp, #40]	; 0x28
 800add0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800add2:	7832      	ldrb	r2, [r6, #0]
 800add4:	2a30      	cmp	r2, #48	; 0x30
 800add6:	f040 80b4 	bne.w	800af42 <_strtod_l+0x1aa>
 800adda:	7872      	ldrb	r2, [r6, #1]
 800addc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800ade0:	2a58      	cmp	r2, #88	; 0x58
 800ade2:	d170      	bne.n	800aec6 <_strtod_l+0x12e>
 800ade4:	9302      	str	r3, [sp, #8]
 800ade6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ade8:	9301      	str	r3, [sp, #4]
 800adea:	ab16      	add	r3, sp, #88	; 0x58
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	4a8e      	ldr	r2, [pc, #568]	; (800b028 <_strtod_l+0x290>)
 800adf0:	ab17      	add	r3, sp, #92	; 0x5c
 800adf2:	a915      	add	r1, sp, #84	; 0x54
 800adf4:	4620      	mov	r0, r4
 800adf6:	f001 fb3d 	bl	800c474 <__gethex>
 800adfa:	f010 070f 	ands.w	r7, r0, #15
 800adfe:	4605      	mov	r5, r0
 800ae00:	d005      	beq.n	800ae0e <_strtod_l+0x76>
 800ae02:	2f06      	cmp	r7, #6
 800ae04:	d12a      	bne.n	800ae5c <_strtod_l+0xc4>
 800ae06:	3601      	adds	r6, #1
 800ae08:	2300      	movs	r3, #0
 800ae0a:	9615      	str	r6, [sp, #84]	; 0x54
 800ae0c:	930a      	str	r3, [sp, #40]	; 0x28
 800ae0e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	f040 857f 	bne.w	800b914 <_strtod_l+0xb7c>
 800ae16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae18:	b1db      	cbz	r3, 800ae52 <_strtod_l+0xba>
 800ae1a:	4642      	mov	r2, r8
 800ae1c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae20:	ec43 2b10 	vmov	d0, r2, r3
 800ae24:	b01b      	add	sp, #108	; 0x6c
 800ae26:	ecbd 8b02 	vpop	{d8}
 800ae2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae2e:	2920      	cmp	r1, #32
 800ae30:	d1cc      	bne.n	800adcc <_strtod_l+0x34>
 800ae32:	3201      	adds	r2, #1
 800ae34:	e7bf      	b.n	800adb6 <_strtod_l+0x1e>
 800ae36:	292d      	cmp	r1, #45	; 0x2d
 800ae38:	d1c8      	bne.n	800adcc <_strtod_l+0x34>
 800ae3a:	2101      	movs	r1, #1
 800ae3c:	910a      	str	r1, [sp, #40]	; 0x28
 800ae3e:	1c51      	adds	r1, r2, #1
 800ae40:	9115      	str	r1, [sp, #84]	; 0x54
 800ae42:	7852      	ldrb	r2, [r2, #1]
 800ae44:	2a00      	cmp	r2, #0
 800ae46:	d1c3      	bne.n	800add0 <_strtod_l+0x38>
 800ae48:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ae4a:	9515      	str	r5, [sp, #84]	; 0x54
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	f040 855f 	bne.w	800b910 <_strtod_l+0xb78>
 800ae52:	4642      	mov	r2, r8
 800ae54:	464b      	mov	r3, r9
 800ae56:	e7e3      	b.n	800ae20 <_strtod_l+0x88>
 800ae58:	2100      	movs	r1, #0
 800ae5a:	e7ef      	b.n	800ae3c <_strtod_l+0xa4>
 800ae5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ae5e:	b13a      	cbz	r2, 800ae70 <_strtod_l+0xd8>
 800ae60:	2135      	movs	r1, #53	; 0x35
 800ae62:	a818      	add	r0, sp, #96	; 0x60
 800ae64:	f002 fb1d 	bl	800d4a2 <__copybits>
 800ae68:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ae6a:	4620      	mov	r0, r4
 800ae6c:	f001 fef0 	bl	800cc50 <_Bfree>
 800ae70:	3f01      	subs	r7, #1
 800ae72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ae74:	2f04      	cmp	r7, #4
 800ae76:	d806      	bhi.n	800ae86 <_strtod_l+0xee>
 800ae78:	e8df f007 	tbb	[pc, r7]
 800ae7c:	201d0314 	.word	0x201d0314
 800ae80:	14          	.byte	0x14
 800ae81:	00          	.byte	0x00
 800ae82:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ae86:	05e9      	lsls	r1, r5, #23
 800ae88:	bf48      	it	mi
 800ae8a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ae8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae92:	0d1b      	lsrs	r3, r3, #20
 800ae94:	051b      	lsls	r3, r3, #20
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d1b9      	bne.n	800ae0e <_strtod_l+0x76>
 800ae9a:	f001 f9eb 	bl	800c274 <__errno>
 800ae9e:	2322      	movs	r3, #34	; 0x22
 800aea0:	6003      	str	r3, [r0, #0]
 800aea2:	e7b4      	b.n	800ae0e <_strtod_l+0x76>
 800aea4:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800aea8:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800aeac:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800aeb0:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800aeb4:	e7e7      	b.n	800ae86 <_strtod_l+0xee>
 800aeb6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b030 <_strtod_l+0x298>
 800aeba:	e7e4      	b.n	800ae86 <_strtod_l+0xee>
 800aebc:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800aec0:	f04f 38ff 	mov.w	r8, #4294967295
 800aec4:	e7df      	b.n	800ae86 <_strtod_l+0xee>
 800aec6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aec8:	1c5a      	adds	r2, r3, #1
 800aeca:	9215      	str	r2, [sp, #84]	; 0x54
 800aecc:	785b      	ldrb	r3, [r3, #1]
 800aece:	2b30      	cmp	r3, #48	; 0x30
 800aed0:	d0f9      	beq.n	800aec6 <_strtod_l+0x12e>
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d09b      	beq.n	800ae0e <_strtod_l+0x76>
 800aed6:	2301      	movs	r3, #1
 800aed8:	f04f 0a00 	mov.w	sl, #0
 800aedc:	9304      	str	r3, [sp, #16]
 800aede:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800aee0:	930b      	str	r3, [sp, #44]	; 0x2c
 800aee2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800aee6:	46d3      	mov	fp, sl
 800aee8:	220a      	movs	r2, #10
 800aeea:	9815      	ldr	r0, [sp, #84]	; 0x54
 800aeec:	7806      	ldrb	r6, [r0, #0]
 800aeee:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800aef2:	b2d9      	uxtb	r1, r3
 800aef4:	2909      	cmp	r1, #9
 800aef6:	d926      	bls.n	800af46 <_strtod_l+0x1ae>
 800aef8:	494c      	ldr	r1, [pc, #304]	; (800b02c <_strtod_l+0x294>)
 800aefa:	2201      	movs	r2, #1
 800aefc:	f001 f961 	bl	800c1c2 <strncmp>
 800af00:	2800      	cmp	r0, #0
 800af02:	d030      	beq.n	800af66 <_strtod_l+0x1ce>
 800af04:	2000      	movs	r0, #0
 800af06:	4632      	mov	r2, r6
 800af08:	9005      	str	r0, [sp, #20]
 800af0a:	465e      	mov	r6, fp
 800af0c:	4603      	mov	r3, r0
 800af0e:	2a65      	cmp	r2, #101	; 0x65
 800af10:	d001      	beq.n	800af16 <_strtod_l+0x17e>
 800af12:	2a45      	cmp	r2, #69	; 0x45
 800af14:	d113      	bne.n	800af3e <_strtod_l+0x1a6>
 800af16:	b91e      	cbnz	r6, 800af20 <_strtod_l+0x188>
 800af18:	9a04      	ldr	r2, [sp, #16]
 800af1a:	4302      	orrs	r2, r0
 800af1c:	d094      	beq.n	800ae48 <_strtod_l+0xb0>
 800af1e:	2600      	movs	r6, #0
 800af20:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800af22:	1c6a      	adds	r2, r5, #1
 800af24:	9215      	str	r2, [sp, #84]	; 0x54
 800af26:	786a      	ldrb	r2, [r5, #1]
 800af28:	2a2b      	cmp	r2, #43	; 0x2b
 800af2a:	d074      	beq.n	800b016 <_strtod_l+0x27e>
 800af2c:	2a2d      	cmp	r2, #45	; 0x2d
 800af2e:	d078      	beq.n	800b022 <_strtod_l+0x28a>
 800af30:	f04f 0c00 	mov.w	ip, #0
 800af34:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800af38:	2909      	cmp	r1, #9
 800af3a:	d97f      	bls.n	800b03c <_strtod_l+0x2a4>
 800af3c:	9515      	str	r5, [sp, #84]	; 0x54
 800af3e:	2700      	movs	r7, #0
 800af40:	e09e      	b.n	800b080 <_strtod_l+0x2e8>
 800af42:	2300      	movs	r3, #0
 800af44:	e7c8      	b.n	800aed8 <_strtod_l+0x140>
 800af46:	f1bb 0f08 	cmp.w	fp, #8
 800af4a:	bfd8      	it	le
 800af4c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800af4e:	f100 0001 	add.w	r0, r0, #1
 800af52:	bfda      	itte	le
 800af54:	fb02 3301 	mlale	r3, r2, r1, r3
 800af58:	9309      	strle	r3, [sp, #36]	; 0x24
 800af5a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800af5e:	f10b 0b01 	add.w	fp, fp, #1
 800af62:	9015      	str	r0, [sp, #84]	; 0x54
 800af64:	e7c1      	b.n	800aeea <_strtod_l+0x152>
 800af66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af68:	1c5a      	adds	r2, r3, #1
 800af6a:	9215      	str	r2, [sp, #84]	; 0x54
 800af6c:	785a      	ldrb	r2, [r3, #1]
 800af6e:	f1bb 0f00 	cmp.w	fp, #0
 800af72:	d037      	beq.n	800afe4 <_strtod_l+0x24c>
 800af74:	9005      	str	r0, [sp, #20]
 800af76:	465e      	mov	r6, fp
 800af78:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800af7c:	2b09      	cmp	r3, #9
 800af7e:	d912      	bls.n	800afa6 <_strtod_l+0x20e>
 800af80:	2301      	movs	r3, #1
 800af82:	e7c4      	b.n	800af0e <_strtod_l+0x176>
 800af84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af86:	1c5a      	adds	r2, r3, #1
 800af88:	9215      	str	r2, [sp, #84]	; 0x54
 800af8a:	785a      	ldrb	r2, [r3, #1]
 800af8c:	3001      	adds	r0, #1
 800af8e:	2a30      	cmp	r2, #48	; 0x30
 800af90:	d0f8      	beq.n	800af84 <_strtod_l+0x1ec>
 800af92:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800af96:	2b08      	cmp	r3, #8
 800af98:	f200 84c1 	bhi.w	800b91e <_strtod_l+0xb86>
 800af9c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af9e:	9005      	str	r0, [sp, #20]
 800afa0:	2000      	movs	r0, #0
 800afa2:	930b      	str	r3, [sp, #44]	; 0x2c
 800afa4:	4606      	mov	r6, r0
 800afa6:	3a30      	subs	r2, #48	; 0x30
 800afa8:	f100 0301 	add.w	r3, r0, #1
 800afac:	d014      	beq.n	800afd8 <_strtod_l+0x240>
 800afae:	9905      	ldr	r1, [sp, #20]
 800afb0:	4419      	add	r1, r3
 800afb2:	9105      	str	r1, [sp, #20]
 800afb4:	4633      	mov	r3, r6
 800afb6:	eb00 0c06 	add.w	ip, r0, r6
 800afba:	210a      	movs	r1, #10
 800afbc:	4563      	cmp	r3, ip
 800afbe:	d113      	bne.n	800afe8 <_strtod_l+0x250>
 800afc0:	1833      	adds	r3, r6, r0
 800afc2:	2b08      	cmp	r3, #8
 800afc4:	f106 0601 	add.w	r6, r6, #1
 800afc8:	4406      	add	r6, r0
 800afca:	dc1a      	bgt.n	800b002 <_strtod_l+0x26a>
 800afcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800afce:	230a      	movs	r3, #10
 800afd0:	fb03 2301 	mla	r3, r3, r1, r2
 800afd4:	9309      	str	r3, [sp, #36]	; 0x24
 800afd6:	2300      	movs	r3, #0
 800afd8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800afda:	1c51      	adds	r1, r2, #1
 800afdc:	9115      	str	r1, [sp, #84]	; 0x54
 800afde:	7852      	ldrb	r2, [r2, #1]
 800afe0:	4618      	mov	r0, r3
 800afe2:	e7c9      	b.n	800af78 <_strtod_l+0x1e0>
 800afe4:	4658      	mov	r0, fp
 800afe6:	e7d2      	b.n	800af8e <_strtod_l+0x1f6>
 800afe8:	2b08      	cmp	r3, #8
 800afea:	f103 0301 	add.w	r3, r3, #1
 800afee:	dc03      	bgt.n	800aff8 <_strtod_l+0x260>
 800aff0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aff2:	434f      	muls	r7, r1
 800aff4:	9709      	str	r7, [sp, #36]	; 0x24
 800aff6:	e7e1      	b.n	800afbc <_strtod_l+0x224>
 800aff8:	2b10      	cmp	r3, #16
 800affa:	bfd8      	it	le
 800affc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800b000:	e7dc      	b.n	800afbc <_strtod_l+0x224>
 800b002:	2e10      	cmp	r6, #16
 800b004:	bfdc      	itt	le
 800b006:	230a      	movle	r3, #10
 800b008:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800b00c:	e7e3      	b.n	800afd6 <_strtod_l+0x23e>
 800b00e:	2300      	movs	r3, #0
 800b010:	9305      	str	r3, [sp, #20]
 800b012:	2301      	movs	r3, #1
 800b014:	e780      	b.n	800af18 <_strtod_l+0x180>
 800b016:	f04f 0c00 	mov.w	ip, #0
 800b01a:	1caa      	adds	r2, r5, #2
 800b01c:	9215      	str	r2, [sp, #84]	; 0x54
 800b01e:	78aa      	ldrb	r2, [r5, #2]
 800b020:	e788      	b.n	800af34 <_strtod_l+0x19c>
 800b022:	f04f 0c01 	mov.w	ip, #1
 800b026:	e7f8      	b.n	800b01a <_strtod_l+0x282>
 800b028:	0800ff04 	.word	0x0800ff04
 800b02c:	0800fef4 	.word	0x0800fef4
 800b030:	7ff00000 	.word	0x7ff00000
 800b034:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b036:	1c51      	adds	r1, r2, #1
 800b038:	9115      	str	r1, [sp, #84]	; 0x54
 800b03a:	7852      	ldrb	r2, [r2, #1]
 800b03c:	2a30      	cmp	r2, #48	; 0x30
 800b03e:	d0f9      	beq.n	800b034 <_strtod_l+0x29c>
 800b040:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800b044:	2908      	cmp	r1, #8
 800b046:	f63f af7a 	bhi.w	800af3e <_strtod_l+0x1a6>
 800b04a:	3a30      	subs	r2, #48	; 0x30
 800b04c:	9208      	str	r2, [sp, #32]
 800b04e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b050:	920c      	str	r2, [sp, #48]	; 0x30
 800b052:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800b054:	1c57      	adds	r7, r2, #1
 800b056:	9715      	str	r7, [sp, #84]	; 0x54
 800b058:	7852      	ldrb	r2, [r2, #1]
 800b05a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800b05e:	f1be 0f09 	cmp.w	lr, #9
 800b062:	d938      	bls.n	800b0d6 <_strtod_l+0x33e>
 800b064:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b066:	1a7f      	subs	r7, r7, r1
 800b068:	2f08      	cmp	r7, #8
 800b06a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800b06e:	dc03      	bgt.n	800b078 <_strtod_l+0x2e0>
 800b070:	9908      	ldr	r1, [sp, #32]
 800b072:	428f      	cmp	r7, r1
 800b074:	bfa8      	it	ge
 800b076:	460f      	movge	r7, r1
 800b078:	f1bc 0f00 	cmp.w	ip, #0
 800b07c:	d000      	beq.n	800b080 <_strtod_l+0x2e8>
 800b07e:	427f      	negs	r7, r7
 800b080:	2e00      	cmp	r6, #0
 800b082:	d14f      	bne.n	800b124 <_strtod_l+0x38c>
 800b084:	9904      	ldr	r1, [sp, #16]
 800b086:	4301      	orrs	r1, r0
 800b088:	f47f aec1 	bne.w	800ae0e <_strtod_l+0x76>
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	f47f aedb 	bne.w	800ae48 <_strtod_l+0xb0>
 800b092:	2a69      	cmp	r2, #105	; 0x69
 800b094:	d029      	beq.n	800b0ea <_strtod_l+0x352>
 800b096:	dc26      	bgt.n	800b0e6 <_strtod_l+0x34e>
 800b098:	2a49      	cmp	r2, #73	; 0x49
 800b09a:	d026      	beq.n	800b0ea <_strtod_l+0x352>
 800b09c:	2a4e      	cmp	r2, #78	; 0x4e
 800b09e:	f47f aed3 	bne.w	800ae48 <_strtod_l+0xb0>
 800b0a2:	499b      	ldr	r1, [pc, #620]	; (800b310 <_strtod_l+0x578>)
 800b0a4:	a815      	add	r0, sp, #84	; 0x54
 800b0a6:	f001 fc25 	bl	800c8f4 <__match>
 800b0aa:	2800      	cmp	r0, #0
 800b0ac:	f43f aecc 	beq.w	800ae48 <_strtod_l+0xb0>
 800b0b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0b2:	781b      	ldrb	r3, [r3, #0]
 800b0b4:	2b28      	cmp	r3, #40	; 0x28
 800b0b6:	d12f      	bne.n	800b118 <_strtod_l+0x380>
 800b0b8:	4996      	ldr	r1, [pc, #600]	; (800b314 <_strtod_l+0x57c>)
 800b0ba:	aa18      	add	r2, sp, #96	; 0x60
 800b0bc:	a815      	add	r0, sp, #84	; 0x54
 800b0be:	f001 fc2d 	bl	800c91c <__hexnan>
 800b0c2:	2805      	cmp	r0, #5
 800b0c4:	d128      	bne.n	800b118 <_strtod_l+0x380>
 800b0c6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b0c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b0cc:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800b0d0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800b0d4:	e69b      	b.n	800ae0e <_strtod_l+0x76>
 800b0d6:	9f08      	ldr	r7, [sp, #32]
 800b0d8:	210a      	movs	r1, #10
 800b0da:	fb01 2107 	mla	r1, r1, r7, r2
 800b0de:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800b0e2:	9208      	str	r2, [sp, #32]
 800b0e4:	e7b5      	b.n	800b052 <_strtod_l+0x2ba>
 800b0e6:	2a6e      	cmp	r2, #110	; 0x6e
 800b0e8:	e7d9      	b.n	800b09e <_strtod_l+0x306>
 800b0ea:	498b      	ldr	r1, [pc, #556]	; (800b318 <_strtod_l+0x580>)
 800b0ec:	a815      	add	r0, sp, #84	; 0x54
 800b0ee:	f001 fc01 	bl	800c8f4 <__match>
 800b0f2:	2800      	cmp	r0, #0
 800b0f4:	f43f aea8 	beq.w	800ae48 <_strtod_l+0xb0>
 800b0f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b0fa:	4988      	ldr	r1, [pc, #544]	; (800b31c <_strtod_l+0x584>)
 800b0fc:	3b01      	subs	r3, #1
 800b0fe:	a815      	add	r0, sp, #84	; 0x54
 800b100:	9315      	str	r3, [sp, #84]	; 0x54
 800b102:	f001 fbf7 	bl	800c8f4 <__match>
 800b106:	b910      	cbnz	r0, 800b10e <_strtod_l+0x376>
 800b108:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b10a:	3301      	adds	r3, #1
 800b10c:	9315      	str	r3, [sp, #84]	; 0x54
 800b10e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b32c <_strtod_l+0x594>
 800b112:	f04f 0800 	mov.w	r8, #0
 800b116:	e67a      	b.n	800ae0e <_strtod_l+0x76>
 800b118:	4881      	ldr	r0, [pc, #516]	; (800b320 <_strtod_l+0x588>)
 800b11a:	f001 f8e9 	bl	800c2f0 <nan>
 800b11e:	ec59 8b10 	vmov	r8, r9, d0
 800b122:	e674      	b.n	800ae0e <_strtod_l+0x76>
 800b124:	9b05      	ldr	r3, [sp, #20]
 800b126:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b128:	1afb      	subs	r3, r7, r3
 800b12a:	f1bb 0f00 	cmp.w	fp, #0
 800b12e:	bf08      	it	eq
 800b130:	46b3      	moveq	fp, r6
 800b132:	2e10      	cmp	r6, #16
 800b134:	9308      	str	r3, [sp, #32]
 800b136:	4635      	mov	r5, r6
 800b138:	bfa8      	it	ge
 800b13a:	2510      	movge	r5, #16
 800b13c:	f7f5 f9da 	bl	80004f4 <__aeabi_ui2d>
 800b140:	2e09      	cmp	r6, #9
 800b142:	4680      	mov	r8, r0
 800b144:	4689      	mov	r9, r1
 800b146:	dd13      	ble.n	800b170 <_strtod_l+0x3d8>
 800b148:	4b76      	ldr	r3, [pc, #472]	; (800b324 <_strtod_l+0x58c>)
 800b14a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b14e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b152:	f7f5 fa49 	bl	80005e8 <__aeabi_dmul>
 800b156:	4680      	mov	r8, r0
 800b158:	4650      	mov	r0, sl
 800b15a:	4689      	mov	r9, r1
 800b15c:	f7f5 f9ca 	bl	80004f4 <__aeabi_ui2d>
 800b160:	4602      	mov	r2, r0
 800b162:	460b      	mov	r3, r1
 800b164:	4640      	mov	r0, r8
 800b166:	4649      	mov	r1, r9
 800b168:	f7f5 f888 	bl	800027c <__adddf3>
 800b16c:	4680      	mov	r8, r0
 800b16e:	4689      	mov	r9, r1
 800b170:	2e0f      	cmp	r6, #15
 800b172:	dc38      	bgt.n	800b1e6 <_strtod_l+0x44e>
 800b174:	9b08      	ldr	r3, [sp, #32]
 800b176:	2b00      	cmp	r3, #0
 800b178:	f43f ae49 	beq.w	800ae0e <_strtod_l+0x76>
 800b17c:	dd24      	ble.n	800b1c8 <_strtod_l+0x430>
 800b17e:	2b16      	cmp	r3, #22
 800b180:	dc0b      	bgt.n	800b19a <_strtod_l+0x402>
 800b182:	4968      	ldr	r1, [pc, #416]	; (800b324 <_strtod_l+0x58c>)
 800b184:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b18c:	4642      	mov	r2, r8
 800b18e:	464b      	mov	r3, r9
 800b190:	f7f5 fa2a 	bl	80005e8 <__aeabi_dmul>
 800b194:	4680      	mov	r8, r0
 800b196:	4689      	mov	r9, r1
 800b198:	e639      	b.n	800ae0e <_strtod_l+0x76>
 800b19a:	9a08      	ldr	r2, [sp, #32]
 800b19c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b1a0:	4293      	cmp	r3, r2
 800b1a2:	db20      	blt.n	800b1e6 <_strtod_l+0x44e>
 800b1a4:	4c5f      	ldr	r4, [pc, #380]	; (800b324 <_strtod_l+0x58c>)
 800b1a6:	f1c6 060f 	rsb	r6, r6, #15
 800b1aa:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b1ae:	4642      	mov	r2, r8
 800b1b0:	464b      	mov	r3, r9
 800b1b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b1b6:	f7f5 fa17 	bl	80005e8 <__aeabi_dmul>
 800b1ba:	9b08      	ldr	r3, [sp, #32]
 800b1bc:	1b9e      	subs	r6, r3, r6
 800b1be:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b1c2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b1c6:	e7e3      	b.n	800b190 <_strtod_l+0x3f8>
 800b1c8:	9b08      	ldr	r3, [sp, #32]
 800b1ca:	3316      	adds	r3, #22
 800b1cc:	db0b      	blt.n	800b1e6 <_strtod_l+0x44e>
 800b1ce:	9b05      	ldr	r3, [sp, #20]
 800b1d0:	1bdf      	subs	r7, r3, r7
 800b1d2:	4b54      	ldr	r3, [pc, #336]	; (800b324 <_strtod_l+0x58c>)
 800b1d4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b1d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1dc:	4640      	mov	r0, r8
 800b1de:	4649      	mov	r1, r9
 800b1e0:	f7f5 fb2c 	bl	800083c <__aeabi_ddiv>
 800b1e4:	e7d6      	b.n	800b194 <_strtod_l+0x3fc>
 800b1e6:	9b08      	ldr	r3, [sp, #32]
 800b1e8:	1b75      	subs	r5, r6, r5
 800b1ea:	441d      	add	r5, r3
 800b1ec:	2d00      	cmp	r5, #0
 800b1ee:	dd70      	ble.n	800b2d2 <_strtod_l+0x53a>
 800b1f0:	f015 030f 	ands.w	r3, r5, #15
 800b1f4:	d00a      	beq.n	800b20c <_strtod_l+0x474>
 800b1f6:	494b      	ldr	r1, [pc, #300]	; (800b324 <_strtod_l+0x58c>)
 800b1f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b1fc:	4642      	mov	r2, r8
 800b1fe:	464b      	mov	r3, r9
 800b200:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b204:	f7f5 f9f0 	bl	80005e8 <__aeabi_dmul>
 800b208:	4680      	mov	r8, r0
 800b20a:	4689      	mov	r9, r1
 800b20c:	f035 050f 	bics.w	r5, r5, #15
 800b210:	d04d      	beq.n	800b2ae <_strtod_l+0x516>
 800b212:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b216:	dd22      	ble.n	800b25e <_strtod_l+0x4c6>
 800b218:	2500      	movs	r5, #0
 800b21a:	46ab      	mov	fp, r5
 800b21c:	9509      	str	r5, [sp, #36]	; 0x24
 800b21e:	9505      	str	r5, [sp, #20]
 800b220:	2322      	movs	r3, #34	; 0x22
 800b222:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b32c <_strtod_l+0x594>
 800b226:	6023      	str	r3, [r4, #0]
 800b228:	f04f 0800 	mov.w	r8, #0
 800b22c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b22e:	2b00      	cmp	r3, #0
 800b230:	f43f aded 	beq.w	800ae0e <_strtod_l+0x76>
 800b234:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b236:	4620      	mov	r0, r4
 800b238:	f001 fd0a 	bl	800cc50 <_Bfree>
 800b23c:	9905      	ldr	r1, [sp, #20]
 800b23e:	4620      	mov	r0, r4
 800b240:	f001 fd06 	bl	800cc50 <_Bfree>
 800b244:	4659      	mov	r1, fp
 800b246:	4620      	mov	r0, r4
 800b248:	f001 fd02 	bl	800cc50 <_Bfree>
 800b24c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b24e:	4620      	mov	r0, r4
 800b250:	f001 fcfe 	bl	800cc50 <_Bfree>
 800b254:	4629      	mov	r1, r5
 800b256:	4620      	mov	r0, r4
 800b258:	f001 fcfa 	bl	800cc50 <_Bfree>
 800b25c:	e5d7      	b.n	800ae0e <_strtod_l+0x76>
 800b25e:	4b32      	ldr	r3, [pc, #200]	; (800b328 <_strtod_l+0x590>)
 800b260:	9304      	str	r3, [sp, #16]
 800b262:	2300      	movs	r3, #0
 800b264:	112d      	asrs	r5, r5, #4
 800b266:	4640      	mov	r0, r8
 800b268:	4649      	mov	r1, r9
 800b26a:	469a      	mov	sl, r3
 800b26c:	2d01      	cmp	r5, #1
 800b26e:	dc21      	bgt.n	800b2b4 <_strtod_l+0x51c>
 800b270:	b10b      	cbz	r3, 800b276 <_strtod_l+0x4de>
 800b272:	4680      	mov	r8, r0
 800b274:	4689      	mov	r9, r1
 800b276:	492c      	ldr	r1, [pc, #176]	; (800b328 <_strtod_l+0x590>)
 800b278:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b27c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b280:	4642      	mov	r2, r8
 800b282:	464b      	mov	r3, r9
 800b284:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b288:	f7f5 f9ae 	bl	80005e8 <__aeabi_dmul>
 800b28c:	4b27      	ldr	r3, [pc, #156]	; (800b32c <_strtod_l+0x594>)
 800b28e:	460a      	mov	r2, r1
 800b290:	400b      	ands	r3, r1
 800b292:	4927      	ldr	r1, [pc, #156]	; (800b330 <_strtod_l+0x598>)
 800b294:	428b      	cmp	r3, r1
 800b296:	4680      	mov	r8, r0
 800b298:	d8be      	bhi.n	800b218 <_strtod_l+0x480>
 800b29a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b29e:	428b      	cmp	r3, r1
 800b2a0:	bf86      	itte	hi
 800b2a2:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b334 <_strtod_l+0x59c>
 800b2a6:	f04f 38ff 	movhi.w	r8, #4294967295
 800b2aa:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	9304      	str	r3, [sp, #16]
 800b2b2:	e07b      	b.n	800b3ac <_strtod_l+0x614>
 800b2b4:	07ea      	lsls	r2, r5, #31
 800b2b6:	d505      	bpl.n	800b2c4 <_strtod_l+0x52c>
 800b2b8:	9b04      	ldr	r3, [sp, #16]
 800b2ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2be:	f7f5 f993 	bl	80005e8 <__aeabi_dmul>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	9a04      	ldr	r2, [sp, #16]
 800b2c6:	3208      	adds	r2, #8
 800b2c8:	f10a 0a01 	add.w	sl, sl, #1
 800b2cc:	106d      	asrs	r5, r5, #1
 800b2ce:	9204      	str	r2, [sp, #16]
 800b2d0:	e7cc      	b.n	800b26c <_strtod_l+0x4d4>
 800b2d2:	d0ec      	beq.n	800b2ae <_strtod_l+0x516>
 800b2d4:	426d      	negs	r5, r5
 800b2d6:	f015 020f 	ands.w	r2, r5, #15
 800b2da:	d00a      	beq.n	800b2f2 <_strtod_l+0x55a>
 800b2dc:	4b11      	ldr	r3, [pc, #68]	; (800b324 <_strtod_l+0x58c>)
 800b2de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2e2:	4640      	mov	r0, r8
 800b2e4:	4649      	mov	r1, r9
 800b2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ea:	f7f5 faa7 	bl	800083c <__aeabi_ddiv>
 800b2ee:	4680      	mov	r8, r0
 800b2f0:	4689      	mov	r9, r1
 800b2f2:	112d      	asrs	r5, r5, #4
 800b2f4:	d0db      	beq.n	800b2ae <_strtod_l+0x516>
 800b2f6:	2d1f      	cmp	r5, #31
 800b2f8:	dd1e      	ble.n	800b338 <_strtod_l+0x5a0>
 800b2fa:	2500      	movs	r5, #0
 800b2fc:	46ab      	mov	fp, r5
 800b2fe:	9509      	str	r5, [sp, #36]	; 0x24
 800b300:	9505      	str	r5, [sp, #20]
 800b302:	2322      	movs	r3, #34	; 0x22
 800b304:	f04f 0800 	mov.w	r8, #0
 800b308:	f04f 0900 	mov.w	r9, #0
 800b30c:	6023      	str	r3, [r4, #0]
 800b30e:	e78d      	b.n	800b22c <_strtod_l+0x494>
 800b310:	0800feff 	.word	0x0800feff
 800b314:	0800ff18 	.word	0x0800ff18
 800b318:	0800fef6 	.word	0x0800fef6
 800b31c:	0800fef9 	.word	0x0800fef9
 800b320:	080102b2 	.word	0x080102b2
 800b324:	08010170 	.word	0x08010170
 800b328:	08010148 	.word	0x08010148
 800b32c:	7ff00000 	.word	0x7ff00000
 800b330:	7ca00000 	.word	0x7ca00000
 800b334:	7fefffff 	.word	0x7fefffff
 800b338:	f015 0310 	ands.w	r3, r5, #16
 800b33c:	bf18      	it	ne
 800b33e:	236a      	movne	r3, #106	; 0x6a
 800b340:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b6e4 <_strtod_l+0x94c>
 800b344:	9304      	str	r3, [sp, #16]
 800b346:	4640      	mov	r0, r8
 800b348:	4649      	mov	r1, r9
 800b34a:	2300      	movs	r3, #0
 800b34c:	07ea      	lsls	r2, r5, #31
 800b34e:	d504      	bpl.n	800b35a <_strtod_l+0x5c2>
 800b350:	e9da 2300 	ldrd	r2, r3, [sl]
 800b354:	f7f5 f948 	bl	80005e8 <__aeabi_dmul>
 800b358:	2301      	movs	r3, #1
 800b35a:	106d      	asrs	r5, r5, #1
 800b35c:	f10a 0a08 	add.w	sl, sl, #8
 800b360:	d1f4      	bne.n	800b34c <_strtod_l+0x5b4>
 800b362:	b10b      	cbz	r3, 800b368 <_strtod_l+0x5d0>
 800b364:	4680      	mov	r8, r0
 800b366:	4689      	mov	r9, r1
 800b368:	9b04      	ldr	r3, [sp, #16]
 800b36a:	b1bb      	cbz	r3, 800b39c <_strtod_l+0x604>
 800b36c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b370:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b374:	2b00      	cmp	r3, #0
 800b376:	4649      	mov	r1, r9
 800b378:	dd10      	ble.n	800b39c <_strtod_l+0x604>
 800b37a:	2b1f      	cmp	r3, #31
 800b37c:	f340 811e 	ble.w	800b5bc <_strtod_l+0x824>
 800b380:	2b34      	cmp	r3, #52	; 0x34
 800b382:	bfde      	ittt	le
 800b384:	f04f 33ff 	movle.w	r3, #4294967295
 800b388:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b38c:	4093      	lslle	r3, r2
 800b38e:	f04f 0800 	mov.w	r8, #0
 800b392:	bfcc      	ite	gt
 800b394:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b398:	ea03 0901 	andle.w	r9, r3, r1
 800b39c:	2200      	movs	r2, #0
 800b39e:	2300      	movs	r3, #0
 800b3a0:	4640      	mov	r0, r8
 800b3a2:	4649      	mov	r1, r9
 800b3a4:	f7f5 fb88 	bl	8000ab8 <__aeabi_dcmpeq>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d1a6      	bne.n	800b2fa <_strtod_l+0x562>
 800b3ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ae:	9300      	str	r3, [sp, #0]
 800b3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b3b2:	4633      	mov	r3, r6
 800b3b4:	465a      	mov	r2, fp
 800b3b6:	4620      	mov	r0, r4
 800b3b8:	f001 fcb2 	bl	800cd20 <__s2b>
 800b3bc:	9009      	str	r0, [sp, #36]	; 0x24
 800b3be:	2800      	cmp	r0, #0
 800b3c0:	f43f af2a 	beq.w	800b218 <_strtod_l+0x480>
 800b3c4:	9a08      	ldr	r2, [sp, #32]
 800b3c6:	9b05      	ldr	r3, [sp, #20]
 800b3c8:	2a00      	cmp	r2, #0
 800b3ca:	eba3 0307 	sub.w	r3, r3, r7
 800b3ce:	bfa8      	it	ge
 800b3d0:	2300      	movge	r3, #0
 800b3d2:	930c      	str	r3, [sp, #48]	; 0x30
 800b3d4:	2500      	movs	r5, #0
 800b3d6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3da:	9312      	str	r3, [sp, #72]	; 0x48
 800b3dc:	46ab      	mov	fp, r5
 800b3de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	6859      	ldr	r1, [r3, #4]
 800b3e4:	f001 fbf4 	bl	800cbd0 <_Balloc>
 800b3e8:	9005      	str	r0, [sp, #20]
 800b3ea:	2800      	cmp	r0, #0
 800b3ec:	f43f af18 	beq.w	800b220 <_strtod_l+0x488>
 800b3f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f2:	691a      	ldr	r2, [r3, #16]
 800b3f4:	3202      	adds	r2, #2
 800b3f6:	f103 010c 	add.w	r1, r3, #12
 800b3fa:	0092      	lsls	r2, r2, #2
 800b3fc:	300c      	adds	r0, #12
 800b3fe:	f000 ff66 	bl	800c2ce <memcpy>
 800b402:	ec49 8b10 	vmov	d0, r8, r9
 800b406:	aa18      	add	r2, sp, #96	; 0x60
 800b408:	a917      	add	r1, sp, #92	; 0x5c
 800b40a:	4620      	mov	r0, r4
 800b40c:	f001 ffbc 	bl	800d388 <__d2b>
 800b410:	ec49 8b18 	vmov	d8, r8, r9
 800b414:	9016      	str	r0, [sp, #88]	; 0x58
 800b416:	2800      	cmp	r0, #0
 800b418:	f43f af02 	beq.w	800b220 <_strtod_l+0x488>
 800b41c:	2101      	movs	r1, #1
 800b41e:	4620      	mov	r0, r4
 800b420:	f001 fd16 	bl	800ce50 <__i2b>
 800b424:	4683      	mov	fp, r0
 800b426:	2800      	cmp	r0, #0
 800b428:	f43f aefa 	beq.w	800b220 <_strtod_l+0x488>
 800b42c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b42e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b430:	2e00      	cmp	r6, #0
 800b432:	bfab      	itete	ge
 800b434:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b436:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b438:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b43a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b43e:	bfac      	ite	ge
 800b440:	eb06 0a03 	addge.w	sl, r6, r3
 800b444:	1b9f      	sublt	r7, r3, r6
 800b446:	9b04      	ldr	r3, [sp, #16]
 800b448:	1af6      	subs	r6, r6, r3
 800b44a:	4416      	add	r6, r2
 800b44c:	4ba0      	ldr	r3, [pc, #640]	; (800b6d0 <_strtod_l+0x938>)
 800b44e:	3e01      	subs	r6, #1
 800b450:	429e      	cmp	r6, r3
 800b452:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b456:	f280 80c4 	bge.w	800b5e2 <_strtod_l+0x84a>
 800b45a:	1b9b      	subs	r3, r3, r6
 800b45c:	2b1f      	cmp	r3, #31
 800b45e:	eba2 0203 	sub.w	r2, r2, r3
 800b462:	f04f 0101 	mov.w	r1, #1
 800b466:	f300 80b0 	bgt.w	800b5ca <_strtod_l+0x832>
 800b46a:	fa01 f303 	lsl.w	r3, r1, r3
 800b46e:	930e      	str	r3, [sp, #56]	; 0x38
 800b470:	2300      	movs	r3, #0
 800b472:	930d      	str	r3, [sp, #52]	; 0x34
 800b474:	eb0a 0602 	add.w	r6, sl, r2
 800b478:	9b04      	ldr	r3, [sp, #16]
 800b47a:	45b2      	cmp	sl, r6
 800b47c:	4417      	add	r7, r2
 800b47e:	441f      	add	r7, r3
 800b480:	4653      	mov	r3, sl
 800b482:	bfa8      	it	ge
 800b484:	4633      	movge	r3, r6
 800b486:	42bb      	cmp	r3, r7
 800b488:	bfa8      	it	ge
 800b48a:	463b      	movge	r3, r7
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	bfc2      	ittt	gt
 800b490:	1af6      	subgt	r6, r6, r3
 800b492:	1aff      	subgt	r7, r7, r3
 800b494:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b498:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	dd17      	ble.n	800b4ce <_strtod_l+0x736>
 800b49e:	4659      	mov	r1, fp
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f001 fd94 	bl	800cfd0 <__pow5mult>
 800b4a8:	4683      	mov	fp, r0
 800b4aa:	2800      	cmp	r0, #0
 800b4ac:	f43f aeb8 	beq.w	800b220 <_strtod_l+0x488>
 800b4b0:	4601      	mov	r1, r0
 800b4b2:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b4b4:	4620      	mov	r0, r4
 800b4b6:	f001 fce1 	bl	800ce7c <__multiply>
 800b4ba:	900b      	str	r0, [sp, #44]	; 0x2c
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	f43f aeaf 	beq.w	800b220 <_strtod_l+0x488>
 800b4c2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	f001 fbc3 	bl	800cc50 <_Bfree>
 800b4ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4cc:	9316      	str	r3, [sp, #88]	; 0x58
 800b4ce:	2e00      	cmp	r6, #0
 800b4d0:	f300 808c 	bgt.w	800b5ec <_strtod_l+0x854>
 800b4d4:	9b08      	ldr	r3, [sp, #32]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	dd08      	ble.n	800b4ec <_strtod_l+0x754>
 800b4da:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b4dc:	9905      	ldr	r1, [sp, #20]
 800b4de:	4620      	mov	r0, r4
 800b4e0:	f001 fd76 	bl	800cfd0 <__pow5mult>
 800b4e4:	9005      	str	r0, [sp, #20]
 800b4e6:	2800      	cmp	r0, #0
 800b4e8:	f43f ae9a 	beq.w	800b220 <_strtod_l+0x488>
 800b4ec:	2f00      	cmp	r7, #0
 800b4ee:	dd08      	ble.n	800b502 <_strtod_l+0x76a>
 800b4f0:	9905      	ldr	r1, [sp, #20]
 800b4f2:	463a      	mov	r2, r7
 800b4f4:	4620      	mov	r0, r4
 800b4f6:	f001 fdc5 	bl	800d084 <__lshift>
 800b4fa:	9005      	str	r0, [sp, #20]
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	f43f ae8f 	beq.w	800b220 <_strtod_l+0x488>
 800b502:	f1ba 0f00 	cmp.w	sl, #0
 800b506:	dd08      	ble.n	800b51a <_strtod_l+0x782>
 800b508:	4659      	mov	r1, fp
 800b50a:	4652      	mov	r2, sl
 800b50c:	4620      	mov	r0, r4
 800b50e:	f001 fdb9 	bl	800d084 <__lshift>
 800b512:	4683      	mov	fp, r0
 800b514:	2800      	cmp	r0, #0
 800b516:	f43f ae83 	beq.w	800b220 <_strtod_l+0x488>
 800b51a:	9a05      	ldr	r2, [sp, #20]
 800b51c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b51e:	4620      	mov	r0, r4
 800b520:	f001 fe38 	bl	800d194 <__mdiff>
 800b524:	4605      	mov	r5, r0
 800b526:	2800      	cmp	r0, #0
 800b528:	f43f ae7a 	beq.w	800b220 <_strtod_l+0x488>
 800b52c:	68c3      	ldr	r3, [r0, #12]
 800b52e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b530:	2300      	movs	r3, #0
 800b532:	60c3      	str	r3, [r0, #12]
 800b534:	4659      	mov	r1, fp
 800b536:	f001 fe11 	bl	800d15c <__mcmp>
 800b53a:	2800      	cmp	r0, #0
 800b53c:	da60      	bge.n	800b600 <_strtod_l+0x868>
 800b53e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b540:	ea53 0308 	orrs.w	r3, r3, r8
 800b544:	f040 8084 	bne.w	800b650 <_strtod_l+0x8b8>
 800b548:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d17f      	bne.n	800b650 <_strtod_l+0x8b8>
 800b550:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b554:	0d1b      	lsrs	r3, r3, #20
 800b556:	051b      	lsls	r3, r3, #20
 800b558:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b55c:	d978      	bls.n	800b650 <_strtod_l+0x8b8>
 800b55e:	696b      	ldr	r3, [r5, #20]
 800b560:	b913      	cbnz	r3, 800b568 <_strtod_l+0x7d0>
 800b562:	692b      	ldr	r3, [r5, #16]
 800b564:	2b01      	cmp	r3, #1
 800b566:	dd73      	ble.n	800b650 <_strtod_l+0x8b8>
 800b568:	4629      	mov	r1, r5
 800b56a:	2201      	movs	r2, #1
 800b56c:	4620      	mov	r0, r4
 800b56e:	f001 fd89 	bl	800d084 <__lshift>
 800b572:	4659      	mov	r1, fp
 800b574:	4605      	mov	r5, r0
 800b576:	f001 fdf1 	bl	800d15c <__mcmp>
 800b57a:	2800      	cmp	r0, #0
 800b57c:	dd68      	ble.n	800b650 <_strtod_l+0x8b8>
 800b57e:	9904      	ldr	r1, [sp, #16]
 800b580:	4a54      	ldr	r2, [pc, #336]	; (800b6d4 <_strtod_l+0x93c>)
 800b582:	464b      	mov	r3, r9
 800b584:	2900      	cmp	r1, #0
 800b586:	f000 8084 	beq.w	800b692 <_strtod_l+0x8fa>
 800b58a:	ea02 0109 	and.w	r1, r2, r9
 800b58e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b592:	dc7e      	bgt.n	800b692 <_strtod_l+0x8fa>
 800b594:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b598:	f77f aeb3 	ble.w	800b302 <_strtod_l+0x56a>
 800b59c:	4b4e      	ldr	r3, [pc, #312]	; (800b6d8 <_strtod_l+0x940>)
 800b59e:	4640      	mov	r0, r8
 800b5a0:	4649      	mov	r1, r9
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	f7f5 f820 	bl	80005e8 <__aeabi_dmul>
 800b5a8:	4b4a      	ldr	r3, [pc, #296]	; (800b6d4 <_strtod_l+0x93c>)
 800b5aa:	400b      	ands	r3, r1
 800b5ac:	4680      	mov	r8, r0
 800b5ae:	4689      	mov	r9, r1
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	f47f ae3f 	bne.w	800b234 <_strtod_l+0x49c>
 800b5b6:	2322      	movs	r3, #34	; 0x22
 800b5b8:	6023      	str	r3, [r4, #0]
 800b5ba:	e63b      	b.n	800b234 <_strtod_l+0x49c>
 800b5bc:	f04f 32ff 	mov.w	r2, #4294967295
 800b5c0:	fa02 f303 	lsl.w	r3, r2, r3
 800b5c4:	ea03 0808 	and.w	r8, r3, r8
 800b5c8:	e6e8      	b.n	800b39c <_strtod_l+0x604>
 800b5ca:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b5ce:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b5d2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b5d6:	36e2      	adds	r6, #226	; 0xe2
 800b5d8:	fa01 f306 	lsl.w	r3, r1, r6
 800b5dc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b5e0:	e748      	b.n	800b474 <_strtod_l+0x6dc>
 800b5e2:	2100      	movs	r1, #0
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b5ea:	e743      	b.n	800b474 <_strtod_l+0x6dc>
 800b5ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b5ee:	4632      	mov	r2, r6
 800b5f0:	4620      	mov	r0, r4
 800b5f2:	f001 fd47 	bl	800d084 <__lshift>
 800b5f6:	9016      	str	r0, [sp, #88]	; 0x58
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	f47f af6b 	bne.w	800b4d4 <_strtod_l+0x73c>
 800b5fe:	e60f      	b.n	800b220 <_strtod_l+0x488>
 800b600:	46ca      	mov	sl, r9
 800b602:	d171      	bne.n	800b6e8 <_strtod_l+0x950>
 800b604:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b606:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b60a:	b352      	cbz	r2, 800b662 <_strtod_l+0x8ca>
 800b60c:	4a33      	ldr	r2, [pc, #204]	; (800b6dc <_strtod_l+0x944>)
 800b60e:	4293      	cmp	r3, r2
 800b610:	d12a      	bne.n	800b668 <_strtod_l+0x8d0>
 800b612:	9b04      	ldr	r3, [sp, #16]
 800b614:	4641      	mov	r1, r8
 800b616:	b1fb      	cbz	r3, 800b658 <_strtod_l+0x8c0>
 800b618:	4b2e      	ldr	r3, [pc, #184]	; (800b6d4 <_strtod_l+0x93c>)
 800b61a:	ea09 0303 	and.w	r3, r9, r3
 800b61e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b622:	f04f 32ff 	mov.w	r2, #4294967295
 800b626:	d81a      	bhi.n	800b65e <_strtod_l+0x8c6>
 800b628:	0d1b      	lsrs	r3, r3, #20
 800b62a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b62e:	fa02 f303 	lsl.w	r3, r2, r3
 800b632:	4299      	cmp	r1, r3
 800b634:	d118      	bne.n	800b668 <_strtod_l+0x8d0>
 800b636:	4b2a      	ldr	r3, [pc, #168]	; (800b6e0 <_strtod_l+0x948>)
 800b638:	459a      	cmp	sl, r3
 800b63a:	d102      	bne.n	800b642 <_strtod_l+0x8aa>
 800b63c:	3101      	adds	r1, #1
 800b63e:	f43f adef 	beq.w	800b220 <_strtod_l+0x488>
 800b642:	4b24      	ldr	r3, [pc, #144]	; (800b6d4 <_strtod_l+0x93c>)
 800b644:	ea0a 0303 	and.w	r3, sl, r3
 800b648:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b64c:	f04f 0800 	mov.w	r8, #0
 800b650:	9b04      	ldr	r3, [sp, #16]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d1a2      	bne.n	800b59c <_strtod_l+0x804>
 800b656:	e5ed      	b.n	800b234 <_strtod_l+0x49c>
 800b658:	f04f 33ff 	mov.w	r3, #4294967295
 800b65c:	e7e9      	b.n	800b632 <_strtod_l+0x89a>
 800b65e:	4613      	mov	r3, r2
 800b660:	e7e7      	b.n	800b632 <_strtod_l+0x89a>
 800b662:	ea53 0308 	orrs.w	r3, r3, r8
 800b666:	d08a      	beq.n	800b57e <_strtod_l+0x7e6>
 800b668:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b66a:	b1e3      	cbz	r3, 800b6a6 <_strtod_l+0x90e>
 800b66c:	ea13 0f0a 	tst.w	r3, sl
 800b670:	d0ee      	beq.n	800b650 <_strtod_l+0x8b8>
 800b672:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b674:	9a04      	ldr	r2, [sp, #16]
 800b676:	4640      	mov	r0, r8
 800b678:	4649      	mov	r1, r9
 800b67a:	b1c3      	cbz	r3, 800b6ae <_strtod_l+0x916>
 800b67c:	f7ff fb70 	bl	800ad60 <sulp>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	ec51 0b18 	vmov	r0, r1, d8
 800b688:	f7f4 fdf8 	bl	800027c <__adddf3>
 800b68c:	4680      	mov	r8, r0
 800b68e:	4689      	mov	r9, r1
 800b690:	e7de      	b.n	800b650 <_strtod_l+0x8b8>
 800b692:	4013      	ands	r3, r2
 800b694:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b698:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b69c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b6a0:	f04f 38ff 	mov.w	r8, #4294967295
 800b6a4:	e7d4      	b.n	800b650 <_strtod_l+0x8b8>
 800b6a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b6a8:	ea13 0f08 	tst.w	r3, r8
 800b6ac:	e7e0      	b.n	800b670 <_strtod_l+0x8d8>
 800b6ae:	f7ff fb57 	bl	800ad60 <sulp>
 800b6b2:	4602      	mov	r2, r0
 800b6b4:	460b      	mov	r3, r1
 800b6b6:	ec51 0b18 	vmov	r0, r1, d8
 800b6ba:	f7f4 fddd 	bl	8000278 <__aeabi_dsub>
 800b6be:	2200      	movs	r2, #0
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	4680      	mov	r8, r0
 800b6c4:	4689      	mov	r9, r1
 800b6c6:	f7f5 f9f7 	bl	8000ab8 <__aeabi_dcmpeq>
 800b6ca:	2800      	cmp	r0, #0
 800b6cc:	d0c0      	beq.n	800b650 <_strtod_l+0x8b8>
 800b6ce:	e618      	b.n	800b302 <_strtod_l+0x56a>
 800b6d0:	fffffc02 	.word	0xfffffc02
 800b6d4:	7ff00000 	.word	0x7ff00000
 800b6d8:	39500000 	.word	0x39500000
 800b6dc:	000fffff 	.word	0x000fffff
 800b6e0:	7fefffff 	.word	0x7fefffff
 800b6e4:	0800ff30 	.word	0x0800ff30
 800b6e8:	4659      	mov	r1, fp
 800b6ea:	4628      	mov	r0, r5
 800b6ec:	f001 fea6 	bl	800d43c <__ratio>
 800b6f0:	ec57 6b10 	vmov	r6, r7, d0
 800b6f4:	ee10 0a10 	vmov	r0, s0
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b6fe:	4639      	mov	r1, r7
 800b700:	f7f5 f9ee 	bl	8000ae0 <__aeabi_dcmple>
 800b704:	2800      	cmp	r0, #0
 800b706:	d071      	beq.n	800b7ec <_strtod_l+0xa54>
 800b708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d17c      	bne.n	800b808 <_strtod_l+0xa70>
 800b70e:	f1b8 0f00 	cmp.w	r8, #0
 800b712:	d15a      	bne.n	800b7ca <_strtod_l+0xa32>
 800b714:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d15d      	bne.n	800b7d8 <_strtod_l+0xa40>
 800b71c:	4b90      	ldr	r3, [pc, #576]	; (800b960 <_strtod_l+0xbc8>)
 800b71e:	2200      	movs	r2, #0
 800b720:	4630      	mov	r0, r6
 800b722:	4639      	mov	r1, r7
 800b724:	f7f5 f9d2 	bl	8000acc <__aeabi_dcmplt>
 800b728:	2800      	cmp	r0, #0
 800b72a:	d15c      	bne.n	800b7e6 <_strtod_l+0xa4e>
 800b72c:	4630      	mov	r0, r6
 800b72e:	4639      	mov	r1, r7
 800b730:	4b8c      	ldr	r3, [pc, #560]	; (800b964 <_strtod_l+0xbcc>)
 800b732:	2200      	movs	r2, #0
 800b734:	f7f4 ff58 	bl	80005e8 <__aeabi_dmul>
 800b738:	4606      	mov	r6, r0
 800b73a:	460f      	mov	r7, r1
 800b73c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b740:	9606      	str	r6, [sp, #24]
 800b742:	9307      	str	r3, [sp, #28]
 800b744:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b748:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b74c:	4b86      	ldr	r3, [pc, #536]	; (800b968 <_strtod_l+0xbd0>)
 800b74e:	ea0a 0303 	and.w	r3, sl, r3
 800b752:	930d      	str	r3, [sp, #52]	; 0x34
 800b754:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b756:	4b85      	ldr	r3, [pc, #532]	; (800b96c <_strtod_l+0xbd4>)
 800b758:	429a      	cmp	r2, r3
 800b75a:	f040 8090 	bne.w	800b87e <_strtod_l+0xae6>
 800b75e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b762:	ec49 8b10 	vmov	d0, r8, r9
 800b766:	f001 fd9f 	bl	800d2a8 <__ulp>
 800b76a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b76e:	ec51 0b10 	vmov	r0, r1, d0
 800b772:	f7f4 ff39 	bl	80005e8 <__aeabi_dmul>
 800b776:	4642      	mov	r2, r8
 800b778:	464b      	mov	r3, r9
 800b77a:	f7f4 fd7f 	bl	800027c <__adddf3>
 800b77e:	460b      	mov	r3, r1
 800b780:	4979      	ldr	r1, [pc, #484]	; (800b968 <_strtod_l+0xbd0>)
 800b782:	4a7b      	ldr	r2, [pc, #492]	; (800b970 <_strtod_l+0xbd8>)
 800b784:	4019      	ands	r1, r3
 800b786:	4291      	cmp	r1, r2
 800b788:	4680      	mov	r8, r0
 800b78a:	d944      	bls.n	800b816 <_strtod_l+0xa7e>
 800b78c:	ee18 2a90 	vmov	r2, s17
 800b790:	4b78      	ldr	r3, [pc, #480]	; (800b974 <_strtod_l+0xbdc>)
 800b792:	429a      	cmp	r2, r3
 800b794:	d104      	bne.n	800b7a0 <_strtod_l+0xa08>
 800b796:	ee18 3a10 	vmov	r3, s16
 800b79a:	3301      	adds	r3, #1
 800b79c:	f43f ad40 	beq.w	800b220 <_strtod_l+0x488>
 800b7a0:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b974 <_strtod_l+0xbdc>
 800b7a4:	f04f 38ff 	mov.w	r8, #4294967295
 800b7a8:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	f001 fa50 	bl	800cc50 <_Bfree>
 800b7b0:	9905      	ldr	r1, [sp, #20]
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f001 fa4c 	bl	800cc50 <_Bfree>
 800b7b8:	4659      	mov	r1, fp
 800b7ba:	4620      	mov	r0, r4
 800b7bc:	f001 fa48 	bl	800cc50 <_Bfree>
 800b7c0:	4629      	mov	r1, r5
 800b7c2:	4620      	mov	r0, r4
 800b7c4:	f001 fa44 	bl	800cc50 <_Bfree>
 800b7c8:	e609      	b.n	800b3de <_strtod_l+0x646>
 800b7ca:	f1b8 0f01 	cmp.w	r8, #1
 800b7ce:	d103      	bne.n	800b7d8 <_strtod_l+0xa40>
 800b7d0:	f1b9 0f00 	cmp.w	r9, #0
 800b7d4:	f43f ad95 	beq.w	800b302 <_strtod_l+0x56a>
 800b7d8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b930 <_strtod_l+0xb98>
 800b7dc:	4f60      	ldr	r7, [pc, #384]	; (800b960 <_strtod_l+0xbc8>)
 800b7de:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7e2:	2600      	movs	r6, #0
 800b7e4:	e7ae      	b.n	800b744 <_strtod_l+0x9ac>
 800b7e6:	4f5f      	ldr	r7, [pc, #380]	; (800b964 <_strtod_l+0xbcc>)
 800b7e8:	2600      	movs	r6, #0
 800b7ea:	e7a7      	b.n	800b73c <_strtod_l+0x9a4>
 800b7ec:	4b5d      	ldr	r3, [pc, #372]	; (800b964 <_strtod_l+0xbcc>)
 800b7ee:	4630      	mov	r0, r6
 800b7f0:	4639      	mov	r1, r7
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	f7f4 fef8 	bl	80005e8 <__aeabi_dmul>
 800b7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7fa:	4606      	mov	r6, r0
 800b7fc:	460f      	mov	r7, r1
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d09c      	beq.n	800b73c <_strtod_l+0x9a4>
 800b802:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b806:	e79d      	b.n	800b744 <_strtod_l+0x9ac>
 800b808:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b938 <_strtod_l+0xba0>
 800b80c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b810:	ec57 6b17 	vmov	r6, r7, d7
 800b814:	e796      	b.n	800b744 <_strtod_l+0x9ac>
 800b816:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b81a:	9b04      	ldr	r3, [sp, #16]
 800b81c:	46ca      	mov	sl, r9
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d1c2      	bne.n	800b7a8 <_strtod_l+0xa10>
 800b822:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b826:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b828:	0d1b      	lsrs	r3, r3, #20
 800b82a:	051b      	lsls	r3, r3, #20
 800b82c:	429a      	cmp	r2, r3
 800b82e:	d1bb      	bne.n	800b7a8 <_strtod_l+0xa10>
 800b830:	4630      	mov	r0, r6
 800b832:	4639      	mov	r1, r7
 800b834:	f7f5 fb1e 	bl	8000e74 <__aeabi_d2lz>
 800b838:	f7f4 fea8 	bl	800058c <__aeabi_l2d>
 800b83c:	4602      	mov	r2, r0
 800b83e:	460b      	mov	r3, r1
 800b840:	4630      	mov	r0, r6
 800b842:	4639      	mov	r1, r7
 800b844:	f7f4 fd18 	bl	8000278 <__aeabi_dsub>
 800b848:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b84a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b84e:	ea43 0308 	orr.w	r3, r3, r8
 800b852:	4313      	orrs	r3, r2
 800b854:	4606      	mov	r6, r0
 800b856:	460f      	mov	r7, r1
 800b858:	d054      	beq.n	800b904 <_strtod_l+0xb6c>
 800b85a:	a339      	add	r3, pc, #228	; (adr r3, 800b940 <_strtod_l+0xba8>)
 800b85c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b860:	f7f5 f934 	bl	8000acc <__aeabi_dcmplt>
 800b864:	2800      	cmp	r0, #0
 800b866:	f47f ace5 	bne.w	800b234 <_strtod_l+0x49c>
 800b86a:	a337      	add	r3, pc, #220	; (adr r3, 800b948 <_strtod_l+0xbb0>)
 800b86c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b870:	4630      	mov	r0, r6
 800b872:	4639      	mov	r1, r7
 800b874:	f7f5 f948 	bl	8000b08 <__aeabi_dcmpgt>
 800b878:	2800      	cmp	r0, #0
 800b87a:	d095      	beq.n	800b7a8 <_strtod_l+0xa10>
 800b87c:	e4da      	b.n	800b234 <_strtod_l+0x49c>
 800b87e:	9b04      	ldr	r3, [sp, #16]
 800b880:	b333      	cbz	r3, 800b8d0 <_strtod_l+0xb38>
 800b882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b884:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b888:	d822      	bhi.n	800b8d0 <_strtod_l+0xb38>
 800b88a:	a331      	add	r3, pc, #196	; (adr r3, 800b950 <_strtod_l+0xbb8>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	4630      	mov	r0, r6
 800b892:	4639      	mov	r1, r7
 800b894:	f7f5 f924 	bl	8000ae0 <__aeabi_dcmple>
 800b898:	b1a0      	cbz	r0, 800b8c4 <_strtod_l+0xb2c>
 800b89a:	4639      	mov	r1, r7
 800b89c:	4630      	mov	r0, r6
 800b89e:	f7f5 f953 	bl	8000b48 <__aeabi_d2uiz>
 800b8a2:	2801      	cmp	r0, #1
 800b8a4:	bf38      	it	cc
 800b8a6:	2001      	movcc	r0, #1
 800b8a8:	f7f4 fe24 	bl	80004f4 <__aeabi_ui2d>
 800b8ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b8ae:	4606      	mov	r6, r0
 800b8b0:	460f      	mov	r7, r1
 800b8b2:	bb23      	cbnz	r3, 800b8fe <_strtod_l+0xb66>
 800b8b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b8b8:	9010      	str	r0, [sp, #64]	; 0x40
 800b8ba:	9311      	str	r3, [sp, #68]	; 0x44
 800b8bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b8c0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b8c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8c6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b8c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b8cc:	1a9b      	subs	r3, r3, r2
 800b8ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8d0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8d4:	eeb0 0a48 	vmov.f32	s0, s16
 800b8d8:	eef0 0a68 	vmov.f32	s1, s17
 800b8dc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b8e0:	f001 fce2 	bl	800d2a8 <__ulp>
 800b8e4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b8e8:	ec53 2b10 	vmov	r2, r3, d0
 800b8ec:	f7f4 fe7c 	bl	80005e8 <__aeabi_dmul>
 800b8f0:	ec53 2b18 	vmov	r2, r3, d8
 800b8f4:	f7f4 fcc2 	bl	800027c <__adddf3>
 800b8f8:	4680      	mov	r8, r0
 800b8fa:	4689      	mov	r9, r1
 800b8fc:	e78d      	b.n	800b81a <_strtod_l+0xa82>
 800b8fe:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b902:	e7db      	b.n	800b8bc <_strtod_l+0xb24>
 800b904:	a314      	add	r3, pc, #80	; (adr r3, 800b958 <_strtod_l+0xbc0>)
 800b906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90a:	f7f5 f8df 	bl	8000acc <__aeabi_dcmplt>
 800b90e:	e7b3      	b.n	800b878 <_strtod_l+0xae0>
 800b910:	2300      	movs	r3, #0
 800b912:	930a      	str	r3, [sp, #40]	; 0x28
 800b914:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	f7ff ba7c 	b.w	800ae16 <_strtod_l+0x7e>
 800b91e:	2a65      	cmp	r2, #101	; 0x65
 800b920:	f43f ab75 	beq.w	800b00e <_strtod_l+0x276>
 800b924:	2a45      	cmp	r2, #69	; 0x45
 800b926:	f43f ab72 	beq.w	800b00e <_strtod_l+0x276>
 800b92a:	2301      	movs	r3, #1
 800b92c:	f7ff bbaa 	b.w	800b084 <_strtod_l+0x2ec>
 800b930:	00000000 	.word	0x00000000
 800b934:	bff00000 	.word	0xbff00000
 800b938:	00000000 	.word	0x00000000
 800b93c:	3ff00000 	.word	0x3ff00000
 800b940:	94a03595 	.word	0x94a03595
 800b944:	3fdfffff 	.word	0x3fdfffff
 800b948:	35afe535 	.word	0x35afe535
 800b94c:	3fe00000 	.word	0x3fe00000
 800b950:	ffc00000 	.word	0xffc00000
 800b954:	41dfffff 	.word	0x41dfffff
 800b958:	94a03595 	.word	0x94a03595
 800b95c:	3fcfffff 	.word	0x3fcfffff
 800b960:	3ff00000 	.word	0x3ff00000
 800b964:	3fe00000 	.word	0x3fe00000
 800b968:	7ff00000 	.word	0x7ff00000
 800b96c:	7fe00000 	.word	0x7fe00000
 800b970:	7c9fffff 	.word	0x7c9fffff
 800b974:	7fefffff 	.word	0x7fefffff

0800b978 <_strtod_r>:
 800b978:	4b01      	ldr	r3, [pc, #4]	; (800b980 <_strtod_r+0x8>)
 800b97a:	f7ff ba0d 	b.w	800ad98 <_strtod_l>
 800b97e:	bf00      	nop
 800b980:	20000024 	.word	0x20000024

0800b984 <strtof>:
 800b984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b988:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 800ba4c <strtof+0xc8>
 800b98c:	4b2a      	ldr	r3, [pc, #168]	; (800ba38 <strtof+0xb4>)
 800b98e:	460a      	mov	r2, r1
 800b990:	ed2d 8b02 	vpush	{d8}
 800b994:	4601      	mov	r1, r0
 800b996:	f8d8 0000 	ldr.w	r0, [r8]
 800b99a:	f7ff f9fd 	bl	800ad98 <_strtod_l>
 800b99e:	ec55 4b10 	vmov	r4, r5, d0
 800b9a2:	ee10 2a10 	vmov	r2, s0
 800b9a6:	ee10 0a10 	vmov	r0, s0
 800b9aa:	462b      	mov	r3, r5
 800b9ac:	4629      	mov	r1, r5
 800b9ae:	f7f5 f8b5 	bl	8000b1c <__aeabi_dcmpun>
 800b9b2:	b190      	cbz	r0, 800b9da <strtof+0x56>
 800b9b4:	2d00      	cmp	r5, #0
 800b9b6:	4821      	ldr	r0, [pc, #132]	; (800ba3c <strtof+0xb8>)
 800b9b8:	da09      	bge.n	800b9ce <strtof+0x4a>
 800b9ba:	f000 fca1 	bl	800c300 <nanf>
 800b9be:	eeb1 8a40 	vneg.f32	s16, s0
 800b9c2:	eeb0 0a48 	vmov.f32	s0, s16
 800b9c6:	ecbd 8b02 	vpop	{d8}
 800b9ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9ce:	ecbd 8b02 	vpop	{d8}
 800b9d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b9d6:	f000 bc93 	b.w	800c300 <nanf>
 800b9da:	4620      	mov	r0, r4
 800b9dc:	4629      	mov	r1, r5
 800b9de:	f7f5 f8d3 	bl	8000b88 <__aeabi_d2f>
 800b9e2:	ee08 0a10 	vmov	s16, r0
 800b9e6:	eddf 7a16 	vldr	s15, [pc, #88]	; 800ba40 <strtof+0xbc>
 800b9ea:	eeb0 7ac8 	vabs.f32	s14, s16
 800b9ee:	eeb4 7a67 	vcmp.f32	s14, s15
 800b9f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9f6:	dd11      	ble.n	800ba1c <strtof+0x98>
 800b9f8:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800b9fc:	4b11      	ldr	r3, [pc, #68]	; (800ba44 <strtof+0xc0>)
 800b9fe:	f04f 32ff 	mov.w	r2, #4294967295
 800ba02:	4620      	mov	r0, r4
 800ba04:	4639      	mov	r1, r7
 800ba06:	f7f5 f889 	bl	8000b1c <__aeabi_dcmpun>
 800ba0a:	b980      	cbnz	r0, 800ba2e <strtof+0xaa>
 800ba0c:	4b0d      	ldr	r3, [pc, #52]	; (800ba44 <strtof+0xc0>)
 800ba0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba12:	4620      	mov	r0, r4
 800ba14:	4639      	mov	r1, r7
 800ba16:	f7f5 f863 	bl	8000ae0 <__aeabi_dcmple>
 800ba1a:	b940      	cbnz	r0, 800ba2e <strtof+0xaa>
 800ba1c:	ee18 3a10 	vmov	r3, s16
 800ba20:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800ba24:	d1cd      	bne.n	800b9c2 <strtof+0x3e>
 800ba26:	4b08      	ldr	r3, [pc, #32]	; (800ba48 <strtof+0xc4>)
 800ba28:	402b      	ands	r3, r5
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d0c9      	beq.n	800b9c2 <strtof+0x3e>
 800ba2e:	f8d8 3000 	ldr.w	r3, [r8]
 800ba32:	2222      	movs	r2, #34	; 0x22
 800ba34:	601a      	str	r2, [r3, #0]
 800ba36:	e7c4      	b.n	800b9c2 <strtof+0x3e>
 800ba38:	20000024 	.word	0x20000024
 800ba3c:	080102b2 	.word	0x080102b2
 800ba40:	7f7fffff 	.word	0x7f7fffff
 800ba44:	7fefffff 	.word	0x7fefffff
 800ba48:	7ff00000 	.word	0x7ff00000
 800ba4c:	200001dc 	.word	0x200001dc

0800ba50 <_strtoul_l.constprop.0>:
 800ba50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba54:	4f36      	ldr	r7, [pc, #216]	; (800bb30 <_strtoul_l.constprop.0+0xe0>)
 800ba56:	4686      	mov	lr, r0
 800ba58:	460d      	mov	r5, r1
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba60:	5d3e      	ldrb	r6, [r7, r4]
 800ba62:	f016 0608 	ands.w	r6, r6, #8
 800ba66:	d1f8      	bne.n	800ba5a <_strtoul_l.constprop.0+0xa>
 800ba68:	2c2d      	cmp	r4, #45	; 0x2d
 800ba6a:	d130      	bne.n	800bace <_strtoul_l.constprop.0+0x7e>
 800ba6c:	782c      	ldrb	r4, [r5, #0]
 800ba6e:	2601      	movs	r6, #1
 800ba70:	1c85      	adds	r5, r0, #2
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d057      	beq.n	800bb26 <_strtoul_l.constprop.0+0xd6>
 800ba76:	2b10      	cmp	r3, #16
 800ba78:	d109      	bne.n	800ba8e <_strtoul_l.constprop.0+0x3e>
 800ba7a:	2c30      	cmp	r4, #48	; 0x30
 800ba7c:	d107      	bne.n	800ba8e <_strtoul_l.constprop.0+0x3e>
 800ba7e:	7828      	ldrb	r0, [r5, #0]
 800ba80:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba84:	2858      	cmp	r0, #88	; 0x58
 800ba86:	d149      	bne.n	800bb1c <_strtoul_l.constprop.0+0xcc>
 800ba88:	786c      	ldrb	r4, [r5, #1]
 800ba8a:	2310      	movs	r3, #16
 800ba8c:	3502      	adds	r5, #2
 800ba8e:	f04f 38ff 	mov.w	r8, #4294967295
 800ba92:	2700      	movs	r7, #0
 800ba94:	fbb8 f8f3 	udiv	r8, r8, r3
 800ba98:	fb03 f908 	mul.w	r9, r3, r8
 800ba9c:	ea6f 0909 	mvn.w	r9, r9
 800baa0:	4638      	mov	r0, r7
 800baa2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800baa6:	f1bc 0f09 	cmp.w	ip, #9
 800baaa:	d815      	bhi.n	800bad8 <_strtoul_l.constprop.0+0x88>
 800baac:	4664      	mov	r4, ip
 800baae:	42a3      	cmp	r3, r4
 800bab0:	dd23      	ble.n	800bafa <_strtoul_l.constprop.0+0xaa>
 800bab2:	f1b7 3fff 	cmp.w	r7, #4294967295
 800bab6:	d007      	beq.n	800bac8 <_strtoul_l.constprop.0+0x78>
 800bab8:	4580      	cmp	r8, r0
 800baba:	d31b      	bcc.n	800baf4 <_strtoul_l.constprop.0+0xa4>
 800babc:	d101      	bne.n	800bac2 <_strtoul_l.constprop.0+0x72>
 800babe:	45a1      	cmp	r9, r4
 800bac0:	db18      	blt.n	800baf4 <_strtoul_l.constprop.0+0xa4>
 800bac2:	fb00 4003 	mla	r0, r0, r3, r4
 800bac6:	2701      	movs	r7, #1
 800bac8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bacc:	e7e9      	b.n	800baa2 <_strtoul_l.constprop.0+0x52>
 800bace:	2c2b      	cmp	r4, #43	; 0x2b
 800bad0:	bf04      	itt	eq
 800bad2:	782c      	ldrbeq	r4, [r5, #0]
 800bad4:	1c85      	addeq	r5, r0, #2
 800bad6:	e7cc      	b.n	800ba72 <_strtoul_l.constprop.0+0x22>
 800bad8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800badc:	f1bc 0f19 	cmp.w	ip, #25
 800bae0:	d801      	bhi.n	800bae6 <_strtoul_l.constprop.0+0x96>
 800bae2:	3c37      	subs	r4, #55	; 0x37
 800bae4:	e7e3      	b.n	800baae <_strtoul_l.constprop.0+0x5e>
 800bae6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800baea:	f1bc 0f19 	cmp.w	ip, #25
 800baee:	d804      	bhi.n	800bafa <_strtoul_l.constprop.0+0xaa>
 800baf0:	3c57      	subs	r4, #87	; 0x57
 800baf2:	e7dc      	b.n	800baae <_strtoul_l.constprop.0+0x5e>
 800baf4:	f04f 37ff 	mov.w	r7, #4294967295
 800baf8:	e7e6      	b.n	800bac8 <_strtoul_l.constprop.0+0x78>
 800bafa:	1c7b      	adds	r3, r7, #1
 800bafc:	d106      	bne.n	800bb0c <_strtoul_l.constprop.0+0xbc>
 800bafe:	2322      	movs	r3, #34	; 0x22
 800bb00:	f8ce 3000 	str.w	r3, [lr]
 800bb04:	4638      	mov	r0, r7
 800bb06:	b932      	cbnz	r2, 800bb16 <_strtoul_l.constprop.0+0xc6>
 800bb08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb0c:	b106      	cbz	r6, 800bb10 <_strtoul_l.constprop.0+0xc0>
 800bb0e:	4240      	negs	r0, r0
 800bb10:	2a00      	cmp	r2, #0
 800bb12:	d0f9      	beq.n	800bb08 <_strtoul_l.constprop.0+0xb8>
 800bb14:	b107      	cbz	r7, 800bb18 <_strtoul_l.constprop.0+0xc8>
 800bb16:	1e69      	subs	r1, r5, #1
 800bb18:	6011      	str	r1, [r2, #0]
 800bb1a:	e7f5      	b.n	800bb08 <_strtoul_l.constprop.0+0xb8>
 800bb1c:	2430      	movs	r4, #48	; 0x30
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d1b5      	bne.n	800ba8e <_strtoul_l.constprop.0+0x3e>
 800bb22:	2308      	movs	r3, #8
 800bb24:	e7b3      	b.n	800ba8e <_strtoul_l.constprop.0+0x3e>
 800bb26:	2c30      	cmp	r4, #48	; 0x30
 800bb28:	d0a9      	beq.n	800ba7e <_strtoul_l.constprop.0+0x2e>
 800bb2a:	230a      	movs	r3, #10
 800bb2c:	e7af      	b.n	800ba8e <_strtoul_l.constprop.0+0x3e>
 800bb2e:	bf00      	nop
 800bb30:	0800ff59 	.word	0x0800ff59

0800bb34 <strtoul>:
 800bb34:	4613      	mov	r3, r2
 800bb36:	460a      	mov	r2, r1
 800bb38:	4601      	mov	r1, r0
 800bb3a:	4802      	ldr	r0, [pc, #8]	; (800bb44 <strtoul+0x10>)
 800bb3c:	6800      	ldr	r0, [r0, #0]
 800bb3e:	f7ff bf87 	b.w	800ba50 <_strtoul_l.constprop.0>
 800bb42:	bf00      	nop
 800bb44:	200001dc 	.word	0x200001dc

0800bb48 <_scanf_float>:
 800bb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb4c:	b087      	sub	sp, #28
 800bb4e:	4617      	mov	r7, r2
 800bb50:	9303      	str	r3, [sp, #12]
 800bb52:	688b      	ldr	r3, [r1, #8]
 800bb54:	1e5a      	subs	r2, r3, #1
 800bb56:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800bb5a:	bf83      	ittte	hi
 800bb5c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800bb60:	195b      	addhi	r3, r3, r5
 800bb62:	9302      	strhi	r3, [sp, #8]
 800bb64:	2300      	movls	r3, #0
 800bb66:	bf86      	itte	hi
 800bb68:	f240 135d 	movwhi	r3, #349	; 0x15d
 800bb6c:	608b      	strhi	r3, [r1, #8]
 800bb6e:	9302      	strls	r3, [sp, #8]
 800bb70:	680b      	ldr	r3, [r1, #0]
 800bb72:	468b      	mov	fp, r1
 800bb74:	2500      	movs	r5, #0
 800bb76:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800bb7a:	f84b 3b1c 	str.w	r3, [fp], #28
 800bb7e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800bb82:	4680      	mov	r8, r0
 800bb84:	460c      	mov	r4, r1
 800bb86:	465e      	mov	r6, fp
 800bb88:	46aa      	mov	sl, r5
 800bb8a:	46a9      	mov	r9, r5
 800bb8c:	9501      	str	r5, [sp, #4]
 800bb8e:	68a2      	ldr	r2, [r4, #8]
 800bb90:	b152      	cbz	r2, 800bba8 <_scanf_float+0x60>
 800bb92:	683b      	ldr	r3, [r7, #0]
 800bb94:	781b      	ldrb	r3, [r3, #0]
 800bb96:	2b4e      	cmp	r3, #78	; 0x4e
 800bb98:	d864      	bhi.n	800bc64 <_scanf_float+0x11c>
 800bb9a:	2b40      	cmp	r3, #64	; 0x40
 800bb9c:	d83c      	bhi.n	800bc18 <_scanf_float+0xd0>
 800bb9e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800bba2:	b2c8      	uxtb	r0, r1
 800bba4:	280e      	cmp	r0, #14
 800bba6:	d93a      	bls.n	800bc1e <_scanf_float+0xd6>
 800bba8:	f1b9 0f00 	cmp.w	r9, #0
 800bbac:	d003      	beq.n	800bbb6 <_scanf_float+0x6e>
 800bbae:	6823      	ldr	r3, [r4, #0]
 800bbb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbb4:	6023      	str	r3, [r4, #0]
 800bbb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bbba:	f1ba 0f01 	cmp.w	sl, #1
 800bbbe:	f200 8113 	bhi.w	800bde8 <_scanf_float+0x2a0>
 800bbc2:	455e      	cmp	r6, fp
 800bbc4:	f200 8105 	bhi.w	800bdd2 <_scanf_float+0x28a>
 800bbc8:	2501      	movs	r5, #1
 800bbca:	4628      	mov	r0, r5
 800bbcc:	b007      	add	sp, #28
 800bbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800bbd6:	2a0d      	cmp	r2, #13
 800bbd8:	d8e6      	bhi.n	800bba8 <_scanf_float+0x60>
 800bbda:	a101      	add	r1, pc, #4	; (adr r1, 800bbe0 <_scanf_float+0x98>)
 800bbdc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800bbe0:	0800bd1f 	.word	0x0800bd1f
 800bbe4:	0800bba9 	.word	0x0800bba9
 800bbe8:	0800bba9 	.word	0x0800bba9
 800bbec:	0800bba9 	.word	0x0800bba9
 800bbf0:	0800bd7f 	.word	0x0800bd7f
 800bbf4:	0800bd57 	.word	0x0800bd57
 800bbf8:	0800bba9 	.word	0x0800bba9
 800bbfc:	0800bba9 	.word	0x0800bba9
 800bc00:	0800bd2d 	.word	0x0800bd2d
 800bc04:	0800bba9 	.word	0x0800bba9
 800bc08:	0800bba9 	.word	0x0800bba9
 800bc0c:	0800bba9 	.word	0x0800bba9
 800bc10:	0800bba9 	.word	0x0800bba9
 800bc14:	0800bce5 	.word	0x0800bce5
 800bc18:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800bc1c:	e7db      	b.n	800bbd6 <_scanf_float+0x8e>
 800bc1e:	290e      	cmp	r1, #14
 800bc20:	d8c2      	bhi.n	800bba8 <_scanf_float+0x60>
 800bc22:	a001      	add	r0, pc, #4	; (adr r0, 800bc28 <_scanf_float+0xe0>)
 800bc24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800bc28:	0800bcd7 	.word	0x0800bcd7
 800bc2c:	0800bba9 	.word	0x0800bba9
 800bc30:	0800bcd7 	.word	0x0800bcd7
 800bc34:	0800bd6b 	.word	0x0800bd6b
 800bc38:	0800bba9 	.word	0x0800bba9
 800bc3c:	0800bc85 	.word	0x0800bc85
 800bc40:	0800bcc1 	.word	0x0800bcc1
 800bc44:	0800bcc1 	.word	0x0800bcc1
 800bc48:	0800bcc1 	.word	0x0800bcc1
 800bc4c:	0800bcc1 	.word	0x0800bcc1
 800bc50:	0800bcc1 	.word	0x0800bcc1
 800bc54:	0800bcc1 	.word	0x0800bcc1
 800bc58:	0800bcc1 	.word	0x0800bcc1
 800bc5c:	0800bcc1 	.word	0x0800bcc1
 800bc60:	0800bcc1 	.word	0x0800bcc1
 800bc64:	2b6e      	cmp	r3, #110	; 0x6e
 800bc66:	d809      	bhi.n	800bc7c <_scanf_float+0x134>
 800bc68:	2b60      	cmp	r3, #96	; 0x60
 800bc6a:	d8b2      	bhi.n	800bbd2 <_scanf_float+0x8a>
 800bc6c:	2b54      	cmp	r3, #84	; 0x54
 800bc6e:	d077      	beq.n	800bd60 <_scanf_float+0x218>
 800bc70:	2b59      	cmp	r3, #89	; 0x59
 800bc72:	d199      	bne.n	800bba8 <_scanf_float+0x60>
 800bc74:	2d07      	cmp	r5, #7
 800bc76:	d197      	bne.n	800bba8 <_scanf_float+0x60>
 800bc78:	2508      	movs	r5, #8
 800bc7a:	e029      	b.n	800bcd0 <_scanf_float+0x188>
 800bc7c:	2b74      	cmp	r3, #116	; 0x74
 800bc7e:	d06f      	beq.n	800bd60 <_scanf_float+0x218>
 800bc80:	2b79      	cmp	r3, #121	; 0x79
 800bc82:	e7f6      	b.n	800bc72 <_scanf_float+0x12a>
 800bc84:	6821      	ldr	r1, [r4, #0]
 800bc86:	05c8      	lsls	r0, r1, #23
 800bc88:	d51a      	bpl.n	800bcc0 <_scanf_float+0x178>
 800bc8a:	9b02      	ldr	r3, [sp, #8]
 800bc8c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800bc90:	6021      	str	r1, [r4, #0]
 800bc92:	f109 0901 	add.w	r9, r9, #1
 800bc96:	b11b      	cbz	r3, 800bca0 <_scanf_float+0x158>
 800bc98:	3b01      	subs	r3, #1
 800bc9a:	3201      	adds	r2, #1
 800bc9c:	9302      	str	r3, [sp, #8]
 800bc9e:	60a2      	str	r2, [r4, #8]
 800bca0:	68a3      	ldr	r3, [r4, #8]
 800bca2:	3b01      	subs	r3, #1
 800bca4:	60a3      	str	r3, [r4, #8]
 800bca6:	6923      	ldr	r3, [r4, #16]
 800bca8:	3301      	adds	r3, #1
 800bcaa:	6123      	str	r3, [r4, #16]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	3b01      	subs	r3, #1
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	607b      	str	r3, [r7, #4]
 800bcb4:	f340 8084 	ble.w	800bdc0 <_scanf_float+0x278>
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	3301      	adds	r3, #1
 800bcbc:	603b      	str	r3, [r7, #0]
 800bcbe:	e766      	b.n	800bb8e <_scanf_float+0x46>
 800bcc0:	eb1a 0f05 	cmn.w	sl, r5
 800bcc4:	f47f af70 	bne.w	800bba8 <_scanf_float+0x60>
 800bcc8:	6822      	ldr	r2, [r4, #0]
 800bcca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800bcce:	6022      	str	r2, [r4, #0]
 800bcd0:	f806 3b01 	strb.w	r3, [r6], #1
 800bcd4:	e7e4      	b.n	800bca0 <_scanf_float+0x158>
 800bcd6:	6822      	ldr	r2, [r4, #0]
 800bcd8:	0610      	lsls	r0, r2, #24
 800bcda:	f57f af65 	bpl.w	800bba8 <_scanf_float+0x60>
 800bcde:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bce2:	e7f4      	b.n	800bcce <_scanf_float+0x186>
 800bce4:	f1ba 0f00 	cmp.w	sl, #0
 800bce8:	d10e      	bne.n	800bd08 <_scanf_float+0x1c0>
 800bcea:	f1b9 0f00 	cmp.w	r9, #0
 800bcee:	d10e      	bne.n	800bd0e <_scanf_float+0x1c6>
 800bcf0:	6822      	ldr	r2, [r4, #0]
 800bcf2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bcf6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bcfa:	d108      	bne.n	800bd0e <_scanf_float+0x1c6>
 800bcfc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bd00:	6022      	str	r2, [r4, #0]
 800bd02:	f04f 0a01 	mov.w	sl, #1
 800bd06:	e7e3      	b.n	800bcd0 <_scanf_float+0x188>
 800bd08:	f1ba 0f02 	cmp.w	sl, #2
 800bd0c:	d055      	beq.n	800bdba <_scanf_float+0x272>
 800bd0e:	2d01      	cmp	r5, #1
 800bd10:	d002      	beq.n	800bd18 <_scanf_float+0x1d0>
 800bd12:	2d04      	cmp	r5, #4
 800bd14:	f47f af48 	bne.w	800bba8 <_scanf_float+0x60>
 800bd18:	3501      	adds	r5, #1
 800bd1a:	b2ed      	uxtb	r5, r5
 800bd1c:	e7d8      	b.n	800bcd0 <_scanf_float+0x188>
 800bd1e:	f1ba 0f01 	cmp.w	sl, #1
 800bd22:	f47f af41 	bne.w	800bba8 <_scanf_float+0x60>
 800bd26:	f04f 0a02 	mov.w	sl, #2
 800bd2a:	e7d1      	b.n	800bcd0 <_scanf_float+0x188>
 800bd2c:	b97d      	cbnz	r5, 800bd4e <_scanf_float+0x206>
 800bd2e:	f1b9 0f00 	cmp.w	r9, #0
 800bd32:	f47f af3c 	bne.w	800bbae <_scanf_float+0x66>
 800bd36:	6822      	ldr	r2, [r4, #0]
 800bd38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800bd3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800bd40:	f47f af39 	bne.w	800bbb6 <_scanf_float+0x6e>
 800bd44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bd48:	6022      	str	r2, [r4, #0]
 800bd4a:	2501      	movs	r5, #1
 800bd4c:	e7c0      	b.n	800bcd0 <_scanf_float+0x188>
 800bd4e:	2d03      	cmp	r5, #3
 800bd50:	d0e2      	beq.n	800bd18 <_scanf_float+0x1d0>
 800bd52:	2d05      	cmp	r5, #5
 800bd54:	e7de      	b.n	800bd14 <_scanf_float+0x1cc>
 800bd56:	2d02      	cmp	r5, #2
 800bd58:	f47f af26 	bne.w	800bba8 <_scanf_float+0x60>
 800bd5c:	2503      	movs	r5, #3
 800bd5e:	e7b7      	b.n	800bcd0 <_scanf_float+0x188>
 800bd60:	2d06      	cmp	r5, #6
 800bd62:	f47f af21 	bne.w	800bba8 <_scanf_float+0x60>
 800bd66:	2507      	movs	r5, #7
 800bd68:	e7b2      	b.n	800bcd0 <_scanf_float+0x188>
 800bd6a:	6822      	ldr	r2, [r4, #0]
 800bd6c:	0591      	lsls	r1, r2, #22
 800bd6e:	f57f af1b 	bpl.w	800bba8 <_scanf_float+0x60>
 800bd72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800bd76:	6022      	str	r2, [r4, #0]
 800bd78:	f8cd 9004 	str.w	r9, [sp, #4]
 800bd7c:	e7a8      	b.n	800bcd0 <_scanf_float+0x188>
 800bd7e:	6822      	ldr	r2, [r4, #0]
 800bd80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800bd84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800bd88:	d006      	beq.n	800bd98 <_scanf_float+0x250>
 800bd8a:	0550      	lsls	r0, r2, #21
 800bd8c:	f57f af0c 	bpl.w	800bba8 <_scanf_float+0x60>
 800bd90:	f1b9 0f00 	cmp.w	r9, #0
 800bd94:	f43f af0f 	beq.w	800bbb6 <_scanf_float+0x6e>
 800bd98:	0591      	lsls	r1, r2, #22
 800bd9a:	bf58      	it	pl
 800bd9c:	9901      	ldrpl	r1, [sp, #4]
 800bd9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800bda2:	bf58      	it	pl
 800bda4:	eba9 0101 	subpl.w	r1, r9, r1
 800bda8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800bdac:	bf58      	it	pl
 800bdae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800bdb2:	6022      	str	r2, [r4, #0]
 800bdb4:	f04f 0900 	mov.w	r9, #0
 800bdb8:	e78a      	b.n	800bcd0 <_scanf_float+0x188>
 800bdba:	f04f 0a03 	mov.w	sl, #3
 800bdbe:	e787      	b.n	800bcd0 <_scanf_float+0x188>
 800bdc0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4798      	blx	r3
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	f43f aedf 	beq.w	800bb8e <_scanf_float+0x46>
 800bdd0:	e6ea      	b.n	800bba8 <_scanf_float+0x60>
 800bdd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800bdda:	463a      	mov	r2, r7
 800bddc:	4640      	mov	r0, r8
 800bdde:	4798      	blx	r3
 800bde0:	6923      	ldr	r3, [r4, #16]
 800bde2:	3b01      	subs	r3, #1
 800bde4:	6123      	str	r3, [r4, #16]
 800bde6:	e6ec      	b.n	800bbc2 <_scanf_float+0x7a>
 800bde8:	1e6b      	subs	r3, r5, #1
 800bdea:	2b06      	cmp	r3, #6
 800bdec:	d825      	bhi.n	800be3a <_scanf_float+0x2f2>
 800bdee:	2d02      	cmp	r5, #2
 800bdf0:	d836      	bhi.n	800be60 <_scanf_float+0x318>
 800bdf2:	455e      	cmp	r6, fp
 800bdf4:	f67f aee8 	bls.w	800bbc8 <_scanf_float+0x80>
 800bdf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800bdfc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be00:	463a      	mov	r2, r7
 800be02:	4640      	mov	r0, r8
 800be04:	4798      	blx	r3
 800be06:	6923      	ldr	r3, [r4, #16]
 800be08:	3b01      	subs	r3, #1
 800be0a:	6123      	str	r3, [r4, #16]
 800be0c:	e7f1      	b.n	800bdf2 <_scanf_float+0x2aa>
 800be0e:	9802      	ldr	r0, [sp, #8]
 800be10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800be18:	9002      	str	r0, [sp, #8]
 800be1a:	463a      	mov	r2, r7
 800be1c:	4640      	mov	r0, r8
 800be1e:	4798      	blx	r3
 800be20:	6923      	ldr	r3, [r4, #16]
 800be22:	3b01      	subs	r3, #1
 800be24:	6123      	str	r3, [r4, #16]
 800be26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be2a:	fa5f fa8a 	uxtb.w	sl, sl
 800be2e:	f1ba 0f02 	cmp.w	sl, #2
 800be32:	d1ec      	bne.n	800be0e <_scanf_float+0x2c6>
 800be34:	3d03      	subs	r5, #3
 800be36:	b2ed      	uxtb	r5, r5
 800be38:	1b76      	subs	r6, r6, r5
 800be3a:	6823      	ldr	r3, [r4, #0]
 800be3c:	05da      	lsls	r2, r3, #23
 800be3e:	d52f      	bpl.n	800bea0 <_scanf_float+0x358>
 800be40:	055b      	lsls	r3, r3, #21
 800be42:	d510      	bpl.n	800be66 <_scanf_float+0x31e>
 800be44:	455e      	cmp	r6, fp
 800be46:	f67f aebf 	bls.w	800bbc8 <_scanf_float+0x80>
 800be4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800be52:	463a      	mov	r2, r7
 800be54:	4640      	mov	r0, r8
 800be56:	4798      	blx	r3
 800be58:	6923      	ldr	r3, [r4, #16]
 800be5a:	3b01      	subs	r3, #1
 800be5c:	6123      	str	r3, [r4, #16]
 800be5e:	e7f1      	b.n	800be44 <_scanf_float+0x2fc>
 800be60:	46aa      	mov	sl, r5
 800be62:	9602      	str	r6, [sp, #8]
 800be64:	e7df      	b.n	800be26 <_scanf_float+0x2de>
 800be66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800be6a:	6923      	ldr	r3, [r4, #16]
 800be6c:	2965      	cmp	r1, #101	; 0x65
 800be6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800be72:	f106 35ff 	add.w	r5, r6, #4294967295
 800be76:	6123      	str	r3, [r4, #16]
 800be78:	d00c      	beq.n	800be94 <_scanf_float+0x34c>
 800be7a:	2945      	cmp	r1, #69	; 0x45
 800be7c:	d00a      	beq.n	800be94 <_scanf_float+0x34c>
 800be7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be82:	463a      	mov	r2, r7
 800be84:	4640      	mov	r0, r8
 800be86:	4798      	blx	r3
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800be8e:	3b01      	subs	r3, #1
 800be90:	1eb5      	subs	r5, r6, #2
 800be92:	6123      	str	r3, [r4, #16]
 800be94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800be98:	463a      	mov	r2, r7
 800be9a:	4640      	mov	r0, r8
 800be9c:	4798      	blx	r3
 800be9e:	462e      	mov	r6, r5
 800bea0:	6825      	ldr	r5, [r4, #0]
 800bea2:	f015 0510 	ands.w	r5, r5, #16
 800bea6:	d158      	bne.n	800bf5a <_scanf_float+0x412>
 800bea8:	7035      	strb	r5, [r6, #0]
 800beaa:	6823      	ldr	r3, [r4, #0]
 800beac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800beb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beb4:	d11c      	bne.n	800bef0 <_scanf_float+0x3a8>
 800beb6:	9b01      	ldr	r3, [sp, #4]
 800beb8:	454b      	cmp	r3, r9
 800beba:	eba3 0209 	sub.w	r2, r3, r9
 800bebe:	d124      	bne.n	800bf0a <_scanf_float+0x3c2>
 800bec0:	2200      	movs	r2, #0
 800bec2:	4659      	mov	r1, fp
 800bec4:	4640      	mov	r0, r8
 800bec6:	f7ff fd57 	bl	800b978 <_strtod_r>
 800beca:	9b03      	ldr	r3, [sp, #12]
 800becc:	6821      	ldr	r1, [r4, #0]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	f011 0f02 	tst.w	r1, #2
 800bed4:	ec57 6b10 	vmov	r6, r7, d0
 800bed8:	f103 0204 	add.w	r2, r3, #4
 800bedc:	d020      	beq.n	800bf20 <_scanf_float+0x3d8>
 800bede:	9903      	ldr	r1, [sp, #12]
 800bee0:	600a      	str	r2, [r1, #0]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	e9c3 6700 	strd	r6, r7, [r3]
 800bee8:	68e3      	ldr	r3, [r4, #12]
 800beea:	3301      	adds	r3, #1
 800beec:	60e3      	str	r3, [r4, #12]
 800beee:	e66c      	b.n	800bbca <_scanf_float+0x82>
 800bef0:	9b04      	ldr	r3, [sp, #16]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d0e4      	beq.n	800bec0 <_scanf_float+0x378>
 800bef6:	9905      	ldr	r1, [sp, #20]
 800bef8:	230a      	movs	r3, #10
 800befa:	462a      	mov	r2, r5
 800befc:	3101      	adds	r1, #1
 800befe:	4640      	mov	r0, r8
 800bf00:	f001 fb96 	bl	800d630 <_strtol_r>
 800bf04:	9b04      	ldr	r3, [sp, #16]
 800bf06:	9e05      	ldr	r6, [sp, #20]
 800bf08:	1ac2      	subs	r2, r0, r3
 800bf0a:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800bf0e:	429e      	cmp	r6, r3
 800bf10:	bf28      	it	cs
 800bf12:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800bf16:	4912      	ldr	r1, [pc, #72]	; (800bf60 <_scanf_float+0x418>)
 800bf18:	4630      	mov	r0, r6
 800bf1a:	f000 f8e7 	bl	800c0ec <siprintf>
 800bf1e:	e7cf      	b.n	800bec0 <_scanf_float+0x378>
 800bf20:	f011 0f04 	tst.w	r1, #4
 800bf24:	9903      	ldr	r1, [sp, #12]
 800bf26:	600a      	str	r2, [r1, #0]
 800bf28:	d1db      	bne.n	800bee2 <_scanf_float+0x39a>
 800bf2a:	f8d3 8000 	ldr.w	r8, [r3]
 800bf2e:	ee10 2a10 	vmov	r2, s0
 800bf32:	ee10 0a10 	vmov	r0, s0
 800bf36:	463b      	mov	r3, r7
 800bf38:	4639      	mov	r1, r7
 800bf3a:	f7f4 fdef 	bl	8000b1c <__aeabi_dcmpun>
 800bf3e:	b128      	cbz	r0, 800bf4c <_scanf_float+0x404>
 800bf40:	4808      	ldr	r0, [pc, #32]	; (800bf64 <_scanf_float+0x41c>)
 800bf42:	f000 f9dd 	bl	800c300 <nanf>
 800bf46:	ed88 0a00 	vstr	s0, [r8]
 800bf4a:	e7cd      	b.n	800bee8 <_scanf_float+0x3a0>
 800bf4c:	4630      	mov	r0, r6
 800bf4e:	4639      	mov	r1, r7
 800bf50:	f7f4 fe1a 	bl	8000b88 <__aeabi_d2f>
 800bf54:	f8c8 0000 	str.w	r0, [r8]
 800bf58:	e7c6      	b.n	800bee8 <_scanf_float+0x3a0>
 800bf5a:	2500      	movs	r5, #0
 800bf5c:	e635      	b.n	800bbca <_scanf_float+0x82>
 800bf5e:	bf00      	nop
 800bf60:	08010059 	.word	0x08010059
 800bf64:	080102b2 	.word	0x080102b2

0800bf68 <std>:
 800bf68:	2300      	movs	r3, #0
 800bf6a:	b510      	push	{r4, lr}
 800bf6c:	4604      	mov	r4, r0
 800bf6e:	e9c0 3300 	strd	r3, r3, [r0]
 800bf72:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf76:	6083      	str	r3, [r0, #8]
 800bf78:	8181      	strh	r1, [r0, #12]
 800bf7a:	6643      	str	r3, [r0, #100]	; 0x64
 800bf7c:	81c2      	strh	r2, [r0, #14]
 800bf7e:	6183      	str	r3, [r0, #24]
 800bf80:	4619      	mov	r1, r3
 800bf82:	2208      	movs	r2, #8
 800bf84:	305c      	adds	r0, #92	; 0x5c
 800bf86:	f000 f914 	bl	800c1b2 <memset>
 800bf8a:	4b0d      	ldr	r3, [pc, #52]	; (800bfc0 <std+0x58>)
 800bf8c:	6263      	str	r3, [r4, #36]	; 0x24
 800bf8e:	4b0d      	ldr	r3, [pc, #52]	; (800bfc4 <std+0x5c>)
 800bf90:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf92:	4b0d      	ldr	r3, [pc, #52]	; (800bfc8 <std+0x60>)
 800bf94:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf96:	4b0d      	ldr	r3, [pc, #52]	; (800bfcc <std+0x64>)
 800bf98:	6323      	str	r3, [r4, #48]	; 0x30
 800bf9a:	4b0d      	ldr	r3, [pc, #52]	; (800bfd0 <std+0x68>)
 800bf9c:	6224      	str	r4, [r4, #32]
 800bf9e:	429c      	cmp	r4, r3
 800bfa0:	d006      	beq.n	800bfb0 <std+0x48>
 800bfa2:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bfa6:	4294      	cmp	r4, r2
 800bfa8:	d002      	beq.n	800bfb0 <std+0x48>
 800bfaa:	33d0      	adds	r3, #208	; 0xd0
 800bfac:	429c      	cmp	r4, r3
 800bfae:	d105      	bne.n	800bfbc <std+0x54>
 800bfb0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bfb8:	f000 b986 	b.w	800c2c8 <__retarget_lock_init_recursive>
 800bfbc:	bd10      	pop	{r4, pc}
 800bfbe:	bf00      	nop
 800bfc0:	0800c12d 	.word	0x0800c12d
 800bfc4:	0800c14f 	.word	0x0800c14f
 800bfc8:	0800c187 	.word	0x0800c187
 800bfcc:	0800c1ab 	.word	0x0800c1ab
 800bfd0:	20000e6c 	.word	0x20000e6c

0800bfd4 <stdio_exit_handler>:
 800bfd4:	4a02      	ldr	r2, [pc, #8]	; (800bfe0 <stdio_exit_handler+0xc>)
 800bfd6:	4903      	ldr	r1, [pc, #12]	; (800bfe4 <stdio_exit_handler+0x10>)
 800bfd8:	4803      	ldr	r0, [pc, #12]	; (800bfe8 <stdio_exit_handler+0x14>)
 800bfda:	f000 b869 	b.w	800c0b0 <_fwalk_sglue>
 800bfde:	bf00      	nop
 800bfe0:	20000018 	.word	0x20000018
 800bfe4:	0800dd2d 	.word	0x0800dd2d
 800bfe8:	20000190 	.word	0x20000190

0800bfec <cleanup_stdio>:
 800bfec:	6841      	ldr	r1, [r0, #4]
 800bfee:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <cleanup_stdio+0x34>)
 800bff0:	4299      	cmp	r1, r3
 800bff2:	b510      	push	{r4, lr}
 800bff4:	4604      	mov	r4, r0
 800bff6:	d001      	beq.n	800bffc <cleanup_stdio+0x10>
 800bff8:	f001 fe98 	bl	800dd2c <_fflush_r>
 800bffc:	68a1      	ldr	r1, [r4, #8]
 800bffe:	4b09      	ldr	r3, [pc, #36]	; (800c024 <cleanup_stdio+0x38>)
 800c000:	4299      	cmp	r1, r3
 800c002:	d002      	beq.n	800c00a <cleanup_stdio+0x1e>
 800c004:	4620      	mov	r0, r4
 800c006:	f001 fe91 	bl	800dd2c <_fflush_r>
 800c00a:	68e1      	ldr	r1, [r4, #12]
 800c00c:	4b06      	ldr	r3, [pc, #24]	; (800c028 <cleanup_stdio+0x3c>)
 800c00e:	4299      	cmp	r1, r3
 800c010:	d004      	beq.n	800c01c <cleanup_stdio+0x30>
 800c012:	4620      	mov	r0, r4
 800c014:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c018:	f001 be88 	b.w	800dd2c <_fflush_r>
 800c01c:	bd10      	pop	{r4, pc}
 800c01e:	bf00      	nop
 800c020:	20000e6c 	.word	0x20000e6c
 800c024:	20000ed4 	.word	0x20000ed4
 800c028:	20000f3c 	.word	0x20000f3c

0800c02c <global_stdio_init.part.0>:
 800c02c:	b510      	push	{r4, lr}
 800c02e:	4b0b      	ldr	r3, [pc, #44]	; (800c05c <global_stdio_init.part.0+0x30>)
 800c030:	4c0b      	ldr	r4, [pc, #44]	; (800c060 <global_stdio_init.part.0+0x34>)
 800c032:	4a0c      	ldr	r2, [pc, #48]	; (800c064 <global_stdio_init.part.0+0x38>)
 800c034:	601a      	str	r2, [r3, #0]
 800c036:	4620      	mov	r0, r4
 800c038:	2200      	movs	r2, #0
 800c03a:	2104      	movs	r1, #4
 800c03c:	f7ff ff94 	bl	800bf68 <std>
 800c040:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c044:	2201      	movs	r2, #1
 800c046:	2109      	movs	r1, #9
 800c048:	f7ff ff8e 	bl	800bf68 <std>
 800c04c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c050:	2202      	movs	r2, #2
 800c052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c056:	2112      	movs	r1, #18
 800c058:	f7ff bf86 	b.w	800bf68 <std>
 800c05c:	20000fa4 	.word	0x20000fa4
 800c060:	20000e6c 	.word	0x20000e6c
 800c064:	0800bfd5 	.word	0x0800bfd5

0800c068 <__sfp_lock_acquire>:
 800c068:	4801      	ldr	r0, [pc, #4]	; (800c070 <__sfp_lock_acquire+0x8>)
 800c06a:	f000 b92e 	b.w	800c2ca <__retarget_lock_acquire_recursive>
 800c06e:	bf00      	nop
 800c070:	20000fad 	.word	0x20000fad

0800c074 <__sfp_lock_release>:
 800c074:	4801      	ldr	r0, [pc, #4]	; (800c07c <__sfp_lock_release+0x8>)
 800c076:	f000 b929 	b.w	800c2cc <__retarget_lock_release_recursive>
 800c07a:	bf00      	nop
 800c07c:	20000fad 	.word	0x20000fad

0800c080 <__sinit>:
 800c080:	b510      	push	{r4, lr}
 800c082:	4604      	mov	r4, r0
 800c084:	f7ff fff0 	bl	800c068 <__sfp_lock_acquire>
 800c088:	6a23      	ldr	r3, [r4, #32]
 800c08a:	b11b      	cbz	r3, 800c094 <__sinit+0x14>
 800c08c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c090:	f7ff bff0 	b.w	800c074 <__sfp_lock_release>
 800c094:	4b04      	ldr	r3, [pc, #16]	; (800c0a8 <__sinit+0x28>)
 800c096:	6223      	str	r3, [r4, #32]
 800c098:	4b04      	ldr	r3, [pc, #16]	; (800c0ac <__sinit+0x2c>)
 800c09a:	681b      	ldr	r3, [r3, #0]
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d1f5      	bne.n	800c08c <__sinit+0xc>
 800c0a0:	f7ff ffc4 	bl	800c02c <global_stdio_init.part.0>
 800c0a4:	e7f2      	b.n	800c08c <__sinit+0xc>
 800c0a6:	bf00      	nop
 800c0a8:	0800bfed 	.word	0x0800bfed
 800c0ac:	20000fa4 	.word	0x20000fa4

0800c0b0 <_fwalk_sglue>:
 800c0b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c0b4:	4607      	mov	r7, r0
 800c0b6:	4688      	mov	r8, r1
 800c0b8:	4614      	mov	r4, r2
 800c0ba:	2600      	movs	r6, #0
 800c0bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c0c0:	f1b9 0901 	subs.w	r9, r9, #1
 800c0c4:	d505      	bpl.n	800c0d2 <_fwalk_sglue+0x22>
 800c0c6:	6824      	ldr	r4, [r4, #0]
 800c0c8:	2c00      	cmp	r4, #0
 800c0ca:	d1f7      	bne.n	800c0bc <_fwalk_sglue+0xc>
 800c0cc:	4630      	mov	r0, r6
 800c0ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c0d2:	89ab      	ldrh	r3, [r5, #12]
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d907      	bls.n	800c0e8 <_fwalk_sglue+0x38>
 800c0d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c0dc:	3301      	adds	r3, #1
 800c0de:	d003      	beq.n	800c0e8 <_fwalk_sglue+0x38>
 800c0e0:	4629      	mov	r1, r5
 800c0e2:	4638      	mov	r0, r7
 800c0e4:	47c0      	blx	r8
 800c0e6:	4306      	orrs	r6, r0
 800c0e8:	3568      	adds	r5, #104	; 0x68
 800c0ea:	e7e9      	b.n	800c0c0 <_fwalk_sglue+0x10>

0800c0ec <siprintf>:
 800c0ec:	b40e      	push	{r1, r2, r3}
 800c0ee:	b500      	push	{lr}
 800c0f0:	b09c      	sub	sp, #112	; 0x70
 800c0f2:	ab1d      	add	r3, sp, #116	; 0x74
 800c0f4:	9002      	str	r0, [sp, #8]
 800c0f6:	9006      	str	r0, [sp, #24]
 800c0f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c0fc:	4809      	ldr	r0, [pc, #36]	; (800c124 <siprintf+0x38>)
 800c0fe:	9107      	str	r1, [sp, #28]
 800c100:	9104      	str	r1, [sp, #16]
 800c102:	4909      	ldr	r1, [pc, #36]	; (800c128 <siprintf+0x3c>)
 800c104:	f853 2b04 	ldr.w	r2, [r3], #4
 800c108:	9105      	str	r1, [sp, #20]
 800c10a:	6800      	ldr	r0, [r0, #0]
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	a902      	add	r1, sp, #8
 800c110:	f001 faf8 	bl	800d704 <_svfiprintf_r>
 800c114:	9b02      	ldr	r3, [sp, #8]
 800c116:	2200      	movs	r2, #0
 800c118:	701a      	strb	r2, [r3, #0]
 800c11a:	b01c      	add	sp, #112	; 0x70
 800c11c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c120:	b003      	add	sp, #12
 800c122:	4770      	bx	lr
 800c124:	200001dc 	.word	0x200001dc
 800c128:	ffff0208 	.word	0xffff0208

0800c12c <__sread>:
 800c12c:	b510      	push	{r4, lr}
 800c12e:	460c      	mov	r4, r1
 800c130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c134:	f000 f87a 	bl	800c22c <_read_r>
 800c138:	2800      	cmp	r0, #0
 800c13a:	bfab      	itete	ge
 800c13c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c13e:	89a3      	ldrhlt	r3, [r4, #12]
 800c140:	181b      	addge	r3, r3, r0
 800c142:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c146:	bfac      	ite	ge
 800c148:	6563      	strge	r3, [r4, #84]	; 0x54
 800c14a:	81a3      	strhlt	r3, [r4, #12]
 800c14c:	bd10      	pop	{r4, pc}

0800c14e <__swrite>:
 800c14e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c152:	461f      	mov	r7, r3
 800c154:	898b      	ldrh	r3, [r1, #12]
 800c156:	05db      	lsls	r3, r3, #23
 800c158:	4605      	mov	r5, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	4616      	mov	r6, r2
 800c15e:	d505      	bpl.n	800c16c <__swrite+0x1e>
 800c160:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c164:	2302      	movs	r3, #2
 800c166:	2200      	movs	r2, #0
 800c168:	f000 f84e 	bl	800c208 <_lseek_r>
 800c16c:	89a3      	ldrh	r3, [r4, #12]
 800c16e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c176:	81a3      	strh	r3, [r4, #12]
 800c178:	4632      	mov	r2, r6
 800c17a:	463b      	mov	r3, r7
 800c17c:	4628      	mov	r0, r5
 800c17e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c182:	f000 b865 	b.w	800c250 <_write_r>

0800c186 <__sseek>:
 800c186:	b510      	push	{r4, lr}
 800c188:	460c      	mov	r4, r1
 800c18a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c18e:	f000 f83b 	bl	800c208 <_lseek_r>
 800c192:	1c43      	adds	r3, r0, #1
 800c194:	89a3      	ldrh	r3, [r4, #12]
 800c196:	bf15      	itete	ne
 800c198:	6560      	strne	r0, [r4, #84]	; 0x54
 800c19a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c19e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c1a2:	81a3      	strheq	r3, [r4, #12]
 800c1a4:	bf18      	it	ne
 800c1a6:	81a3      	strhne	r3, [r4, #12]
 800c1a8:	bd10      	pop	{r4, pc}

0800c1aa <__sclose>:
 800c1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c1ae:	f000 b81b 	b.w	800c1e8 <_close_r>

0800c1b2 <memset>:
 800c1b2:	4402      	add	r2, r0
 800c1b4:	4603      	mov	r3, r0
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d100      	bne.n	800c1bc <memset+0xa>
 800c1ba:	4770      	bx	lr
 800c1bc:	f803 1b01 	strb.w	r1, [r3], #1
 800c1c0:	e7f9      	b.n	800c1b6 <memset+0x4>

0800c1c2 <strncmp>:
 800c1c2:	b510      	push	{r4, lr}
 800c1c4:	b16a      	cbz	r2, 800c1e2 <strncmp+0x20>
 800c1c6:	3901      	subs	r1, #1
 800c1c8:	1884      	adds	r4, r0, r2
 800c1ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ce:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c1d2:	429a      	cmp	r2, r3
 800c1d4:	d103      	bne.n	800c1de <strncmp+0x1c>
 800c1d6:	42a0      	cmp	r0, r4
 800c1d8:	d001      	beq.n	800c1de <strncmp+0x1c>
 800c1da:	2a00      	cmp	r2, #0
 800c1dc:	d1f5      	bne.n	800c1ca <strncmp+0x8>
 800c1de:	1ad0      	subs	r0, r2, r3
 800c1e0:	bd10      	pop	{r4, pc}
 800c1e2:	4610      	mov	r0, r2
 800c1e4:	e7fc      	b.n	800c1e0 <strncmp+0x1e>
	...

0800c1e8 <_close_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d06      	ldr	r5, [pc, #24]	; (800c204 <_close_r+0x1c>)
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	4604      	mov	r4, r0
 800c1f0:	4608      	mov	r0, r1
 800c1f2:	602b      	str	r3, [r5, #0]
 800c1f4:	f7f8 ff61 	bl	80050ba <_close>
 800c1f8:	1c43      	adds	r3, r0, #1
 800c1fa:	d102      	bne.n	800c202 <_close_r+0x1a>
 800c1fc:	682b      	ldr	r3, [r5, #0]
 800c1fe:	b103      	cbz	r3, 800c202 <_close_r+0x1a>
 800c200:	6023      	str	r3, [r4, #0]
 800c202:	bd38      	pop	{r3, r4, r5, pc}
 800c204:	20000fa8 	.word	0x20000fa8

0800c208 <_lseek_r>:
 800c208:	b538      	push	{r3, r4, r5, lr}
 800c20a:	4d07      	ldr	r5, [pc, #28]	; (800c228 <_lseek_r+0x20>)
 800c20c:	4604      	mov	r4, r0
 800c20e:	4608      	mov	r0, r1
 800c210:	4611      	mov	r1, r2
 800c212:	2200      	movs	r2, #0
 800c214:	602a      	str	r2, [r5, #0]
 800c216:	461a      	mov	r2, r3
 800c218:	f7f8 ff76 	bl	8005108 <_lseek>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_lseek_r+0x1e>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_lseek_r+0x1e>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	20000fa8 	.word	0x20000fa8

0800c22c <_read_r>:
 800c22c:	b538      	push	{r3, r4, r5, lr}
 800c22e:	4d07      	ldr	r5, [pc, #28]	; (800c24c <_read_r+0x20>)
 800c230:	4604      	mov	r4, r0
 800c232:	4608      	mov	r0, r1
 800c234:	4611      	mov	r1, r2
 800c236:	2200      	movs	r2, #0
 800c238:	602a      	str	r2, [r5, #0]
 800c23a:	461a      	mov	r2, r3
 800c23c:	f7f8 ff04 	bl	8005048 <_read>
 800c240:	1c43      	adds	r3, r0, #1
 800c242:	d102      	bne.n	800c24a <_read_r+0x1e>
 800c244:	682b      	ldr	r3, [r5, #0]
 800c246:	b103      	cbz	r3, 800c24a <_read_r+0x1e>
 800c248:	6023      	str	r3, [r4, #0]
 800c24a:	bd38      	pop	{r3, r4, r5, pc}
 800c24c:	20000fa8 	.word	0x20000fa8

0800c250 <_write_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d07      	ldr	r5, [pc, #28]	; (800c270 <_write_r+0x20>)
 800c254:	4604      	mov	r4, r0
 800c256:	4608      	mov	r0, r1
 800c258:	4611      	mov	r1, r2
 800c25a:	2200      	movs	r2, #0
 800c25c:	602a      	str	r2, [r5, #0]
 800c25e:	461a      	mov	r2, r3
 800c260:	f7f8 ff0f 	bl	8005082 <_write>
 800c264:	1c43      	adds	r3, r0, #1
 800c266:	d102      	bne.n	800c26e <_write_r+0x1e>
 800c268:	682b      	ldr	r3, [r5, #0]
 800c26a:	b103      	cbz	r3, 800c26e <_write_r+0x1e>
 800c26c:	6023      	str	r3, [r4, #0]
 800c26e:	bd38      	pop	{r3, r4, r5, pc}
 800c270:	20000fa8 	.word	0x20000fa8

0800c274 <__errno>:
 800c274:	4b01      	ldr	r3, [pc, #4]	; (800c27c <__errno+0x8>)
 800c276:	6818      	ldr	r0, [r3, #0]
 800c278:	4770      	bx	lr
 800c27a:	bf00      	nop
 800c27c:	200001dc 	.word	0x200001dc

0800c280 <__libc_init_array>:
 800c280:	b570      	push	{r4, r5, r6, lr}
 800c282:	4d0d      	ldr	r5, [pc, #52]	; (800c2b8 <__libc_init_array+0x38>)
 800c284:	4c0d      	ldr	r4, [pc, #52]	; (800c2bc <__libc_init_array+0x3c>)
 800c286:	1b64      	subs	r4, r4, r5
 800c288:	10a4      	asrs	r4, r4, #2
 800c28a:	2600      	movs	r6, #0
 800c28c:	42a6      	cmp	r6, r4
 800c28e:	d109      	bne.n	800c2a4 <__libc_init_array+0x24>
 800c290:	4d0b      	ldr	r5, [pc, #44]	; (800c2c0 <__libc_init_array+0x40>)
 800c292:	4c0c      	ldr	r4, [pc, #48]	; (800c2c4 <__libc_init_array+0x44>)
 800c294:	f003 fdc4 	bl	800fe20 <_init>
 800c298:	1b64      	subs	r4, r4, r5
 800c29a:	10a4      	asrs	r4, r4, #2
 800c29c:	2600      	movs	r6, #0
 800c29e:	42a6      	cmp	r6, r4
 800c2a0:	d105      	bne.n	800c2ae <__libc_init_array+0x2e>
 800c2a2:	bd70      	pop	{r4, r5, r6, pc}
 800c2a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2a8:	4798      	blx	r3
 800c2aa:	3601      	adds	r6, #1
 800c2ac:	e7ee      	b.n	800c28c <__libc_init_array+0xc>
 800c2ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2b2:	4798      	blx	r3
 800c2b4:	3601      	adds	r6, #1
 800c2b6:	e7f2      	b.n	800c29e <__libc_init_array+0x1e>
 800c2b8:	08010308 	.word	0x08010308
 800c2bc:	08010308 	.word	0x08010308
 800c2c0:	08010308 	.word	0x08010308
 800c2c4:	0801030c 	.word	0x0801030c

0800c2c8 <__retarget_lock_init_recursive>:
 800c2c8:	4770      	bx	lr

0800c2ca <__retarget_lock_acquire_recursive>:
 800c2ca:	4770      	bx	lr

0800c2cc <__retarget_lock_release_recursive>:
 800c2cc:	4770      	bx	lr

0800c2ce <memcpy>:
 800c2ce:	440a      	add	r2, r1
 800c2d0:	4291      	cmp	r1, r2
 800c2d2:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2d6:	d100      	bne.n	800c2da <memcpy+0xc>
 800c2d8:	4770      	bx	lr
 800c2da:	b510      	push	{r4, lr}
 800c2dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2e0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2e4:	4291      	cmp	r1, r2
 800c2e6:	d1f9      	bne.n	800c2dc <memcpy+0xe>
 800c2e8:	bd10      	pop	{r4, pc}
 800c2ea:	0000      	movs	r0, r0
 800c2ec:	0000      	movs	r0, r0
	...

0800c2f0 <nan>:
 800c2f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c2f8 <nan+0x8>
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	00000000 	.word	0x00000000
 800c2fc:	7ff80000 	.word	0x7ff80000

0800c300 <nanf>:
 800c300:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c308 <nanf+0x8>
 800c304:	4770      	bx	lr
 800c306:	bf00      	nop
 800c308:	7fc00000 	.word	0x7fc00000

0800c30c <_free_r>:
 800c30c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c30e:	2900      	cmp	r1, #0
 800c310:	d044      	beq.n	800c39c <_free_r+0x90>
 800c312:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c316:	9001      	str	r0, [sp, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	f1a1 0404 	sub.w	r4, r1, #4
 800c31e:	bfb8      	it	lt
 800c320:	18e4      	addlt	r4, r4, r3
 800c322:	f000 fc49 	bl	800cbb8 <__malloc_lock>
 800c326:	4a1e      	ldr	r2, [pc, #120]	; (800c3a0 <_free_r+0x94>)
 800c328:	9801      	ldr	r0, [sp, #4]
 800c32a:	6813      	ldr	r3, [r2, #0]
 800c32c:	b933      	cbnz	r3, 800c33c <_free_r+0x30>
 800c32e:	6063      	str	r3, [r4, #4]
 800c330:	6014      	str	r4, [r2, #0]
 800c332:	b003      	add	sp, #12
 800c334:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c338:	f000 bc44 	b.w	800cbc4 <__malloc_unlock>
 800c33c:	42a3      	cmp	r3, r4
 800c33e:	d908      	bls.n	800c352 <_free_r+0x46>
 800c340:	6825      	ldr	r5, [r4, #0]
 800c342:	1961      	adds	r1, r4, r5
 800c344:	428b      	cmp	r3, r1
 800c346:	bf01      	itttt	eq
 800c348:	6819      	ldreq	r1, [r3, #0]
 800c34a:	685b      	ldreq	r3, [r3, #4]
 800c34c:	1949      	addeq	r1, r1, r5
 800c34e:	6021      	streq	r1, [r4, #0]
 800c350:	e7ed      	b.n	800c32e <_free_r+0x22>
 800c352:	461a      	mov	r2, r3
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	b10b      	cbz	r3, 800c35c <_free_r+0x50>
 800c358:	42a3      	cmp	r3, r4
 800c35a:	d9fa      	bls.n	800c352 <_free_r+0x46>
 800c35c:	6811      	ldr	r1, [r2, #0]
 800c35e:	1855      	adds	r5, r2, r1
 800c360:	42a5      	cmp	r5, r4
 800c362:	d10b      	bne.n	800c37c <_free_r+0x70>
 800c364:	6824      	ldr	r4, [r4, #0]
 800c366:	4421      	add	r1, r4
 800c368:	1854      	adds	r4, r2, r1
 800c36a:	42a3      	cmp	r3, r4
 800c36c:	6011      	str	r1, [r2, #0]
 800c36e:	d1e0      	bne.n	800c332 <_free_r+0x26>
 800c370:	681c      	ldr	r4, [r3, #0]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	6053      	str	r3, [r2, #4]
 800c376:	440c      	add	r4, r1
 800c378:	6014      	str	r4, [r2, #0]
 800c37a:	e7da      	b.n	800c332 <_free_r+0x26>
 800c37c:	d902      	bls.n	800c384 <_free_r+0x78>
 800c37e:	230c      	movs	r3, #12
 800c380:	6003      	str	r3, [r0, #0]
 800c382:	e7d6      	b.n	800c332 <_free_r+0x26>
 800c384:	6825      	ldr	r5, [r4, #0]
 800c386:	1961      	adds	r1, r4, r5
 800c388:	428b      	cmp	r3, r1
 800c38a:	bf04      	itt	eq
 800c38c:	6819      	ldreq	r1, [r3, #0]
 800c38e:	685b      	ldreq	r3, [r3, #4]
 800c390:	6063      	str	r3, [r4, #4]
 800c392:	bf04      	itt	eq
 800c394:	1949      	addeq	r1, r1, r5
 800c396:	6021      	streq	r1, [r4, #0]
 800c398:	6054      	str	r4, [r2, #4]
 800c39a:	e7ca      	b.n	800c332 <_free_r+0x26>
 800c39c:	b003      	add	sp, #12
 800c39e:	bd30      	pop	{r4, r5, pc}
 800c3a0:	20000fb0 	.word	0x20000fb0

0800c3a4 <rshift>:
 800c3a4:	6903      	ldr	r3, [r0, #16]
 800c3a6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3aa:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3ae:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3b2:	f100 0414 	add.w	r4, r0, #20
 800c3b6:	dd45      	ble.n	800c444 <rshift+0xa0>
 800c3b8:	f011 011f 	ands.w	r1, r1, #31
 800c3bc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c3c0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3c4:	d10c      	bne.n	800c3e0 <rshift+0x3c>
 800c3c6:	f100 0710 	add.w	r7, r0, #16
 800c3ca:	4629      	mov	r1, r5
 800c3cc:	42b1      	cmp	r1, r6
 800c3ce:	d334      	bcc.n	800c43a <rshift+0x96>
 800c3d0:	1a9b      	subs	r3, r3, r2
 800c3d2:	009b      	lsls	r3, r3, #2
 800c3d4:	1eea      	subs	r2, r5, #3
 800c3d6:	4296      	cmp	r6, r2
 800c3d8:	bf38      	it	cc
 800c3da:	2300      	movcc	r3, #0
 800c3dc:	4423      	add	r3, r4
 800c3de:	e015      	b.n	800c40c <rshift+0x68>
 800c3e0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c3e4:	f1c1 0820 	rsb	r8, r1, #32
 800c3e8:	40cf      	lsrs	r7, r1
 800c3ea:	f105 0e04 	add.w	lr, r5, #4
 800c3ee:	46a1      	mov	r9, r4
 800c3f0:	4576      	cmp	r6, lr
 800c3f2:	46f4      	mov	ip, lr
 800c3f4:	d815      	bhi.n	800c422 <rshift+0x7e>
 800c3f6:	1a9a      	subs	r2, r3, r2
 800c3f8:	0092      	lsls	r2, r2, #2
 800c3fa:	3a04      	subs	r2, #4
 800c3fc:	3501      	adds	r5, #1
 800c3fe:	42ae      	cmp	r6, r5
 800c400:	bf38      	it	cc
 800c402:	2200      	movcc	r2, #0
 800c404:	18a3      	adds	r3, r4, r2
 800c406:	50a7      	str	r7, [r4, r2]
 800c408:	b107      	cbz	r7, 800c40c <rshift+0x68>
 800c40a:	3304      	adds	r3, #4
 800c40c:	1b1a      	subs	r2, r3, r4
 800c40e:	42a3      	cmp	r3, r4
 800c410:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c414:	bf08      	it	eq
 800c416:	2300      	moveq	r3, #0
 800c418:	6102      	str	r2, [r0, #16]
 800c41a:	bf08      	it	eq
 800c41c:	6143      	streq	r3, [r0, #20]
 800c41e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c422:	f8dc c000 	ldr.w	ip, [ip]
 800c426:	fa0c fc08 	lsl.w	ip, ip, r8
 800c42a:	ea4c 0707 	orr.w	r7, ip, r7
 800c42e:	f849 7b04 	str.w	r7, [r9], #4
 800c432:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c436:	40cf      	lsrs	r7, r1
 800c438:	e7da      	b.n	800c3f0 <rshift+0x4c>
 800c43a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c43e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c442:	e7c3      	b.n	800c3cc <rshift+0x28>
 800c444:	4623      	mov	r3, r4
 800c446:	e7e1      	b.n	800c40c <rshift+0x68>

0800c448 <__hexdig_fun>:
 800c448:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c44c:	2b09      	cmp	r3, #9
 800c44e:	d802      	bhi.n	800c456 <__hexdig_fun+0xe>
 800c450:	3820      	subs	r0, #32
 800c452:	b2c0      	uxtb	r0, r0
 800c454:	4770      	bx	lr
 800c456:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c45a:	2b05      	cmp	r3, #5
 800c45c:	d801      	bhi.n	800c462 <__hexdig_fun+0x1a>
 800c45e:	3847      	subs	r0, #71	; 0x47
 800c460:	e7f7      	b.n	800c452 <__hexdig_fun+0xa>
 800c462:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c466:	2b05      	cmp	r3, #5
 800c468:	d801      	bhi.n	800c46e <__hexdig_fun+0x26>
 800c46a:	3827      	subs	r0, #39	; 0x27
 800c46c:	e7f1      	b.n	800c452 <__hexdig_fun+0xa>
 800c46e:	2000      	movs	r0, #0
 800c470:	4770      	bx	lr
	...

0800c474 <__gethex>:
 800c474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c478:	4617      	mov	r7, r2
 800c47a:	680a      	ldr	r2, [r1, #0]
 800c47c:	b085      	sub	sp, #20
 800c47e:	f102 0b02 	add.w	fp, r2, #2
 800c482:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c486:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c48a:	4681      	mov	r9, r0
 800c48c:	468a      	mov	sl, r1
 800c48e:	9302      	str	r3, [sp, #8]
 800c490:	32fe      	adds	r2, #254	; 0xfe
 800c492:	eb02 030b 	add.w	r3, r2, fp
 800c496:	46d8      	mov	r8, fp
 800c498:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c49c:	9301      	str	r3, [sp, #4]
 800c49e:	2830      	cmp	r0, #48	; 0x30
 800c4a0:	d0f7      	beq.n	800c492 <__gethex+0x1e>
 800c4a2:	f7ff ffd1 	bl	800c448 <__hexdig_fun>
 800c4a6:	4604      	mov	r4, r0
 800c4a8:	2800      	cmp	r0, #0
 800c4aa:	d138      	bne.n	800c51e <__gethex+0xaa>
 800c4ac:	49a7      	ldr	r1, [pc, #668]	; (800c74c <__gethex+0x2d8>)
 800c4ae:	2201      	movs	r2, #1
 800c4b0:	4640      	mov	r0, r8
 800c4b2:	f7ff fe86 	bl	800c1c2 <strncmp>
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d169      	bne.n	800c590 <__gethex+0x11c>
 800c4bc:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c4c0:	465d      	mov	r5, fp
 800c4c2:	f7ff ffc1 	bl	800c448 <__hexdig_fun>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	d064      	beq.n	800c594 <__gethex+0x120>
 800c4ca:	465a      	mov	r2, fp
 800c4cc:	7810      	ldrb	r0, [r2, #0]
 800c4ce:	2830      	cmp	r0, #48	; 0x30
 800c4d0:	4690      	mov	r8, r2
 800c4d2:	f102 0201 	add.w	r2, r2, #1
 800c4d6:	d0f9      	beq.n	800c4cc <__gethex+0x58>
 800c4d8:	f7ff ffb6 	bl	800c448 <__hexdig_fun>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	fab0 f480 	clz	r4, r0
 800c4e2:	0964      	lsrs	r4, r4, #5
 800c4e4:	465e      	mov	r6, fp
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	4642      	mov	r2, r8
 800c4ea:	4615      	mov	r5, r2
 800c4ec:	3201      	adds	r2, #1
 800c4ee:	7828      	ldrb	r0, [r5, #0]
 800c4f0:	f7ff ffaa 	bl	800c448 <__hexdig_fun>
 800c4f4:	2800      	cmp	r0, #0
 800c4f6:	d1f8      	bne.n	800c4ea <__gethex+0x76>
 800c4f8:	4994      	ldr	r1, [pc, #592]	; (800c74c <__gethex+0x2d8>)
 800c4fa:	2201      	movs	r2, #1
 800c4fc:	4628      	mov	r0, r5
 800c4fe:	f7ff fe60 	bl	800c1c2 <strncmp>
 800c502:	b978      	cbnz	r0, 800c524 <__gethex+0xb0>
 800c504:	b946      	cbnz	r6, 800c518 <__gethex+0xa4>
 800c506:	1c6e      	adds	r6, r5, #1
 800c508:	4632      	mov	r2, r6
 800c50a:	4615      	mov	r5, r2
 800c50c:	3201      	adds	r2, #1
 800c50e:	7828      	ldrb	r0, [r5, #0]
 800c510:	f7ff ff9a 	bl	800c448 <__hexdig_fun>
 800c514:	2800      	cmp	r0, #0
 800c516:	d1f8      	bne.n	800c50a <__gethex+0x96>
 800c518:	1b73      	subs	r3, r6, r5
 800c51a:	009e      	lsls	r6, r3, #2
 800c51c:	e004      	b.n	800c528 <__gethex+0xb4>
 800c51e:	2400      	movs	r4, #0
 800c520:	4626      	mov	r6, r4
 800c522:	e7e1      	b.n	800c4e8 <__gethex+0x74>
 800c524:	2e00      	cmp	r6, #0
 800c526:	d1f7      	bne.n	800c518 <__gethex+0xa4>
 800c528:	782b      	ldrb	r3, [r5, #0]
 800c52a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c52e:	2b50      	cmp	r3, #80	; 0x50
 800c530:	d13d      	bne.n	800c5ae <__gethex+0x13a>
 800c532:	786b      	ldrb	r3, [r5, #1]
 800c534:	2b2b      	cmp	r3, #43	; 0x2b
 800c536:	d02f      	beq.n	800c598 <__gethex+0x124>
 800c538:	2b2d      	cmp	r3, #45	; 0x2d
 800c53a:	d031      	beq.n	800c5a0 <__gethex+0x12c>
 800c53c:	1c69      	adds	r1, r5, #1
 800c53e:	f04f 0b00 	mov.w	fp, #0
 800c542:	7808      	ldrb	r0, [r1, #0]
 800c544:	f7ff ff80 	bl	800c448 <__hexdig_fun>
 800c548:	1e42      	subs	r2, r0, #1
 800c54a:	b2d2      	uxtb	r2, r2
 800c54c:	2a18      	cmp	r2, #24
 800c54e:	d82e      	bhi.n	800c5ae <__gethex+0x13a>
 800c550:	f1a0 0210 	sub.w	r2, r0, #16
 800c554:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c558:	f7ff ff76 	bl	800c448 <__hexdig_fun>
 800c55c:	f100 3cff 	add.w	ip, r0, #4294967295
 800c560:	fa5f fc8c 	uxtb.w	ip, ip
 800c564:	f1bc 0f18 	cmp.w	ip, #24
 800c568:	d91d      	bls.n	800c5a6 <__gethex+0x132>
 800c56a:	f1bb 0f00 	cmp.w	fp, #0
 800c56e:	d000      	beq.n	800c572 <__gethex+0xfe>
 800c570:	4252      	negs	r2, r2
 800c572:	4416      	add	r6, r2
 800c574:	f8ca 1000 	str.w	r1, [sl]
 800c578:	b1dc      	cbz	r4, 800c5b2 <__gethex+0x13e>
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	bf14      	ite	ne
 800c580:	f04f 0800 	movne.w	r8, #0
 800c584:	f04f 0806 	moveq.w	r8, #6
 800c588:	4640      	mov	r0, r8
 800c58a:	b005      	add	sp, #20
 800c58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c590:	4645      	mov	r5, r8
 800c592:	4626      	mov	r6, r4
 800c594:	2401      	movs	r4, #1
 800c596:	e7c7      	b.n	800c528 <__gethex+0xb4>
 800c598:	f04f 0b00 	mov.w	fp, #0
 800c59c:	1ca9      	adds	r1, r5, #2
 800c59e:	e7d0      	b.n	800c542 <__gethex+0xce>
 800c5a0:	f04f 0b01 	mov.w	fp, #1
 800c5a4:	e7fa      	b.n	800c59c <__gethex+0x128>
 800c5a6:	230a      	movs	r3, #10
 800c5a8:	fb03 0002 	mla	r0, r3, r2, r0
 800c5ac:	e7d0      	b.n	800c550 <__gethex+0xdc>
 800c5ae:	4629      	mov	r1, r5
 800c5b0:	e7e0      	b.n	800c574 <__gethex+0x100>
 800c5b2:	eba5 0308 	sub.w	r3, r5, r8
 800c5b6:	3b01      	subs	r3, #1
 800c5b8:	4621      	mov	r1, r4
 800c5ba:	2b07      	cmp	r3, #7
 800c5bc:	dc0a      	bgt.n	800c5d4 <__gethex+0x160>
 800c5be:	4648      	mov	r0, r9
 800c5c0:	f000 fb06 	bl	800cbd0 <_Balloc>
 800c5c4:	4604      	mov	r4, r0
 800c5c6:	b940      	cbnz	r0, 800c5da <__gethex+0x166>
 800c5c8:	4b61      	ldr	r3, [pc, #388]	; (800c750 <__gethex+0x2dc>)
 800c5ca:	4602      	mov	r2, r0
 800c5cc:	21e4      	movs	r1, #228	; 0xe4
 800c5ce:	4861      	ldr	r0, [pc, #388]	; (800c754 <__gethex+0x2e0>)
 800c5d0:	f001 fbfe 	bl	800ddd0 <__assert_func>
 800c5d4:	3101      	adds	r1, #1
 800c5d6:	105b      	asrs	r3, r3, #1
 800c5d8:	e7ef      	b.n	800c5ba <__gethex+0x146>
 800c5da:	f100 0a14 	add.w	sl, r0, #20
 800c5de:	2300      	movs	r3, #0
 800c5e0:	495a      	ldr	r1, [pc, #360]	; (800c74c <__gethex+0x2d8>)
 800c5e2:	f8cd a004 	str.w	sl, [sp, #4]
 800c5e6:	469b      	mov	fp, r3
 800c5e8:	45a8      	cmp	r8, r5
 800c5ea:	d342      	bcc.n	800c672 <__gethex+0x1fe>
 800c5ec:	9801      	ldr	r0, [sp, #4]
 800c5ee:	f840 bb04 	str.w	fp, [r0], #4
 800c5f2:	eba0 000a 	sub.w	r0, r0, sl
 800c5f6:	1080      	asrs	r0, r0, #2
 800c5f8:	6120      	str	r0, [r4, #16]
 800c5fa:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c5fe:	4658      	mov	r0, fp
 800c600:	f000 fbd8 	bl	800cdb4 <__hi0bits>
 800c604:	683d      	ldr	r5, [r7, #0]
 800c606:	eba8 0000 	sub.w	r0, r8, r0
 800c60a:	42a8      	cmp	r0, r5
 800c60c:	dd59      	ble.n	800c6c2 <__gethex+0x24e>
 800c60e:	eba0 0805 	sub.w	r8, r0, r5
 800c612:	4641      	mov	r1, r8
 800c614:	4620      	mov	r0, r4
 800c616:	f000 ff67 	bl	800d4e8 <__any_on>
 800c61a:	4683      	mov	fp, r0
 800c61c:	b1b8      	cbz	r0, 800c64e <__gethex+0x1da>
 800c61e:	f108 33ff 	add.w	r3, r8, #4294967295
 800c622:	1159      	asrs	r1, r3, #5
 800c624:	f003 021f 	and.w	r2, r3, #31
 800c628:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c62c:	f04f 0b01 	mov.w	fp, #1
 800c630:	fa0b f202 	lsl.w	r2, fp, r2
 800c634:	420a      	tst	r2, r1
 800c636:	d00a      	beq.n	800c64e <__gethex+0x1da>
 800c638:	455b      	cmp	r3, fp
 800c63a:	dd06      	ble.n	800c64a <__gethex+0x1d6>
 800c63c:	f1a8 0102 	sub.w	r1, r8, #2
 800c640:	4620      	mov	r0, r4
 800c642:	f000 ff51 	bl	800d4e8 <__any_on>
 800c646:	2800      	cmp	r0, #0
 800c648:	d138      	bne.n	800c6bc <__gethex+0x248>
 800c64a:	f04f 0b02 	mov.w	fp, #2
 800c64e:	4641      	mov	r1, r8
 800c650:	4620      	mov	r0, r4
 800c652:	f7ff fea7 	bl	800c3a4 <rshift>
 800c656:	4446      	add	r6, r8
 800c658:	68bb      	ldr	r3, [r7, #8]
 800c65a:	42b3      	cmp	r3, r6
 800c65c:	da41      	bge.n	800c6e2 <__gethex+0x26e>
 800c65e:	4621      	mov	r1, r4
 800c660:	4648      	mov	r0, r9
 800c662:	f000 faf5 	bl	800cc50 <_Bfree>
 800c666:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c668:	2300      	movs	r3, #0
 800c66a:	6013      	str	r3, [r2, #0]
 800c66c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c670:	e78a      	b.n	800c588 <__gethex+0x114>
 800c672:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c676:	2a2e      	cmp	r2, #46	; 0x2e
 800c678:	d014      	beq.n	800c6a4 <__gethex+0x230>
 800c67a:	2b20      	cmp	r3, #32
 800c67c:	d106      	bne.n	800c68c <__gethex+0x218>
 800c67e:	9b01      	ldr	r3, [sp, #4]
 800c680:	f843 bb04 	str.w	fp, [r3], #4
 800c684:	f04f 0b00 	mov.w	fp, #0
 800c688:	9301      	str	r3, [sp, #4]
 800c68a:	465b      	mov	r3, fp
 800c68c:	7828      	ldrb	r0, [r5, #0]
 800c68e:	9303      	str	r3, [sp, #12]
 800c690:	f7ff feda 	bl	800c448 <__hexdig_fun>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	f000 000f 	and.w	r0, r0, #15
 800c69a:	4098      	lsls	r0, r3
 800c69c:	ea4b 0b00 	orr.w	fp, fp, r0
 800c6a0:	3304      	adds	r3, #4
 800c6a2:	e7a1      	b.n	800c5e8 <__gethex+0x174>
 800c6a4:	45a8      	cmp	r8, r5
 800c6a6:	d8e8      	bhi.n	800c67a <__gethex+0x206>
 800c6a8:	2201      	movs	r2, #1
 800c6aa:	4628      	mov	r0, r5
 800c6ac:	9303      	str	r3, [sp, #12]
 800c6ae:	f7ff fd88 	bl	800c1c2 <strncmp>
 800c6b2:	4926      	ldr	r1, [pc, #152]	; (800c74c <__gethex+0x2d8>)
 800c6b4:	9b03      	ldr	r3, [sp, #12]
 800c6b6:	2800      	cmp	r0, #0
 800c6b8:	d1df      	bne.n	800c67a <__gethex+0x206>
 800c6ba:	e795      	b.n	800c5e8 <__gethex+0x174>
 800c6bc:	f04f 0b03 	mov.w	fp, #3
 800c6c0:	e7c5      	b.n	800c64e <__gethex+0x1da>
 800c6c2:	da0b      	bge.n	800c6dc <__gethex+0x268>
 800c6c4:	eba5 0800 	sub.w	r8, r5, r0
 800c6c8:	4621      	mov	r1, r4
 800c6ca:	4642      	mov	r2, r8
 800c6cc:	4648      	mov	r0, r9
 800c6ce:	f000 fcd9 	bl	800d084 <__lshift>
 800c6d2:	eba6 0608 	sub.w	r6, r6, r8
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	f100 0a14 	add.w	sl, r0, #20
 800c6dc:	f04f 0b00 	mov.w	fp, #0
 800c6e0:	e7ba      	b.n	800c658 <__gethex+0x1e4>
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	42b3      	cmp	r3, r6
 800c6e6:	dd73      	ble.n	800c7d0 <__gethex+0x35c>
 800c6e8:	1b9e      	subs	r6, r3, r6
 800c6ea:	42b5      	cmp	r5, r6
 800c6ec:	dc34      	bgt.n	800c758 <__gethex+0x2e4>
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	2b02      	cmp	r3, #2
 800c6f2:	d023      	beq.n	800c73c <__gethex+0x2c8>
 800c6f4:	2b03      	cmp	r3, #3
 800c6f6:	d025      	beq.n	800c744 <__gethex+0x2d0>
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d115      	bne.n	800c728 <__gethex+0x2b4>
 800c6fc:	42b5      	cmp	r5, r6
 800c6fe:	d113      	bne.n	800c728 <__gethex+0x2b4>
 800c700:	2d01      	cmp	r5, #1
 800c702:	d10b      	bne.n	800c71c <__gethex+0x2a8>
 800c704:	9a02      	ldr	r2, [sp, #8]
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6013      	str	r3, [r2, #0]
 800c70a:	2301      	movs	r3, #1
 800c70c:	6123      	str	r3, [r4, #16]
 800c70e:	f8ca 3000 	str.w	r3, [sl]
 800c712:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c714:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c718:	601c      	str	r4, [r3, #0]
 800c71a:	e735      	b.n	800c588 <__gethex+0x114>
 800c71c:	1e69      	subs	r1, r5, #1
 800c71e:	4620      	mov	r0, r4
 800c720:	f000 fee2 	bl	800d4e8 <__any_on>
 800c724:	2800      	cmp	r0, #0
 800c726:	d1ed      	bne.n	800c704 <__gethex+0x290>
 800c728:	4621      	mov	r1, r4
 800c72a:	4648      	mov	r0, r9
 800c72c:	f000 fa90 	bl	800cc50 <_Bfree>
 800c730:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c732:	2300      	movs	r3, #0
 800c734:	6013      	str	r3, [r2, #0]
 800c736:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c73a:	e725      	b.n	800c588 <__gethex+0x114>
 800c73c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d1f2      	bne.n	800c728 <__gethex+0x2b4>
 800c742:	e7df      	b.n	800c704 <__gethex+0x290>
 800c744:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1dc      	bne.n	800c704 <__gethex+0x290>
 800c74a:	e7ed      	b.n	800c728 <__gethex+0x2b4>
 800c74c:	0800fef4 	.word	0x0800fef4
 800c750:	08010066 	.word	0x08010066
 800c754:	08010077 	.word	0x08010077
 800c758:	f106 38ff 	add.w	r8, r6, #4294967295
 800c75c:	f1bb 0f00 	cmp.w	fp, #0
 800c760:	d133      	bne.n	800c7ca <__gethex+0x356>
 800c762:	f1b8 0f00 	cmp.w	r8, #0
 800c766:	d004      	beq.n	800c772 <__gethex+0x2fe>
 800c768:	4641      	mov	r1, r8
 800c76a:	4620      	mov	r0, r4
 800c76c:	f000 febc 	bl	800d4e8 <__any_on>
 800c770:	4683      	mov	fp, r0
 800c772:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c776:	2301      	movs	r3, #1
 800c778:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c77c:	f008 081f 	and.w	r8, r8, #31
 800c780:	fa03 f308 	lsl.w	r3, r3, r8
 800c784:	4213      	tst	r3, r2
 800c786:	4631      	mov	r1, r6
 800c788:	4620      	mov	r0, r4
 800c78a:	bf18      	it	ne
 800c78c:	f04b 0b02 	orrne.w	fp, fp, #2
 800c790:	1bad      	subs	r5, r5, r6
 800c792:	f7ff fe07 	bl	800c3a4 <rshift>
 800c796:	687e      	ldr	r6, [r7, #4]
 800c798:	f04f 0802 	mov.w	r8, #2
 800c79c:	f1bb 0f00 	cmp.w	fp, #0
 800c7a0:	d04a      	beq.n	800c838 <__gethex+0x3c4>
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d016      	beq.n	800c7d6 <__gethex+0x362>
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d018      	beq.n	800c7de <__gethex+0x36a>
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d109      	bne.n	800c7c4 <__gethex+0x350>
 800c7b0:	f01b 0f02 	tst.w	fp, #2
 800c7b4:	d006      	beq.n	800c7c4 <__gethex+0x350>
 800c7b6:	f8da 3000 	ldr.w	r3, [sl]
 800c7ba:	ea4b 0b03 	orr.w	fp, fp, r3
 800c7be:	f01b 0f01 	tst.w	fp, #1
 800c7c2:	d10f      	bne.n	800c7e4 <__gethex+0x370>
 800c7c4:	f048 0810 	orr.w	r8, r8, #16
 800c7c8:	e036      	b.n	800c838 <__gethex+0x3c4>
 800c7ca:	f04f 0b01 	mov.w	fp, #1
 800c7ce:	e7d0      	b.n	800c772 <__gethex+0x2fe>
 800c7d0:	f04f 0801 	mov.w	r8, #1
 800c7d4:	e7e2      	b.n	800c79c <__gethex+0x328>
 800c7d6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7d8:	f1c3 0301 	rsb	r3, r3, #1
 800c7dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c7de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7e0:	2b00      	cmp	r3, #0
 800c7e2:	d0ef      	beq.n	800c7c4 <__gethex+0x350>
 800c7e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c7e8:	f104 0214 	add.w	r2, r4, #20
 800c7ec:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c7f0:	9301      	str	r3, [sp, #4]
 800c7f2:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	4694      	mov	ip, r2
 800c7fa:	f852 1b04 	ldr.w	r1, [r2], #4
 800c7fe:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c802:	d01e      	beq.n	800c842 <__gethex+0x3ce>
 800c804:	3101      	adds	r1, #1
 800c806:	f8cc 1000 	str.w	r1, [ip]
 800c80a:	f1b8 0f02 	cmp.w	r8, #2
 800c80e:	f104 0214 	add.w	r2, r4, #20
 800c812:	d13d      	bne.n	800c890 <__gethex+0x41c>
 800c814:	683b      	ldr	r3, [r7, #0]
 800c816:	3b01      	subs	r3, #1
 800c818:	42ab      	cmp	r3, r5
 800c81a:	d10b      	bne.n	800c834 <__gethex+0x3c0>
 800c81c:	1169      	asrs	r1, r5, #5
 800c81e:	2301      	movs	r3, #1
 800c820:	f005 051f 	and.w	r5, r5, #31
 800c824:	fa03 f505 	lsl.w	r5, r3, r5
 800c828:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c82c:	421d      	tst	r5, r3
 800c82e:	bf18      	it	ne
 800c830:	f04f 0801 	movne.w	r8, #1
 800c834:	f048 0820 	orr.w	r8, r8, #32
 800c838:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c83a:	601c      	str	r4, [r3, #0]
 800c83c:	9b02      	ldr	r3, [sp, #8]
 800c83e:	601e      	str	r6, [r3, #0]
 800c840:	e6a2      	b.n	800c588 <__gethex+0x114>
 800c842:	4290      	cmp	r0, r2
 800c844:	f842 3c04 	str.w	r3, [r2, #-4]
 800c848:	d8d6      	bhi.n	800c7f8 <__gethex+0x384>
 800c84a:	68a2      	ldr	r2, [r4, #8]
 800c84c:	4593      	cmp	fp, r2
 800c84e:	db17      	blt.n	800c880 <__gethex+0x40c>
 800c850:	6861      	ldr	r1, [r4, #4]
 800c852:	4648      	mov	r0, r9
 800c854:	3101      	adds	r1, #1
 800c856:	f000 f9bb 	bl	800cbd0 <_Balloc>
 800c85a:	4682      	mov	sl, r0
 800c85c:	b918      	cbnz	r0, 800c866 <__gethex+0x3f2>
 800c85e:	4b1b      	ldr	r3, [pc, #108]	; (800c8cc <__gethex+0x458>)
 800c860:	4602      	mov	r2, r0
 800c862:	2184      	movs	r1, #132	; 0x84
 800c864:	e6b3      	b.n	800c5ce <__gethex+0x15a>
 800c866:	6922      	ldr	r2, [r4, #16]
 800c868:	3202      	adds	r2, #2
 800c86a:	f104 010c 	add.w	r1, r4, #12
 800c86e:	0092      	lsls	r2, r2, #2
 800c870:	300c      	adds	r0, #12
 800c872:	f7ff fd2c 	bl	800c2ce <memcpy>
 800c876:	4621      	mov	r1, r4
 800c878:	4648      	mov	r0, r9
 800c87a:	f000 f9e9 	bl	800cc50 <_Bfree>
 800c87e:	4654      	mov	r4, sl
 800c880:	6922      	ldr	r2, [r4, #16]
 800c882:	1c51      	adds	r1, r2, #1
 800c884:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c888:	6121      	str	r1, [r4, #16]
 800c88a:	2101      	movs	r1, #1
 800c88c:	6151      	str	r1, [r2, #20]
 800c88e:	e7bc      	b.n	800c80a <__gethex+0x396>
 800c890:	6921      	ldr	r1, [r4, #16]
 800c892:	4559      	cmp	r1, fp
 800c894:	dd0b      	ble.n	800c8ae <__gethex+0x43a>
 800c896:	2101      	movs	r1, #1
 800c898:	4620      	mov	r0, r4
 800c89a:	f7ff fd83 	bl	800c3a4 <rshift>
 800c89e:	68bb      	ldr	r3, [r7, #8]
 800c8a0:	3601      	adds	r6, #1
 800c8a2:	42b3      	cmp	r3, r6
 800c8a4:	f6ff aedb 	blt.w	800c65e <__gethex+0x1ea>
 800c8a8:	f04f 0801 	mov.w	r8, #1
 800c8ac:	e7c2      	b.n	800c834 <__gethex+0x3c0>
 800c8ae:	f015 051f 	ands.w	r5, r5, #31
 800c8b2:	d0f9      	beq.n	800c8a8 <__gethex+0x434>
 800c8b4:	9b01      	ldr	r3, [sp, #4]
 800c8b6:	441a      	add	r2, r3
 800c8b8:	f1c5 0520 	rsb	r5, r5, #32
 800c8bc:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c8c0:	f000 fa78 	bl	800cdb4 <__hi0bits>
 800c8c4:	42a8      	cmp	r0, r5
 800c8c6:	dbe6      	blt.n	800c896 <__gethex+0x422>
 800c8c8:	e7ee      	b.n	800c8a8 <__gethex+0x434>
 800c8ca:	bf00      	nop
 800c8cc:	08010066 	.word	0x08010066

0800c8d0 <L_shift>:
 800c8d0:	f1c2 0208 	rsb	r2, r2, #8
 800c8d4:	0092      	lsls	r2, r2, #2
 800c8d6:	b570      	push	{r4, r5, r6, lr}
 800c8d8:	f1c2 0620 	rsb	r6, r2, #32
 800c8dc:	6843      	ldr	r3, [r0, #4]
 800c8de:	6804      	ldr	r4, [r0, #0]
 800c8e0:	fa03 f506 	lsl.w	r5, r3, r6
 800c8e4:	432c      	orrs	r4, r5
 800c8e6:	40d3      	lsrs	r3, r2
 800c8e8:	6004      	str	r4, [r0, #0]
 800c8ea:	f840 3f04 	str.w	r3, [r0, #4]!
 800c8ee:	4288      	cmp	r0, r1
 800c8f0:	d3f4      	bcc.n	800c8dc <L_shift+0xc>
 800c8f2:	bd70      	pop	{r4, r5, r6, pc}

0800c8f4 <__match>:
 800c8f4:	b530      	push	{r4, r5, lr}
 800c8f6:	6803      	ldr	r3, [r0, #0]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c8fe:	b914      	cbnz	r4, 800c906 <__match+0x12>
 800c900:	6003      	str	r3, [r0, #0]
 800c902:	2001      	movs	r0, #1
 800c904:	bd30      	pop	{r4, r5, pc}
 800c906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c90a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c90e:	2d19      	cmp	r5, #25
 800c910:	bf98      	it	ls
 800c912:	3220      	addls	r2, #32
 800c914:	42a2      	cmp	r2, r4
 800c916:	d0f0      	beq.n	800c8fa <__match+0x6>
 800c918:	2000      	movs	r0, #0
 800c91a:	e7f3      	b.n	800c904 <__match+0x10>

0800c91c <__hexnan>:
 800c91c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c920:	680b      	ldr	r3, [r1, #0]
 800c922:	6801      	ldr	r1, [r0, #0]
 800c924:	115e      	asrs	r6, r3, #5
 800c926:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c92a:	f013 031f 	ands.w	r3, r3, #31
 800c92e:	b087      	sub	sp, #28
 800c930:	bf18      	it	ne
 800c932:	3604      	addne	r6, #4
 800c934:	2500      	movs	r5, #0
 800c936:	1f37      	subs	r7, r6, #4
 800c938:	4682      	mov	sl, r0
 800c93a:	4690      	mov	r8, r2
 800c93c:	9301      	str	r3, [sp, #4]
 800c93e:	f846 5c04 	str.w	r5, [r6, #-4]
 800c942:	46b9      	mov	r9, r7
 800c944:	463c      	mov	r4, r7
 800c946:	9502      	str	r5, [sp, #8]
 800c948:	46ab      	mov	fp, r5
 800c94a:	784a      	ldrb	r2, [r1, #1]
 800c94c:	1c4b      	adds	r3, r1, #1
 800c94e:	9303      	str	r3, [sp, #12]
 800c950:	b342      	cbz	r2, 800c9a4 <__hexnan+0x88>
 800c952:	4610      	mov	r0, r2
 800c954:	9105      	str	r1, [sp, #20]
 800c956:	9204      	str	r2, [sp, #16]
 800c958:	f7ff fd76 	bl	800c448 <__hexdig_fun>
 800c95c:	2800      	cmp	r0, #0
 800c95e:	d14f      	bne.n	800ca00 <__hexnan+0xe4>
 800c960:	9a04      	ldr	r2, [sp, #16]
 800c962:	9905      	ldr	r1, [sp, #20]
 800c964:	2a20      	cmp	r2, #32
 800c966:	d818      	bhi.n	800c99a <__hexnan+0x7e>
 800c968:	9b02      	ldr	r3, [sp, #8]
 800c96a:	459b      	cmp	fp, r3
 800c96c:	dd13      	ble.n	800c996 <__hexnan+0x7a>
 800c96e:	454c      	cmp	r4, r9
 800c970:	d206      	bcs.n	800c980 <__hexnan+0x64>
 800c972:	2d07      	cmp	r5, #7
 800c974:	dc04      	bgt.n	800c980 <__hexnan+0x64>
 800c976:	462a      	mov	r2, r5
 800c978:	4649      	mov	r1, r9
 800c97a:	4620      	mov	r0, r4
 800c97c:	f7ff ffa8 	bl	800c8d0 <L_shift>
 800c980:	4544      	cmp	r4, r8
 800c982:	d950      	bls.n	800ca26 <__hexnan+0x10a>
 800c984:	2300      	movs	r3, #0
 800c986:	f1a4 0904 	sub.w	r9, r4, #4
 800c98a:	f844 3c04 	str.w	r3, [r4, #-4]
 800c98e:	f8cd b008 	str.w	fp, [sp, #8]
 800c992:	464c      	mov	r4, r9
 800c994:	461d      	mov	r5, r3
 800c996:	9903      	ldr	r1, [sp, #12]
 800c998:	e7d7      	b.n	800c94a <__hexnan+0x2e>
 800c99a:	2a29      	cmp	r2, #41	; 0x29
 800c99c:	d155      	bne.n	800ca4a <__hexnan+0x12e>
 800c99e:	3102      	adds	r1, #2
 800c9a0:	f8ca 1000 	str.w	r1, [sl]
 800c9a4:	f1bb 0f00 	cmp.w	fp, #0
 800c9a8:	d04f      	beq.n	800ca4a <__hexnan+0x12e>
 800c9aa:	454c      	cmp	r4, r9
 800c9ac:	d206      	bcs.n	800c9bc <__hexnan+0xa0>
 800c9ae:	2d07      	cmp	r5, #7
 800c9b0:	dc04      	bgt.n	800c9bc <__hexnan+0xa0>
 800c9b2:	462a      	mov	r2, r5
 800c9b4:	4649      	mov	r1, r9
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	f7ff ff8a 	bl	800c8d0 <L_shift>
 800c9bc:	4544      	cmp	r4, r8
 800c9be:	d934      	bls.n	800ca2a <__hexnan+0x10e>
 800c9c0:	f1a8 0204 	sub.w	r2, r8, #4
 800c9c4:	4623      	mov	r3, r4
 800c9c6:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9ca:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9ce:	429f      	cmp	r7, r3
 800c9d0:	d2f9      	bcs.n	800c9c6 <__hexnan+0xaa>
 800c9d2:	1b3b      	subs	r3, r7, r4
 800c9d4:	f023 0303 	bic.w	r3, r3, #3
 800c9d8:	3304      	adds	r3, #4
 800c9da:	3e03      	subs	r6, #3
 800c9dc:	3401      	adds	r4, #1
 800c9de:	42a6      	cmp	r6, r4
 800c9e0:	bf38      	it	cc
 800c9e2:	2304      	movcc	r3, #4
 800c9e4:	4443      	add	r3, r8
 800c9e6:	2200      	movs	r2, #0
 800c9e8:	f843 2b04 	str.w	r2, [r3], #4
 800c9ec:	429f      	cmp	r7, r3
 800c9ee:	d2fb      	bcs.n	800c9e8 <__hexnan+0xcc>
 800c9f0:	683b      	ldr	r3, [r7, #0]
 800c9f2:	b91b      	cbnz	r3, 800c9fc <__hexnan+0xe0>
 800c9f4:	4547      	cmp	r7, r8
 800c9f6:	d126      	bne.n	800ca46 <__hexnan+0x12a>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	603b      	str	r3, [r7, #0]
 800c9fc:	2005      	movs	r0, #5
 800c9fe:	e025      	b.n	800ca4c <__hexnan+0x130>
 800ca00:	3501      	adds	r5, #1
 800ca02:	2d08      	cmp	r5, #8
 800ca04:	f10b 0b01 	add.w	fp, fp, #1
 800ca08:	dd06      	ble.n	800ca18 <__hexnan+0xfc>
 800ca0a:	4544      	cmp	r4, r8
 800ca0c:	d9c3      	bls.n	800c996 <__hexnan+0x7a>
 800ca0e:	2300      	movs	r3, #0
 800ca10:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca14:	2501      	movs	r5, #1
 800ca16:	3c04      	subs	r4, #4
 800ca18:	6822      	ldr	r2, [r4, #0]
 800ca1a:	f000 000f 	and.w	r0, r0, #15
 800ca1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca22:	6020      	str	r0, [r4, #0]
 800ca24:	e7b7      	b.n	800c996 <__hexnan+0x7a>
 800ca26:	2508      	movs	r5, #8
 800ca28:	e7b5      	b.n	800c996 <__hexnan+0x7a>
 800ca2a:	9b01      	ldr	r3, [sp, #4]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d0df      	beq.n	800c9f0 <__hexnan+0xd4>
 800ca30:	f1c3 0320 	rsb	r3, r3, #32
 800ca34:	f04f 32ff 	mov.w	r2, #4294967295
 800ca38:	40da      	lsrs	r2, r3
 800ca3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca3e:	4013      	ands	r3, r2
 800ca40:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca44:	e7d4      	b.n	800c9f0 <__hexnan+0xd4>
 800ca46:	3f04      	subs	r7, #4
 800ca48:	e7d2      	b.n	800c9f0 <__hexnan+0xd4>
 800ca4a:	2004      	movs	r0, #4
 800ca4c:	b007      	add	sp, #28
 800ca4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800ca54 <sbrk_aligned>:
 800ca54:	b570      	push	{r4, r5, r6, lr}
 800ca56:	4e0e      	ldr	r6, [pc, #56]	; (800ca90 <sbrk_aligned+0x3c>)
 800ca58:	460c      	mov	r4, r1
 800ca5a:	6831      	ldr	r1, [r6, #0]
 800ca5c:	4605      	mov	r5, r0
 800ca5e:	b911      	cbnz	r1, 800ca66 <sbrk_aligned+0x12>
 800ca60:	f001 f9a6 	bl	800ddb0 <_sbrk_r>
 800ca64:	6030      	str	r0, [r6, #0]
 800ca66:	4621      	mov	r1, r4
 800ca68:	4628      	mov	r0, r5
 800ca6a:	f001 f9a1 	bl	800ddb0 <_sbrk_r>
 800ca6e:	1c43      	adds	r3, r0, #1
 800ca70:	d00a      	beq.n	800ca88 <sbrk_aligned+0x34>
 800ca72:	1cc4      	adds	r4, r0, #3
 800ca74:	f024 0403 	bic.w	r4, r4, #3
 800ca78:	42a0      	cmp	r0, r4
 800ca7a:	d007      	beq.n	800ca8c <sbrk_aligned+0x38>
 800ca7c:	1a21      	subs	r1, r4, r0
 800ca7e:	4628      	mov	r0, r5
 800ca80:	f001 f996 	bl	800ddb0 <_sbrk_r>
 800ca84:	3001      	adds	r0, #1
 800ca86:	d101      	bne.n	800ca8c <sbrk_aligned+0x38>
 800ca88:	f04f 34ff 	mov.w	r4, #4294967295
 800ca8c:	4620      	mov	r0, r4
 800ca8e:	bd70      	pop	{r4, r5, r6, pc}
 800ca90:	20000fb4 	.word	0x20000fb4

0800ca94 <_malloc_r>:
 800ca94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca98:	1ccd      	adds	r5, r1, #3
 800ca9a:	f025 0503 	bic.w	r5, r5, #3
 800ca9e:	3508      	adds	r5, #8
 800caa0:	2d0c      	cmp	r5, #12
 800caa2:	bf38      	it	cc
 800caa4:	250c      	movcc	r5, #12
 800caa6:	2d00      	cmp	r5, #0
 800caa8:	4607      	mov	r7, r0
 800caaa:	db01      	blt.n	800cab0 <_malloc_r+0x1c>
 800caac:	42a9      	cmp	r1, r5
 800caae:	d905      	bls.n	800cabc <_malloc_r+0x28>
 800cab0:	230c      	movs	r3, #12
 800cab2:	603b      	str	r3, [r7, #0]
 800cab4:	2600      	movs	r6, #0
 800cab6:	4630      	mov	r0, r6
 800cab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cabc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb90 <_malloc_r+0xfc>
 800cac0:	f000 f87a 	bl	800cbb8 <__malloc_lock>
 800cac4:	f8d8 3000 	ldr.w	r3, [r8]
 800cac8:	461c      	mov	r4, r3
 800caca:	bb5c      	cbnz	r4, 800cb24 <_malloc_r+0x90>
 800cacc:	4629      	mov	r1, r5
 800cace:	4638      	mov	r0, r7
 800cad0:	f7ff ffc0 	bl	800ca54 <sbrk_aligned>
 800cad4:	1c43      	adds	r3, r0, #1
 800cad6:	4604      	mov	r4, r0
 800cad8:	d155      	bne.n	800cb86 <_malloc_r+0xf2>
 800cada:	f8d8 4000 	ldr.w	r4, [r8]
 800cade:	4626      	mov	r6, r4
 800cae0:	2e00      	cmp	r6, #0
 800cae2:	d145      	bne.n	800cb70 <_malloc_r+0xdc>
 800cae4:	2c00      	cmp	r4, #0
 800cae6:	d048      	beq.n	800cb7a <_malloc_r+0xe6>
 800cae8:	6823      	ldr	r3, [r4, #0]
 800caea:	4631      	mov	r1, r6
 800caec:	4638      	mov	r0, r7
 800caee:	eb04 0903 	add.w	r9, r4, r3
 800caf2:	f001 f95d 	bl	800ddb0 <_sbrk_r>
 800caf6:	4581      	cmp	r9, r0
 800caf8:	d13f      	bne.n	800cb7a <_malloc_r+0xe6>
 800cafa:	6821      	ldr	r1, [r4, #0]
 800cafc:	1a6d      	subs	r5, r5, r1
 800cafe:	4629      	mov	r1, r5
 800cb00:	4638      	mov	r0, r7
 800cb02:	f7ff ffa7 	bl	800ca54 <sbrk_aligned>
 800cb06:	3001      	adds	r0, #1
 800cb08:	d037      	beq.n	800cb7a <_malloc_r+0xe6>
 800cb0a:	6823      	ldr	r3, [r4, #0]
 800cb0c:	442b      	add	r3, r5
 800cb0e:	6023      	str	r3, [r4, #0]
 800cb10:	f8d8 3000 	ldr.w	r3, [r8]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d038      	beq.n	800cb8a <_malloc_r+0xf6>
 800cb18:	685a      	ldr	r2, [r3, #4]
 800cb1a:	42a2      	cmp	r2, r4
 800cb1c:	d12b      	bne.n	800cb76 <_malloc_r+0xe2>
 800cb1e:	2200      	movs	r2, #0
 800cb20:	605a      	str	r2, [r3, #4]
 800cb22:	e00f      	b.n	800cb44 <_malloc_r+0xb0>
 800cb24:	6822      	ldr	r2, [r4, #0]
 800cb26:	1b52      	subs	r2, r2, r5
 800cb28:	d41f      	bmi.n	800cb6a <_malloc_r+0xd6>
 800cb2a:	2a0b      	cmp	r2, #11
 800cb2c:	d917      	bls.n	800cb5e <_malloc_r+0xca>
 800cb2e:	1961      	adds	r1, r4, r5
 800cb30:	42a3      	cmp	r3, r4
 800cb32:	6025      	str	r5, [r4, #0]
 800cb34:	bf18      	it	ne
 800cb36:	6059      	strne	r1, [r3, #4]
 800cb38:	6863      	ldr	r3, [r4, #4]
 800cb3a:	bf08      	it	eq
 800cb3c:	f8c8 1000 	streq.w	r1, [r8]
 800cb40:	5162      	str	r2, [r4, r5]
 800cb42:	604b      	str	r3, [r1, #4]
 800cb44:	4638      	mov	r0, r7
 800cb46:	f104 060b 	add.w	r6, r4, #11
 800cb4a:	f000 f83b 	bl	800cbc4 <__malloc_unlock>
 800cb4e:	f026 0607 	bic.w	r6, r6, #7
 800cb52:	1d23      	adds	r3, r4, #4
 800cb54:	1af2      	subs	r2, r6, r3
 800cb56:	d0ae      	beq.n	800cab6 <_malloc_r+0x22>
 800cb58:	1b9b      	subs	r3, r3, r6
 800cb5a:	50a3      	str	r3, [r4, r2]
 800cb5c:	e7ab      	b.n	800cab6 <_malloc_r+0x22>
 800cb5e:	42a3      	cmp	r3, r4
 800cb60:	6862      	ldr	r2, [r4, #4]
 800cb62:	d1dd      	bne.n	800cb20 <_malloc_r+0x8c>
 800cb64:	f8c8 2000 	str.w	r2, [r8]
 800cb68:	e7ec      	b.n	800cb44 <_malloc_r+0xb0>
 800cb6a:	4623      	mov	r3, r4
 800cb6c:	6864      	ldr	r4, [r4, #4]
 800cb6e:	e7ac      	b.n	800caca <_malloc_r+0x36>
 800cb70:	4634      	mov	r4, r6
 800cb72:	6876      	ldr	r6, [r6, #4]
 800cb74:	e7b4      	b.n	800cae0 <_malloc_r+0x4c>
 800cb76:	4613      	mov	r3, r2
 800cb78:	e7cc      	b.n	800cb14 <_malloc_r+0x80>
 800cb7a:	230c      	movs	r3, #12
 800cb7c:	603b      	str	r3, [r7, #0]
 800cb7e:	4638      	mov	r0, r7
 800cb80:	f000 f820 	bl	800cbc4 <__malloc_unlock>
 800cb84:	e797      	b.n	800cab6 <_malloc_r+0x22>
 800cb86:	6025      	str	r5, [r4, #0]
 800cb88:	e7dc      	b.n	800cb44 <_malloc_r+0xb0>
 800cb8a:	605b      	str	r3, [r3, #4]
 800cb8c:	deff      	udf	#255	; 0xff
 800cb8e:	bf00      	nop
 800cb90:	20000fb0 	.word	0x20000fb0

0800cb94 <__ascii_mbtowc>:
 800cb94:	b082      	sub	sp, #8
 800cb96:	b901      	cbnz	r1, 800cb9a <__ascii_mbtowc+0x6>
 800cb98:	a901      	add	r1, sp, #4
 800cb9a:	b142      	cbz	r2, 800cbae <__ascii_mbtowc+0x1a>
 800cb9c:	b14b      	cbz	r3, 800cbb2 <__ascii_mbtowc+0x1e>
 800cb9e:	7813      	ldrb	r3, [r2, #0]
 800cba0:	600b      	str	r3, [r1, #0]
 800cba2:	7812      	ldrb	r2, [r2, #0]
 800cba4:	1e10      	subs	r0, r2, #0
 800cba6:	bf18      	it	ne
 800cba8:	2001      	movne	r0, #1
 800cbaa:	b002      	add	sp, #8
 800cbac:	4770      	bx	lr
 800cbae:	4610      	mov	r0, r2
 800cbb0:	e7fb      	b.n	800cbaa <__ascii_mbtowc+0x16>
 800cbb2:	f06f 0001 	mvn.w	r0, #1
 800cbb6:	e7f8      	b.n	800cbaa <__ascii_mbtowc+0x16>

0800cbb8 <__malloc_lock>:
 800cbb8:	4801      	ldr	r0, [pc, #4]	; (800cbc0 <__malloc_lock+0x8>)
 800cbba:	f7ff bb86 	b.w	800c2ca <__retarget_lock_acquire_recursive>
 800cbbe:	bf00      	nop
 800cbc0:	20000fac 	.word	0x20000fac

0800cbc4 <__malloc_unlock>:
 800cbc4:	4801      	ldr	r0, [pc, #4]	; (800cbcc <__malloc_unlock+0x8>)
 800cbc6:	f7ff bb81 	b.w	800c2cc <__retarget_lock_release_recursive>
 800cbca:	bf00      	nop
 800cbcc:	20000fac 	.word	0x20000fac

0800cbd0 <_Balloc>:
 800cbd0:	b570      	push	{r4, r5, r6, lr}
 800cbd2:	69c6      	ldr	r6, [r0, #28]
 800cbd4:	4604      	mov	r4, r0
 800cbd6:	460d      	mov	r5, r1
 800cbd8:	b976      	cbnz	r6, 800cbf8 <_Balloc+0x28>
 800cbda:	2010      	movs	r0, #16
 800cbdc:	f001 f92c 	bl	800de38 <malloc>
 800cbe0:	4602      	mov	r2, r0
 800cbe2:	61e0      	str	r0, [r4, #28]
 800cbe4:	b920      	cbnz	r0, 800cbf0 <_Balloc+0x20>
 800cbe6:	4b18      	ldr	r3, [pc, #96]	; (800cc48 <_Balloc+0x78>)
 800cbe8:	4818      	ldr	r0, [pc, #96]	; (800cc4c <_Balloc+0x7c>)
 800cbea:	216b      	movs	r1, #107	; 0x6b
 800cbec:	f001 f8f0 	bl	800ddd0 <__assert_func>
 800cbf0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbf4:	6006      	str	r6, [r0, #0]
 800cbf6:	60c6      	str	r6, [r0, #12]
 800cbf8:	69e6      	ldr	r6, [r4, #28]
 800cbfa:	68f3      	ldr	r3, [r6, #12]
 800cbfc:	b183      	cbz	r3, 800cc20 <_Balloc+0x50>
 800cbfe:	69e3      	ldr	r3, [r4, #28]
 800cc00:	68db      	ldr	r3, [r3, #12]
 800cc02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cc06:	b9b8      	cbnz	r0, 800cc38 <_Balloc+0x68>
 800cc08:	2101      	movs	r1, #1
 800cc0a:	fa01 f605 	lsl.w	r6, r1, r5
 800cc0e:	1d72      	adds	r2, r6, #5
 800cc10:	0092      	lsls	r2, r2, #2
 800cc12:	4620      	mov	r0, r4
 800cc14:	f001 f8fa 	bl	800de0c <_calloc_r>
 800cc18:	b160      	cbz	r0, 800cc34 <_Balloc+0x64>
 800cc1a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cc1e:	e00e      	b.n	800cc3e <_Balloc+0x6e>
 800cc20:	2221      	movs	r2, #33	; 0x21
 800cc22:	2104      	movs	r1, #4
 800cc24:	4620      	mov	r0, r4
 800cc26:	f001 f8f1 	bl	800de0c <_calloc_r>
 800cc2a:	69e3      	ldr	r3, [r4, #28]
 800cc2c:	60f0      	str	r0, [r6, #12]
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d1e4      	bne.n	800cbfe <_Balloc+0x2e>
 800cc34:	2000      	movs	r0, #0
 800cc36:	bd70      	pop	{r4, r5, r6, pc}
 800cc38:	6802      	ldr	r2, [r0, #0]
 800cc3a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cc44:	e7f7      	b.n	800cc36 <_Balloc+0x66>
 800cc46:	bf00      	nop
 800cc48:	080100d7 	.word	0x080100d7
 800cc4c:	080100ee 	.word	0x080100ee

0800cc50 <_Bfree>:
 800cc50:	b570      	push	{r4, r5, r6, lr}
 800cc52:	69c6      	ldr	r6, [r0, #28]
 800cc54:	4605      	mov	r5, r0
 800cc56:	460c      	mov	r4, r1
 800cc58:	b976      	cbnz	r6, 800cc78 <_Bfree+0x28>
 800cc5a:	2010      	movs	r0, #16
 800cc5c:	f001 f8ec 	bl	800de38 <malloc>
 800cc60:	4602      	mov	r2, r0
 800cc62:	61e8      	str	r0, [r5, #28]
 800cc64:	b920      	cbnz	r0, 800cc70 <_Bfree+0x20>
 800cc66:	4b09      	ldr	r3, [pc, #36]	; (800cc8c <_Bfree+0x3c>)
 800cc68:	4809      	ldr	r0, [pc, #36]	; (800cc90 <_Bfree+0x40>)
 800cc6a:	218f      	movs	r1, #143	; 0x8f
 800cc6c:	f001 f8b0 	bl	800ddd0 <__assert_func>
 800cc70:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cc74:	6006      	str	r6, [r0, #0]
 800cc76:	60c6      	str	r6, [r0, #12]
 800cc78:	b13c      	cbz	r4, 800cc8a <_Bfree+0x3a>
 800cc7a:	69eb      	ldr	r3, [r5, #28]
 800cc7c:	6862      	ldr	r2, [r4, #4]
 800cc7e:	68db      	ldr	r3, [r3, #12]
 800cc80:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc84:	6021      	str	r1, [r4, #0]
 800cc86:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc8a:	bd70      	pop	{r4, r5, r6, pc}
 800cc8c:	080100d7 	.word	0x080100d7
 800cc90:	080100ee 	.word	0x080100ee

0800cc94 <__multadd>:
 800cc94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc98:	690d      	ldr	r5, [r1, #16]
 800cc9a:	4607      	mov	r7, r0
 800cc9c:	460c      	mov	r4, r1
 800cc9e:	461e      	mov	r6, r3
 800cca0:	f101 0c14 	add.w	ip, r1, #20
 800cca4:	2000      	movs	r0, #0
 800cca6:	f8dc 3000 	ldr.w	r3, [ip]
 800ccaa:	b299      	uxth	r1, r3
 800ccac:	fb02 6101 	mla	r1, r2, r1, r6
 800ccb0:	0c1e      	lsrs	r6, r3, #16
 800ccb2:	0c0b      	lsrs	r3, r1, #16
 800ccb4:	fb02 3306 	mla	r3, r2, r6, r3
 800ccb8:	b289      	uxth	r1, r1
 800ccba:	3001      	adds	r0, #1
 800ccbc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ccc0:	4285      	cmp	r5, r0
 800ccc2:	f84c 1b04 	str.w	r1, [ip], #4
 800ccc6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ccca:	dcec      	bgt.n	800cca6 <__multadd+0x12>
 800cccc:	b30e      	cbz	r6, 800cd12 <__multadd+0x7e>
 800ccce:	68a3      	ldr	r3, [r4, #8]
 800ccd0:	42ab      	cmp	r3, r5
 800ccd2:	dc19      	bgt.n	800cd08 <__multadd+0x74>
 800ccd4:	6861      	ldr	r1, [r4, #4]
 800ccd6:	4638      	mov	r0, r7
 800ccd8:	3101      	adds	r1, #1
 800ccda:	f7ff ff79 	bl	800cbd0 <_Balloc>
 800ccde:	4680      	mov	r8, r0
 800cce0:	b928      	cbnz	r0, 800ccee <__multadd+0x5a>
 800cce2:	4602      	mov	r2, r0
 800cce4:	4b0c      	ldr	r3, [pc, #48]	; (800cd18 <__multadd+0x84>)
 800cce6:	480d      	ldr	r0, [pc, #52]	; (800cd1c <__multadd+0x88>)
 800cce8:	21ba      	movs	r1, #186	; 0xba
 800ccea:	f001 f871 	bl	800ddd0 <__assert_func>
 800ccee:	6922      	ldr	r2, [r4, #16]
 800ccf0:	3202      	adds	r2, #2
 800ccf2:	f104 010c 	add.w	r1, r4, #12
 800ccf6:	0092      	lsls	r2, r2, #2
 800ccf8:	300c      	adds	r0, #12
 800ccfa:	f7ff fae8 	bl	800c2ce <memcpy>
 800ccfe:	4621      	mov	r1, r4
 800cd00:	4638      	mov	r0, r7
 800cd02:	f7ff ffa5 	bl	800cc50 <_Bfree>
 800cd06:	4644      	mov	r4, r8
 800cd08:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cd0c:	3501      	adds	r5, #1
 800cd0e:	615e      	str	r6, [r3, #20]
 800cd10:	6125      	str	r5, [r4, #16]
 800cd12:	4620      	mov	r0, r4
 800cd14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd18:	08010066 	.word	0x08010066
 800cd1c:	080100ee 	.word	0x080100ee

0800cd20 <__s2b>:
 800cd20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd24:	460c      	mov	r4, r1
 800cd26:	4615      	mov	r5, r2
 800cd28:	461f      	mov	r7, r3
 800cd2a:	2209      	movs	r2, #9
 800cd2c:	3308      	adds	r3, #8
 800cd2e:	4606      	mov	r6, r0
 800cd30:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd34:	2100      	movs	r1, #0
 800cd36:	2201      	movs	r2, #1
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	db09      	blt.n	800cd50 <__s2b+0x30>
 800cd3c:	4630      	mov	r0, r6
 800cd3e:	f7ff ff47 	bl	800cbd0 <_Balloc>
 800cd42:	b940      	cbnz	r0, 800cd56 <__s2b+0x36>
 800cd44:	4602      	mov	r2, r0
 800cd46:	4b19      	ldr	r3, [pc, #100]	; (800cdac <__s2b+0x8c>)
 800cd48:	4819      	ldr	r0, [pc, #100]	; (800cdb0 <__s2b+0x90>)
 800cd4a:	21d3      	movs	r1, #211	; 0xd3
 800cd4c:	f001 f840 	bl	800ddd0 <__assert_func>
 800cd50:	0052      	lsls	r2, r2, #1
 800cd52:	3101      	adds	r1, #1
 800cd54:	e7f0      	b.n	800cd38 <__s2b+0x18>
 800cd56:	9b08      	ldr	r3, [sp, #32]
 800cd58:	6143      	str	r3, [r0, #20]
 800cd5a:	2d09      	cmp	r5, #9
 800cd5c:	f04f 0301 	mov.w	r3, #1
 800cd60:	6103      	str	r3, [r0, #16]
 800cd62:	dd16      	ble.n	800cd92 <__s2b+0x72>
 800cd64:	f104 0909 	add.w	r9, r4, #9
 800cd68:	46c8      	mov	r8, r9
 800cd6a:	442c      	add	r4, r5
 800cd6c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cd70:	4601      	mov	r1, r0
 800cd72:	3b30      	subs	r3, #48	; 0x30
 800cd74:	220a      	movs	r2, #10
 800cd76:	4630      	mov	r0, r6
 800cd78:	f7ff ff8c 	bl	800cc94 <__multadd>
 800cd7c:	45a0      	cmp	r8, r4
 800cd7e:	d1f5      	bne.n	800cd6c <__s2b+0x4c>
 800cd80:	f1a5 0408 	sub.w	r4, r5, #8
 800cd84:	444c      	add	r4, r9
 800cd86:	1b2d      	subs	r5, r5, r4
 800cd88:	1963      	adds	r3, r4, r5
 800cd8a:	42bb      	cmp	r3, r7
 800cd8c:	db04      	blt.n	800cd98 <__s2b+0x78>
 800cd8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd92:	340a      	adds	r4, #10
 800cd94:	2509      	movs	r5, #9
 800cd96:	e7f6      	b.n	800cd86 <__s2b+0x66>
 800cd98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cd9c:	4601      	mov	r1, r0
 800cd9e:	3b30      	subs	r3, #48	; 0x30
 800cda0:	220a      	movs	r2, #10
 800cda2:	4630      	mov	r0, r6
 800cda4:	f7ff ff76 	bl	800cc94 <__multadd>
 800cda8:	e7ee      	b.n	800cd88 <__s2b+0x68>
 800cdaa:	bf00      	nop
 800cdac:	08010066 	.word	0x08010066
 800cdb0:	080100ee 	.word	0x080100ee

0800cdb4 <__hi0bits>:
 800cdb4:	0c03      	lsrs	r3, r0, #16
 800cdb6:	041b      	lsls	r3, r3, #16
 800cdb8:	b9d3      	cbnz	r3, 800cdf0 <__hi0bits+0x3c>
 800cdba:	0400      	lsls	r0, r0, #16
 800cdbc:	2310      	movs	r3, #16
 800cdbe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cdc2:	bf04      	itt	eq
 800cdc4:	0200      	lsleq	r0, r0, #8
 800cdc6:	3308      	addeq	r3, #8
 800cdc8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cdcc:	bf04      	itt	eq
 800cdce:	0100      	lsleq	r0, r0, #4
 800cdd0:	3304      	addeq	r3, #4
 800cdd2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cdd6:	bf04      	itt	eq
 800cdd8:	0080      	lsleq	r0, r0, #2
 800cdda:	3302      	addeq	r3, #2
 800cddc:	2800      	cmp	r0, #0
 800cdde:	db05      	blt.n	800cdec <__hi0bits+0x38>
 800cde0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cde4:	f103 0301 	add.w	r3, r3, #1
 800cde8:	bf08      	it	eq
 800cdea:	2320      	moveq	r3, #32
 800cdec:	4618      	mov	r0, r3
 800cdee:	4770      	bx	lr
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	e7e4      	b.n	800cdbe <__hi0bits+0xa>

0800cdf4 <__lo0bits>:
 800cdf4:	6803      	ldr	r3, [r0, #0]
 800cdf6:	f013 0207 	ands.w	r2, r3, #7
 800cdfa:	d00c      	beq.n	800ce16 <__lo0bits+0x22>
 800cdfc:	07d9      	lsls	r1, r3, #31
 800cdfe:	d422      	bmi.n	800ce46 <__lo0bits+0x52>
 800ce00:	079a      	lsls	r2, r3, #30
 800ce02:	bf49      	itett	mi
 800ce04:	085b      	lsrmi	r3, r3, #1
 800ce06:	089b      	lsrpl	r3, r3, #2
 800ce08:	6003      	strmi	r3, [r0, #0]
 800ce0a:	2201      	movmi	r2, #1
 800ce0c:	bf5c      	itt	pl
 800ce0e:	6003      	strpl	r3, [r0, #0]
 800ce10:	2202      	movpl	r2, #2
 800ce12:	4610      	mov	r0, r2
 800ce14:	4770      	bx	lr
 800ce16:	b299      	uxth	r1, r3
 800ce18:	b909      	cbnz	r1, 800ce1e <__lo0bits+0x2a>
 800ce1a:	0c1b      	lsrs	r3, r3, #16
 800ce1c:	2210      	movs	r2, #16
 800ce1e:	b2d9      	uxtb	r1, r3
 800ce20:	b909      	cbnz	r1, 800ce26 <__lo0bits+0x32>
 800ce22:	3208      	adds	r2, #8
 800ce24:	0a1b      	lsrs	r3, r3, #8
 800ce26:	0719      	lsls	r1, r3, #28
 800ce28:	bf04      	itt	eq
 800ce2a:	091b      	lsreq	r3, r3, #4
 800ce2c:	3204      	addeq	r2, #4
 800ce2e:	0799      	lsls	r1, r3, #30
 800ce30:	bf04      	itt	eq
 800ce32:	089b      	lsreq	r3, r3, #2
 800ce34:	3202      	addeq	r2, #2
 800ce36:	07d9      	lsls	r1, r3, #31
 800ce38:	d403      	bmi.n	800ce42 <__lo0bits+0x4e>
 800ce3a:	085b      	lsrs	r3, r3, #1
 800ce3c:	f102 0201 	add.w	r2, r2, #1
 800ce40:	d003      	beq.n	800ce4a <__lo0bits+0x56>
 800ce42:	6003      	str	r3, [r0, #0]
 800ce44:	e7e5      	b.n	800ce12 <__lo0bits+0x1e>
 800ce46:	2200      	movs	r2, #0
 800ce48:	e7e3      	b.n	800ce12 <__lo0bits+0x1e>
 800ce4a:	2220      	movs	r2, #32
 800ce4c:	e7e1      	b.n	800ce12 <__lo0bits+0x1e>
	...

0800ce50 <__i2b>:
 800ce50:	b510      	push	{r4, lr}
 800ce52:	460c      	mov	r4, r1
 800ce54:	2101      	movs	r1, #1
 800ce56:	f7ff febb 	bl	800cbd0 <_Balloc>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	b928      	cbnz	r0, 800ce6a <__i2b+0x1a>
 800ce5e:	4b05      	ldr	r3, [pc, #20]	; (800ce74 <__i2b+0x24>)
 800ce60:	4805      	ldr	r0, [pc, #20]	; (800ce78 <__i2b+0x28>)
 800ce62:	f240 1145 	movw	r1, #325	; 0x145
 800ce66:	f000 ffb3 	bl	800ddd0 <__assert_func>
 800ce6a:	2301      	movs	r3, #1
 800ce6c:	6144      	str	r4, [r0, #20]
 800ce6e:	6103      	str	r3, [r0, #16]
 800ce70:	bd10      	pop	{r4, pc}
 800ce72:	bf00      	nop
 800ce74:	08010066 	.word	0x08010066
 800ce78:	080100ee 	.word	0x080100ee

0800ce7c <__multiply>:
 800ce7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce80:	4691      	mov	r9, r2
 800ce82:	690a      	ldr	r2, [r1, #16]
 800ce84:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ce88:	429a      	cmp	r2, r3
 800ce8a:	bfb8      	it	lt
 800ce8c:	460b      	movlt	r3, r1
 800ce8e:	460c      	mov	r4, r1
 800ce90:	bfbc      	itt	lt
 800ce92:	464c      	movlt	r4, r9
 800ce94:	4699      	movlt	r9, r3
 800ce96:	6927      	ldr	r7, [r4, #16]
 800ce98:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ce9c:	68a3      	ldr	r3, [r4, #8]
 800ce9e:	6861      	ldr	r1, [r4, #4]
 800cea0:	eb07 060a 	add.w	r6, r7, sl
 800cea4:	42b3      	cmp	r3, r6
 800cea6:	b085      	sub	sp, #20
 800cea8:	bfb8      	it	lt
 800ceaa:	3101      	addlt	r1, #1
 800ceac:	f7ff fe90 	bl	800cbd0 <_Balloc>
 800ceb0:	b930      	cbnz	r0, 800cec0 <__multiply+0x44>
 800ceb2:	4602      	mov	r2, r0
 800ceb4:	4b44      	ldr	r3, [pc, #272]	; (800cfc8 <__multiply+0x14c>)
 800ceb6:	4845      	ldr	r0, [pc, #276]	; (800cfcc <__multiply+0x150>)
 800ceb8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cebc:	f000 ff88 	bl	800ddd0 <__assert_func>
 800cec0:	f100 0514 	add.w	r5, r0, #20
 800cec4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cec8:	462b      	mov	r3, r5
 800ceca:	2200      	movs	r2, #0
 800cecc:	4543      	cmp	r3, r8
 800cece:	d321      	bcc.n	800cf14 <__multiply+0x98>
 800ced0:	f104 0314 	add.w	r3, r4, #20
 800ced4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ced8:	f109 0314 	add.w	r3, r9, #20
 800cedc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cee0:	9202      	str	r2, [sp, #8]
 800cee2:	1b3a      	subs	r2, r7, r4
 800cee4:	3a15      	subs	r2, #21
 800cee6:	f022 0203 	bic.w	r2, r2, #3
 800ceea:	3204      	adds	r2, #4
 800ceec:	f104 0115 	add.w	r1, r4, #21
 800cef0:	428f      	cmp	r7, r1
 800cef2:	bf38      	it	cc
 800cef4:	2204      	movcc	r2, #4
 800cef6:	9201      	str	r2, [sp, #4]
 800cef8:	9a02      	ldr	r2, [sp, #8]
 800cefa:	9303      	str	r3, [sp, #12]
 800cefc:	429a      	cmp	r2, r3
 800cefe:	d80c      	bhi.n	800cf1a <__multiply+0x9e>
 800cf00:	2e00      	cmp	r6, #0
 800cf02:	dd03      	ble.n	800cf0c <__multiply+0x90>
 800cf04:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d05b      	beq.n	800cfc4 <__multiply+0x148>
 800cf0c:	6106      	str	r6, [r0, #16]
 800cf0e:	b005      	add	sp, #20
 800cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf14:	f843 2b04 	str.w	r2, [r3], #4
 800cf18:	e7d8      	b.n	800cecc <__multiply+0x50>
 800cf1a:	f8b3 a000 	ldrh.w	sl, [r3]
 800cf1e:	f1ba 0f00 	cmp.w	sl, #0
 800cf22:	d024      	beq.n	800cf6e <__multiply+0xf2>
 800cf24:	f104 0e14 	add.w	lr, r4, #20
 800cf28:	46a9      	mov	r9, r5
 800cf2a:	f04f 0c00 	mov.w	ip, #0
 800cf2e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cf32:	f8d9 1000 	ldr.w	r1, [r9]
 800cf36:	fa1f fb82 	uxth.w	fp, r2
 800cf3a:	b289      	uxth	r1, r1
 800cf3c:	fb0a 110b 	mla	r1, sl, fp, r1
 800cf40:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800cf44:	f8d9 2000 	ldr.w	r2, [r9]
 800cf48:	4461      	add	r1, ip
 800cf4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf4e:	fb0a c20b 	mla	r2, sl, fp, ip
 800cf52:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cf56:	b289      	uxth	r1, r1
 800cf58:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf5c:	4577      	cmp	r7, lr
 800cf5e:	f849 1b04 	str.w	r1, [r9], #4
 800cf62:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cf66:	d8e2      	bhi.n	800cf2e <__multiply+0xb2>
 800cf68:	9a01      	ldr	r2, [sp, #4]
 800cf6a:	f845 c002 	str.w	ip, [r5, r2]
 800cf6e:	9a03      	ldr	r2, [sp, #12]
 800cf70:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cf74:	3304      	adds	r3, #4
 800cf76:	f1b9 0f00 	cmp.w	r9, #0
 800cf7a:	d021      	beq.n	800cfc0 <__multiply+0x144>
 800cf7c:	6829      	ldr	r1, [r5, #0]
 800cf7e:	f104 0c14 	add.w	ip, r4, #20
 800cf82:	46ae      	mov	lr, r5
 800cf84:	f04f 0a00 	mov.w	sl, #0
 800cf88:	f8bc b000 	ldrh.w	fp, [ip]
 800cf8c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cf90:	fb09 220b 	mla	r2, r9, fp, r2
 800cf94:	4452      	add	r2, sl
 800cf96:	b289      	uxth	r1, r1
 800cf98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cf9c:	f84e 1b04 	str.w	r1, [lr], #4
 800cfa0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cfa4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfa8:	f8be 1000 	ldrh.w	r1, [lr]
 800cfac:	fb09 110a 	mla	r1, r9, sl, r1
 800cfb0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800cfb4:	4567      	cmp	r7, ip
 800cfb6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cfba:	d8e5      	bhi.n	800cf88 <__multiply+0x10c>
 800cfbc:	9a01      	ldr	r2, [sp, #4]
 800cfbe:	50a9      	str	r1, [r5, r2]
 800cfc0:	3504      	adds	r5, #4
 800cfc2:	e799      	b.n	800cef8 <__multiply+0x7c>
 800cfc4:	3e01      	subs	r6, #1
 800cfc6:	e79b      	b.n	800cf00 <__multiply+0x84>
 800cfc8:	08010066 	.word	0x08010066
 800cfcc:	080100ee 	.word	0x080100ee

0800cfd0 <__pow5mult>:
 800cfd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfd4:	4615      	mov	r5, r2
 800cfd6:	f012 0203 	ands.w	r2, r2, #3
 800cfda:	4606      	mov	r6, r0
 800cfdc:	460f      	mov	r7, r1
 800cfde:	d007      	beq.n	800cff0 <__pow5mult+0x20>
 800cfe0:	4c25      	ldr	r4, [pc, #148]	; (800d078 <__pow5mult+0xa8>)
 800cfe2:	3a01      	subs	r2, #1
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cfea:	f7ff fe53 	bl	800cc94 <__multadd>
 800cfee:	4607      	mov	r7, r0
 800cff0:	10ad      	asrs	r5, r5, #2
 800cff2:	d03d      	beq.n	800d070 <__pow5mult+0xa0>
 800cff4:	69f4      	ldr	r4, [r6, #28]
 800cff6:	b97c      	cbnz	r4, 800d018 <__pow5mult+0x48>
 800cff8:	2010      	movs	r0, #16
 800cffa:	f000 ff1d 	bl	800de38 <malloc>
 800cffe:	4602      	mov	r2, r0
 800d000:	61f0      	str	r0, [r6, #28]
 800d002:	b928      	cbnz	r0, 800d010 <__pow5mult+0x40>
 800d004:	4b1d      	ldr	r3, [pc, #116]	; (800d07c <__pow5mult+0xac>)
 800d006:	481e      	ldr	r0, [pc, #120]	; (800d080 <__pow5mult+0xb0>)
 800d008:	f240 11b3 	movw	r1, #435	; 0x1b3
 800d00c:	f000 fee0 	bl	800ddd0 <__assert_func>
 800d010:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d014:	6004      	str	r4, [r0, #0]
 800d016:	60c4      	str	r4, [r0, #12]
 800d018:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800d01c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d020:	b94c      	cbnz	r4, 800d036 <__pow5mult+0x66>
 800d022:	f240 2171 	movw	r1, #625	; 0x271
 800d026:	4630      	mov	r0, r6
 800d028:	f7ff ff12 	bl	800ce50 <__i2b>
 800d02c:	2300      	movs	r3, #0
 800d02e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d032:	4604      	mov	r4, r0
 800d034:	6003      	str	r3, [r0, #0]
 800d036:	f04f 0900 	mov.w	r9, #0
 800d03a:	07eb      	lsls	r3, r5, #31
 800d03c:	d50a      	bpl.n	800d054 <__pow5mult+0x84>
 800d03e:	4639      	mov	r1, r7
 800d040:	4622      	mov	r2, r4
 800d042:	4630      	mov	r0, r6
 800d044:	f7ff ff1a 	bl	800ce7c <__multiply>
 800d048:	4639      	mov	r1, r7
 800d04a:	4680      	mov	r8, r0
 800d04c:	4630      	mov	r0, r6
 800d04e:	f7ff fdff 	bl	800cc50 <_Bfree>
 800d052:	4647      	mov	r7, r8
 800d054:	106d      	asrs	r5, r5, #1
 800d056:	d00b      	beq.n	800d070 <__pow5mult+0xa0>
 800d058:	6820      	ldr	r0, [r4, #0]
 800d05a:	b938      	cbnz	r0, 800d06c <__pow5mult+0x9c>
 800d05c:	4622      	mov	r2, r4
 800d05e:	4621      	mov	r1, r4
 800d060:	4630      	mov	r0, r6
 800d062:	f7ff ff0b 	bl	800ce7c <__multiply>
 800d066:	6020      	str	r0, [r4, #0]
 800d068:	f8c0 9000 	str.w	r9, [r0]
 800d06c:	4604      	mov	r4, r0
 800d06e:	e7e4      	b.n	800d03a <__pow5mult+0x6a>
 800d070:	4638      	mov	r0, r7
 800d072:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d076:	bf00      	nop
 800d078:	08010238 	.word	0x08010238
 800d07c:	080100d7 	.word	0x080100d7
 800d080:	080100ee 	.word	0x080100ee

0800d084 <__lshift>:
 800d084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d088:	460c      	mov	r4, r1
 800d08a:	6849      	ldr	r1, [r1, #4]
 800d08c:	6923      	ldr	r3, [r4, #16]
 800d08e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d092:	68a3      	ldr	r3, [r4, #8]
 800d094:	4607      	mov	r7, r0
 800d096:	4691      	mov	r9, r2
 800d098:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d09c:	f108 0601 	add.w	r6, r8, #1
 800d0a0:	42b3      	cmp	r3, r6
 800d0a2:	db0b      	blt.n	800d0bc <__lshift+0x38>
 800d0a4:	4638      	mov	r0, r7
 800d0a6:	f7ff fd93 	bl	800cbd0 <_Balloc>
 800d0aa:	4605      	mov	r5, r0
 800d0ac:	b948      	cbnz	r0, 800d0c2 <__lshift+0x3e>
 800d0ae:	4602      	mov	r2, r0
 800d0b0:	4b28      	ldr	r3, [pc, #160]	; (800d154 <__lshift+0xd0>)
 800d0b2:	4829      	ldr	r0, [pc, #164]	; (800d158 <__lshift+0xd4>)
 800d0b4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800d0b8:	f000 fe8a 	bl	800ddd0 <__assert_func>
 800d0bc:	3101      	adds	r1, #1
 800d0be:	005b      	lsls	r3, r3, #1
 800d0c0:	e7ee      	b.n	800d0a0 <__lshift+0x1c>
 800d0c2:	2300      	movs	r3, #0
 800d0c4:	f100 0114 	add.w	r1, r0, #20
 800d0c8:	f100 0210 	add.w	r2, r0, #16
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	4553      	cmp	r3, sl
 800d0d0:	db33      	blt.n	800d13a <__lshift+0xb6>
 800d0d2:	6920      	ldr	r0, [r4, #16]
 800d0d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d0d8:	f104 0314 	add.w	r3, r4, #20
 800d0dc:	f019 091f 	ands.w	r9, r9, #31
 800d0e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d0e4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d0e8:	d02b      	beq.n	800d142 <__lshift+0xbe>
 800d0ea:	f1c9 0e20 	rsb	lr, r9, #32
 800d0ee:	468a      	mov	sl, r1
 800d0f0:	2200      	movs	r2, #0
 800d0f2:	6818      	ldr	r0, [r3, #0]
 800d0f4:	fa00 f009 	lsl.w	r0, r0, r9
 800d0f8:	4310      	orrs	r0, r2
 800d0fa:	f84a 0b04 	str.w	r0, [sl], #4
 800d0fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800d102:	459c      	cmp	ip, r3
 800d104:	fa22 f20e 	lsr.w	r2, r2, lr
 800d108:	d8f3      	bhi.n	800d0f2 <__lshift+0x6e>
 800d10a:	ebac 0304 	sub.w	r3, ip, r4
 800d10e:	3b15      	subs	r3, #21
 800d110:	f023 0303 	bic.w	r3, r3, #3
 800d114:	3304      	adds	r3, #4
 800d116:	f104 0015 	add.w	r0, r4, #21
 800d11a:	4584      	cmp	ip, r0
 800d11c:	bf38      	it	cc
 800d11e:	2304      	movcc	r3, #4
 800d120:	50ca      	str	r2, [r1, r3]
 800d122:	b10a      	cbz	r2, 800d128 <__lshift+0xa4>
 800d124:	f108 0602 	add.w	r6, r8, #2
 800d128:	3e01      	subs	r6, #1
 800d12a:	4638      	mov	r0, r7
 800d12c:	612e      	str	r6, [r5, #16]
 800d12e:	4621      	mov	r1, r4
 800d130:	f7ff fd8e 	bl	800cc50 <_Bfree>
 800d134:	4628      	mov	r0, r5
 800d136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d13a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d13e:	3301      	adds	r3, #1
 800d140:	e7c5      	b.n	800d0ce <__lshift+0x4a>
 800d142:	3904      	subs	r1, #4
 800d144:	f853 2b04 	ldr.w	r2, [r3], #4
 800d148:	f841 2f04 	str.w	r2, [r1, #4]!
 800d14c:	459c      	cmp	ip, r3
 800d14e:	d8f9      	bhi.n	800d144 <__lshift+0xc0>
 800d150:	e7ea      	b.n	800d128 <__lshift+0xa4>
 800d152:	bf00      	nop
 800d154:	08010066 	.word	0x08010066
 800d158:	080100ee 	.word	0x080100ee

0800d15c <__mcmp>:
 800d15c:	b530      	push	{r4, r5, lr}
 800d15e:	6902      	ldr	r2, [r0, #16]
 800d160:	690c      	ldr	r4, [r1, #16]
 800d162:	1b12      	subs	r2, r2, r4
 800d164:	d10e      	bne.n	800d184 <__mcmp+0x28>
 800d166:	f100 0314 	add.w	r3, r0, #20
 800d16a:	3114      	adds	r1, #20
 800d16c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d170:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d174:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d178:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d17c:	42a5      	cmp	r5, r4
 800d17e:	d003      	beq.n	800d188 <__mcmp+0x2c>
 800d180:	d305      	bcc.n	800d18e <__mcmp+0x32>
 800d182:	2201      	movs	r2, #1
 800d184:	4610      	mov	r0, r2
 800d186:	bd30      	pop	{r4, r5, pc}
 800d188:	4283      	cmp	r3, r0
 800d18a:	d3f3      	bcc.n	800d174 <__mcmp+0x18>
 800d18c:	e7fa      	b.n	800d184 <__mcmp+0x28>
 800d18e:	f04f 32ff 	mov.w	r2, #4294967295
 800d192:	e7f7      	b.n	800d184 <__mcmp+0x28>

0800d194 <__mdiff>:
 800d194:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d198:	460c      	mov	r4, r1
 800d19a:	4606      	mov	r6, r0
 800d19c:	4611      	mov	r1, r2
 800d19e:	4620      	mov	r0, r4
 800d1a0:	4690      	mov	r8, r2
 800d1a2:	f7ff ffdb 	bl	800d15c <__mcmp>
 800d1a6:	1e05      	subs	r5, r0, #0
 800d1a8:	d110      	bne.n	800d1cc <__mdiff+0x38>
 800d1aa:	4629      	mov	r1, r5
 800d1ac:	4630      	mov	r0, r6
 800d1ae:	f7ff fd0f 	bl	800cbd0 <_Balloc>
 800d1b2:	b930      	cbnz	r0, 800d1c2 <__mdiff+0x2e>
 800d1b4:	4b3a      	ldr	r3, [pc, #232]	; (800d2a0 <__mdiff+0x10c>)
 800d1b6:	4602      	mov	r2, r0
 800d1b8:	f240 2137 	movw	r1, #567	; 0x237
 800d1bc:	4839      	ldr	r0, [pc, #228]	; (800d2a4 <__mdiff+0x110>)
 800d1be:	f000 fe07 	bl	800ddd0 <__assert_func>
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d1c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1cc:	bfa4      	itt	ge
 800d1ce:	4643      	movge	r3, r8
 800d1d0:	46a0      	movge	r8, r4
 800d1d2:	4630      	mov	r0, r6
 800d1d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d1d8:	bfa6      	itte	ge
 800d1da:	461c      	movge	r4, r3
 800d1dc:	2500      	movge	r5, #0
 800d1de:	2501      	movlt	r5, #1
 800d1e0:	f7ff fcf6 	bl	800cbd0 <_Balloc>
 800d1e4:	b920      	cbnz	r0, 800d1f0 <__mdiff+0x5c>
 800d1e6:	4b2e      	ldr	r3, [pc, #184]	; (800d2a0 <__mdiff+0x10c>)
 800d1e8:	4602      	mov	r2, r0
 800d1ea:	f240 2145 	movw	r1, #581	; 0x245
 800d1ee:	e7e5      	b.n	800d1bc <__mdiff+0x28>
 800d1f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d1f4:	6926      	ldr	r6, [r4, #16]
 800d1f6:	60c5      	str	r5, [r0, #12]
 800d1f8:	f104 0914 	add.w	r9, r4, #20
 800d1fc:	f108 0514 	add.w	r5, r8, #20
 800d200:	f100 0e14 	add.w	lr, r0, #20
 800d204:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d208:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d20c:	f108 0210 	add.w	r2, r8, #16
 800d210:	46f2      	mov	sl, lr
 800d212:	2100      	movs	r1, #0
 800d214:	f859 3b04 	ldr.w	r3, [r9], #4
 800d218:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d21c:	fa11 f88b 	uxtah	r8, r1, fp
 800d220:	b299      	uxth	r1, r3
 800d222:	0c1b      	lsrs	r3, r3, #16
 800d224:	eba8 0801 	sub.w	r8, r8, r1
 800d228:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d22c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d230:	fa1f f888 	uxth.w	r8, r8
 800d234:	1419      	asrs	r1, r3, #16
 800d236:	454e      	cmp	r6, r9
 800d238:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d23c:	f84a 3b04 	str.w	r3, [sl], #4
 800d240:	d8e8      	bhi.n	800d214 <__mdiff+0x80>
 800d242:	1b33      	subs	r3, r6, r4
 800d244:	3b15      	subs	r3, #21
 800d246:	f023 0303 	bic.w	r3, r3, #3
 800d24a:	3304      	adds	r3, #4
 800d24c:	3415      	adds	r4, #21
 800d24e:	42a6      	cmp	r6, r4
 800d250:	bf38      	it	cc
 800d252:	2304      	movcc	r3, #4
 800d254:	441d      	add	r5, r3
 800d256:	4473      	add	r3, lr
 800d258:	469e      	mov	lr, r3
 800d25a:	462e      	mov	r6, r5
 800d25c:	4566      	cmp	r6, ip
 800d25e:	d30e      	bcc.n	800d27e <__mdiff+0xea>
 800d260:	f10c 0203 	add.w	r2, ip, #3
 800d264:	1b52      	subs	r2, r2, r5
 800d266:	f022 0203 	bic.w	r2, r2, #3
 800d26a:	3d03      	subs	r5, #3
 800d26c:	45ac      	cmp	ip, r5
 800d26e:	bf38      	it	cc
 800d270:	2200      	movcc	r2, #0
 800d272:	4413      	add	r3, r2
 800d274:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d278:	b17a      	cbz	r2, 800d29a <__mdiff+0x106>
 800d27a:	6107      	str	r7, [r0, #16]
 800d27c:	e7a4      	b.n	800d1c8 <__mdiff+0x34>
 800d27e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d282:	fa11 f288 	uxtah	r2, r1, r8
 800d286:	1414      	asrs	r4, r2, #16
 800d288:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d28c:	b292      	uxth	r2, r2
 800d28e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d292:	f84e 2b04 	str.w	r2, [lr], #4
 800d296:	1421      	asrs	r1, r4, #16
 800d298:	e7e0      	b.n	800d25c <__mdiff+0xc8>
 800d29a:	3f01      	subs	r7, #1
 800d29c:	e7ea      	b.n	800d274 <__mdiff+0xe0>
 800d29e:	bf00      	nop
 800d2a0:	08010066 	.word	0x08010066
 800d2a4:	080100ee 	.word	0x080100ee

0800d2a8 <__ulp>:
 800d2a8:	b082      	sub	sp, #8
 800d2aa:	ed8d 0b00 	vstr	d0, [sp]
 800d2ae:	9a01      	ldr	r2, [sp, #4]
 800d2b0:	4b0f      	ldr	r3, [pc, #60]	; (800d2f0 <__ulp+0x48>)
 800d2b2:	4013      	ands	r3, r2
 800d2b4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	dc08      	bgt.n	800d2ce <__ulp+0x26>
 800d2bc:	425b      	negs	r3, r3
 800d2be:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d2c2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d2c6:	da04      	bge.n	800d2d2 <__ulp+0x2a>
 800d2c8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d2cc:	4113      	asrs	r3, r2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	e008      	b.n	800d2e4 <__ulp+0x3c>
 800d2d2:	f1a2 0314 	sub.w	r3, r2, #20
 800d2d6:	2b1e      	cmp	r3, #30
 800d2d8:	bfda      	itte	le
 800d2da:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d2de:	40da      	lsrle	r2, r3
 800d2e0:	2201      	movgt	r2, #1
 800d2e2:	2300      	movs	r3, #0
 800d2e4:	4619      	mov	r1, r3
 800d2e6:	4610      	mov	r0, r2
 800d2e8:	ec41 0b10 	vmov	d0, r0, r1
 800d2ec:	b002      	add	sp, #8
 800d2ee:	4770      	bx	lr
 800d2f0:	7ff00000 	.word	0x7ff00000

0800d2f4 <__b2d>:
 800d2f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f8:	6906      	ldr	r6, [r0, #16]
 800d2fa:	f100 0814 	add.w	r8, r0, #20
 800d2fe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d302:	1f37      	subs	r7, r6, #4
 800d304:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d308:	4610      	mov	r0, r2
 800d30a:	f7ff fd53 	bl	800cdb4 <__hi0bits>
 800d30e:	f1c0 0320 	rsb	r3, r0, #32
 800d312:	280a      	cmp	r0, #10
 800d314:	600b      	str	r3, [r1, #0]
 800d316:	491b      	ldr	r1, [pc, #108]	; (800d384 <__b2d+0x90>)
 800d318:	dc15      	bgt.n	800d346 <__b2d+0x52>
 800d31a:	f1c0 0c0b 	rsb	ip, r0, #11
 800d31e:	fa22 f30c 	lsr.w	r3, r2, ip
 800d322:	45b8      	cmp	r8, r7
 800d324:	ea43 0501 	orr.w	r5, r3, r1
 800d328:	bf34      	ite	cc
 800d32a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d32e:	2300      	movcs	r3, #0
 800d330:	3015      	adds	r0, #21
 800d332:	fa02 f000 	lsl.w	r0, r2, r0
 800d336:	fa23 f30c 	lsr.w	r3, r3, ip
 800d33a:	4303      	orrs	r3, r0
 800d33c:	461c      	mov	r4, r3
 800d33e:	ec45 4b10 	vmov	d0, r4, r5
 800d342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d346:	45b8      	cmp	r8, r7
 800d348:	bf3a      	itte	cc
 800d34a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d34e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d352:	2300      	movcs	r3, #0
 800d354:	380b      	subs	r0, #11
 800d356:	d012      	beq.n	800d37e <__b2d+0x8a>
 800d358:	f1c0 0120 	rsb	r1, r0, #32
 800d35c:	fa23 f401 	lsr.w	r4, r3, r1
 800d360:	4082      	lsls	r2, r0
 800d362:	4322      	orrs	r2, r4
 800d364:	4547      	cmp	r7, r8
 800d366:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d36a:	bf8c      	ite	hi
 800d36c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d370:	2200      	movls	r2, #0
 800d372:	4083      	lsls	r3, r0
 800d374:	40ca      	lsrs	r2, r1
 800d376:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d37a:	4313      	orrs	r3, r2
 800d37c:	e7de      	b.n	800d33c <__b2d+0x48>
 800d37e:	ea42 0501 	orr.w	r5, r2, r1
 800d382:	e7db      	b.n	800d33c <__b2d+0x48>
 800d384:	3ff00000 	.word	0x3ff00000

0800d388 <__d2b>:
 800d388:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d38c:	460f      	mov	r7, r1
 800d38e:	2101      	movs	r1, #1
 800d390:	ec59 8b10 	vmov	r8, r9, d0
 800d394:	4616      	mov	r6, r2
 800d396:	f7ff fc1b 	bl	800cbd0 <_Balloc>
 800d39a:	4604      	mov	r4, r0
 800d39c:	b930      	cbnz	r0, 800d3ac <__d2b+0x24>
 800d39e:	4602      	mov	r2, r0
 800d3a0:	4b24      	ldr	r3, [pc, #144]	; (800d434 <__d2b+0xac>)
 800d3a2:	4825      	ldr	r0, [pc, #148]	; (800d438 <__d2b+0xb0>)
 800d3a4:	f240 310f 	movw	r1, #783	; 0x30f
 800d3a8:	f000 fd12 	bl	800ddd0 <__assert_func>
 800d3ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d3b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d3b4:	bb2d      	cbnz	r5, 800d402 <__d2b+0x7a>
 800d3b6:	9301      	str	r3, [sp, #4]
 800d3b8:	f1b8 0300 	subs.w	r3, r8, #0
 800d3bc:	d026      	beq.n	800d40c <__d2b+0x84>
 800d3be:	4668      	mov	r0, sp
 800d3c0:	9300      	str	r3, [sp, #0]
 800d3c2:	f7ff fd17 	bl	800cdf4 <__lo0bits>
 800d3c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d3ca:	b1e8      	cbz	r0, 800d408 <__d2b+0x80>
 800d3cc:	f1c0 0320 	rsb	r3, r0, #32
 800d3d0:	fa02 f303 	lsl.w	r3, r2, r3
 800d3d4:	430b      	orrs	r3, r1
 800d3d6:	40c2      	lsrs	r2, r0
 800d3d8:	6163      	str	r3, [r4, #20]
 800d3da:	9201      	str	r2, [sp, #4]
 800d3dc:	9b01      	ldr	r3, [sp, #4]
 800d3de:	61a3      	str	r3, [r4, #24]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	bf14      	ite	ne
 800d3e4:	2202      	movne	r2, #2
 800d3e6:	2201      	moveq	r2, #1
 800d3e8:	6122      	str	r2, [r4, #16]
 800d3ea:	b1bd      	cbz	r5, 800d41c <__d2b+0x94>
 800d3ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d3f0:	4405      	add	r5, r0
 800d3f2:	603d      	str	r5, [r7, #0]
 800d3f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d3f8:	6030      	str	r0, [r6, #0]
 800d3fa:	4620      	mov	r0, r4
 800d3fc:	b003      	add	sp, #12
 800d3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d402:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d406:	e7d6      	b.n	800d3b6 <__d2b+0x2e>
 800d408:	6161      	str	r1, [r4, #20]
 800d40a:	e7e7      	b.n	800d3dc <__d2b+0x54>
 800d40c:	a801      	add	r0, sp, #4
 800d40e:	f7ff fcf1 	bl	800cdf4 <__lo0bits>
 800d412:	9b01      	ldr	r3, [sp, #4]
 800d414:	6163      	str	r3, [r4, #20]
 800d416:	3020      	adds	r0, #32
 800d418:	2201      	movs	r2, #1
 800d41a:	e7e5      	b.n	800d3e8 <__d2b+0x60>
 800d41c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d420:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d424:	6038      	str	r0, [r7, #0]
 800d426:	6918      	ldr	r0, [r3, #16]
 800d428:	f7ff fcc4 	bl	800cdb4 <__hi0bits>
 800d42c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d430:	e7e2      	b.n	800d3f8 <__d2b+0x70>
 800d432:	bf00      	nop
 800d434:	08010066 	.word	0x08010066
 800d438:	080100ee 	.word	0x080100ee

0800d43c <__ratio>:
 800d43c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d440:	4688      	mov	r8, r1
 800d442:	4669      	mov	r1, sp
 800d444:	4681      	mov	r9, r0
 800d446:	f7ff ff55 	bl	800d2f4 <__b2d>
 800d44a:	a901      	add	r1, sp, #4
 800d44c:	4640      	mov	r0, r8
 800d44e:	ec55 4b10 	vmov	r4, r5, d0
 800d452:	f7ff ff4f 	bl	800d2f4 <__b2d>
 800d456:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d45a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d45e:	eba3 0c02 	sub.w	ip, r3, r2
 800d462:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d466:	1a9b      	subs	r3, r3, r2
 800d468:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d46c:	ec51 0b10 	vmov	r0, r1, d0
 800d470:	2b00      	cmp	r3, #0
 800d472:	bfd6      	itet	le
 800d474:	460a      	movle	r2, r1
 800d476:	462a      	movgt	r2, r5
 800d478:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d47c:	468b      	mov	fp, r1
 800d47e:	462f      	mov	r7, r5
 800d480:	bfd4      	ite	le
 800d482:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d486:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d48a:	4620      	mov	r0, r4
 800d48c:	ee10 2a10 	vmov	r2, s0
 800d490:	465b      	mov	r3, fp
 800d492:	4639      	mov	r1, r7
 800d494:	f7f3 f9d2 	bl	800083c <__aeabi_ddiv>
 800d498:	ec41 0b10 	vmov	d0, r0, r1
 800d49c:	b003      	add	sp, #12
 800d49e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d4a2 <__copybits>:
 800d4a2:	3901      	subs	r1, #1
 800d4a4:	b570      	push	{r4, r5, r6, lr}
 800d4a6:	1149      	asrs	r1, r1, #5
 800d4a8:	6914      	ldr	r4, [r2, #16]
 800d4aa:	3101      	adds	r1, #1
 800d4ac:	f102 0314 	add.w	r3, r2, #20
 800d4b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d4b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d4b8:	1f05      	subs	r5, r0, #4
 800d4ba:	42a3      	cmp	r3, r4
 800d4bc:	d30c      	bcc.n	800d4d8 <__copybits+0x36>
 800d4be:	1aa3      	subs	r3, r4, r2
 800d4c0:	3b11      	subs	r3, #17
 800d4c2:	f023 0303 	bic.w	r3, r3, #3
 800d4c6:	3211      	adds	r2, #17
 800d4c8:	42a2      	cmp	r2, r4
 800d4ca:	bf88      	it	hi
 800d4cc:	2300      	movhi	r3, #0
 800d4ce:	4418      	add	r0, r3
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	4288      	cmp	r0, r1
 800d4d4:	d305      	bcc.n	800d4e2 <__copybits+0x40>
 800d4d6:	bd70      	pop	{r4, r5, r6, pc}
 800d4d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d4dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800d4e0:	e7eb      	b.n	800d4ba <__copybits+0x18>
 800d4e2:	f840 3b04 	str.w	r3, [r0], #4
 800d4e6:	e7f4      	b.n	800d4d2 <__copybits+0x30>

0800d4e8 <__any_on>:
 800d4e8:	f100 0214 	add.w	r2, r0, #20
 800d4ec:	6900      	ldr	r0, [r0, #16]
 800d4ee:	114b      	asrs	r3, r1, #5
 800d4f0:	4298      	cmp	r0, r3
 800d4f2:	b510      	push	{r4, lr}
 800d4f4:	db11      	blt.n	800d51a <__any_on+0x32>
 800d4f6:	dd0a      	ble.n	800d50e <__any_on+0x26>
 800d4f8:	f011 011f 	ands.w	r1, r1, #31
 800d4fc:	d007      	beq.n	800d50e <__any_on+0x26>
 800d4fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d502:	fa24 f001 	lsr.w	r0, r4, r1
 800d506:	fa00 f101 	lsl.w	r1, r0, r1
 800d50a:	428c      	cmp	r4, r1
 800d50c:	d10b      	bne.n	800d526 <__any_on+0x3e>
 800d50e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d512:	4293      	cmp	r3, r2
 800d514:	d803      	bhi.n	800d51e <__any_on+0x36>
 800d516:	2000      	movs	r0, #0
 800d518:	bd10      	pop	{r4, pc}
 800d51a:	4603      	mov	r3, r0
 800d51c:	e7f7      	b.n	800d50e <__any_on+0x26>
 800d51e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d522:	2900      	cmp	r1, #0
 800d524:	d0f5      	beq.n	800d512 <__any_on+0x2a>
 800d526:	2001      	movs	r0, #1
 800d528:	e7f6      	b.n	800d518 <__any_on+0x30>
	...

0800d52c <_strtol_l.constprop.0>:
 800d52c:	2b01      	cmp	r3, #1
 800d52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d532:	d001      	beq.n	800d538 <_strtol_l.constprop.0+0xc>
 800d534:	2b24      	cmp	r3, #36	; 0x24
 800d536:	d906      	bls.n	800d546 <_strtol_l.constprop.0+0x1a>
 800d538:	f7fe fe9c 	bl	800c274 <__errno>
 800d53c:	2316      	movs	r3, #22
 800d53e:	6003      	str	r3, [r0, #0]
 800d540:	2000      	movs	r0, #0
 800d542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d546:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d62c <_strtol_l.constprop.0+0x100>
 800d54a:	460d      	mov	r5, r1
 800d54c:	462e      	mov	r6, r5
 800d54e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d552:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d556:	f017 0708 	ands.w	r7, r7, #8
 800d55a:	d1f7      	bne.n	800d54c <_strtol_l.constprop.0+0x20>
 800d55c:	2c2d      	cmp	r4, #45	; 0x2d
 800d55e:	d132      	bne.n	800d5c6 <_strtol_l.constprop.0+0x9a>
 800d560:	782c      	ldrb	r4, [r5, #0]
 800d562:	2701      	movs	r7, #1
 800d564:	1cb5      	adds	r5, r6, #2
 800d566:	2b00      	cmp	r3, #0
 800d568:	d05b      	beq.n	800d622 <_strtol_l.constprop.0+0xf6>
 800d56a:	2b10      	cmp	r3, #16
 800d56c:	d109      	bne.n	800d582 <_strtol_l.constprop.0+0x56>
 800d56e:	2c30      	cmp	r4, #48	; 0x30
 800d570:	d107      	bne.n	800d582 <_strtol_l.constprop.0+0x56>
 800d572:	782c      	ldrb	r4, [r5, #0]
 800d574:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d578:	2c58      	cmp	r4, #88	; 0x58
 800d57a:	d14d      	bne.n	800d618 <_strtol_l.constprop.0+0xec>
 800d57c:	786c      	ldrb	r4, [r5, #1]
 800d57e:	2310      	movs	r3, #16
 800d580:	3502      	adds	r5, #2
 800d582:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d586:	f108 38ff 	add.w	r8, r8, #4294967295
 800d58a:	f04f 0e00 	mov.w	lr, #0
 800d58e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d592:	4676      	mov	r6, lr
 800d594:	fb03 8a19 	mls	sl, r3, r9, r8
 800d598:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d59c:	f1bc 0f09 	cmp.w	ip, #9
 800d5a0:	d816      	bhi.n	800d5d0 <_strtol_l.constprop.0+0xa4>
 800d5a2:	4664      	mov	r4, ip
 800d5a4:	42a3      	cmp	r3, r4
 800d5a6:	dd24      	ble.n	800d5f2 <_strtol_l.constprop.0+0xc6>
 800d5a8:	f1be 3fff 	cmp.w	lr, #4294967295
 800d5ac:	d008      	beq.n	800d5c0 <_strtol_l.constprop.0+0x94>
 800d5ae:	45b1      	cmp	r9, r6
 800d5b0:	d31c      	bcc.n	800d5ec <_strtol_l.constprop.0+0xc0>
 800d5b2:	d101      	bne.n	800d5b8 <_strtol_l.constprop.0+0x8c>
 800d5b4:	45a2      	cmp	sl, r4
 800d5b6:	db19      	blt.n	800d5ec <_strtol_l.constprop.0+0xc0>
 800d5b8:	fb06 4603 	mla	r6, r6, r3, r4
 800d5bc:	f04f 0e01 	mov.w	lr, #1
 800d5c0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d5c4:	e7e8      	b.n	800d598 <_strtol_l.constprop.0+0x6c>
 800d5c6:	2c2b      	cmp	r4, #43	; 0x2b
 800d5c8:	bf04      	itt	eq
 800d5ca:	782c      	ldrbeq	r4, [r5, #0]
 800d5cc:	1cb5      	addeq	r5, r6, #2
 800d5ce:	e7ca      	b.n	800d566 <_strtol_l.constprop.0+0x3a>
 800d5d0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d5d4:	f1bc 0f19 	cmp.w	ip, #25
 800d5d8:	d801      	bhi.n	800d5de <_strtol_l.constprop.0+0xb2>
 800d5da:	3c37      	subs	r4, #55	; 0x37
 800d5dc:	e7e2      	b.n	800d5a4 <_strtol_l.constprop.0+0x78>
 800d5de:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d5e2:	f1bc 0f19 	cmp.w	ip, #25
 800d5e6:	d804      	bhi.n	800d5f2 <_strtol_l.constprop.0+0xc6>
 800d5e8:	3c57      	subs	r4, #87	; 0x57
 800d5ea:	e7db      	b.n	800d5a4 <_strtol_l.constprop.0+0x78>
 800d5ec:	f04f 3eff 	mov.w	lr, #4294967295
 800d5f0:	e7e6      	b.n	800d5c0 <_strtol_l.constprop.0+0x94>
 800d5f2:	f1be 3fff 	cmp.w	lr, #4294967295
 800d5f6:	d105      	bne.n	800d604 <_strtol_l.constprop.0+0xd8>
 800d5f8:	2322      	movs	r3, #34	; 0x22
 800d5fa:	6003      	str	r3, [r0, #0]
 800d5fc:	4646      	mov	r6, r8
 800d5fe:	b942      	cbnz	r2, 800d612 <_strtol_l.constprop.0+0xe6>
 800d600:	4630      	mov	r0, r6
 800d602:	e79e      	b.n	800d542 <_strtol_l.constprop.0+0x16>
 800d604:	b107      	cbz	r7, 800d608 <_strtol_l.constprop.0+0xdc>
 800d606:	4276      	negs	r6, r6
 800d608:	2a00      	cmp	r2, #0
 800d60a:	d0f9      	beq.n	800d600 <_strtol_l.constprop.0+0xd4>
 800d60c:	f1be 0f00 	cmp.w	lr, #0
 800d610:	d000      	beq.n	800d614 <_strtol_l.constprop.0+0xe8>
 800d612:	1e69      	subs	r1, r5, #1
 800d614:	6011      	str	r1, [r2, #0]
 800d616:	e7f3      	b.n	800d600 <_strtol_l.constprop.0+0xd4>
 800d618:	2430      	movs	r4, #48	; 0x30
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d1b1      	bne.n	800d582 <_strtol_l.constprop.0+0x56>
 800d61e:	2308      	movs	r3, #8
 800d620:	e7af      	b.n	800d582 <_strtol_l.constprop.0+0x56>
 800d622:	2c30      	cmp	r4, #48	; 0x30
 800d624:	d0a5      	beq.n	800d572 <_strtol_l.constprop.0+0x46>
 800d626:	230a      	movs	r3, #10
 800d628:	e7ab      	b.n	800d582 <_strtol_l.constprop.0+0x56>
 800d62a:	bf00      	nop
 800d62c:	0800ff59 	.word	0x0800ff59

0800d630 <_strtol_r>:
 800d630:	f7ff bf7c 	b.w	800d52c <_strtol_l.constprop.0>

0800d634 <__ascii_wctomb>:
 800d634:	b149      	cbz	r1, 800d64a <__ascii_wctomb+0x16>
 800d636:	2aff      	cmp	r2, #255	; 0xff
 800d638:	bf85      	ittet	hi
 800d63a:	238a      	movhi	r3, #138	; 0x8a
 800d63c:	6003      	strhi	r3, [r0, #0]
 800d63e:	700a      	strbls	r2, [r1, #0]
 800d640:	f04f 30ff 	movhi.w	r0, #4294967295
 800d644:	bf98      	it	ls
 800d646:	2001      	movls	r0, #1
 800d648:	4770      	bx	lr
 800d64a:	4608      	mov	r0, r1
 800d64c:	4770      	bx	lr

0800d64e <__ssputs_r>:
 800d64e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d652:	688e      	ldr	r6, [r1, #8]
 800d654:	461f      	mov	r7, r3
 800d656:	42be      	cmp	r6, r7
 800d658:	680b      	ldr	r3, [r1, #0]
 800d65a:	4682      	mov	sl, r0
 800d65c:	460c      	mov	r4, r1
 800d65e:	4690      	mov	r8, r2
 800d660:	d82c      	bhi.n	800d6bc <__ssputs_r+0x6e>
 800d662:	898a      	ldrh	r2, [r1, #12]
 800d664:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d668:	d026      	beq.n	800d6b8 <__ssputs_r+0x6a>
 800d66a:	6965      	ldr	r5, [r4, #20]
 800d66c:	6909      	ldr	r1, [r1, #16]
 800d66e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d672:	eba3 0901 	sub.w	r9, r3, r1
 800d676:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d67a:	1c7b      	adds	r3, r7, #1
 800d67c:	444b      	add	r3, r9
 800d67e:	106d      	asrs	r5, r5, #1
 800d680:	429d      	cmp	r5, r3
 800d682:	bf38      	it	cc
 800d684:	461d      	movcc	r5, r3
 800d686:	0553      	lsls	r3, r2, #21
 800d688:	d527      	bpl.n	800d6da <__ssputs_r+0x8c>
 800d68a:	4629      	mov	r1, r5
 800d68c:	f7ff fa02 	bl	800ca94 <_malloc_r>
 800d690:	4606      	mov	r6, r0
 800d692:	b360      	cbz	r0, 800d6ee <__ssputs_r+0xa0>
 800d694:	6921      	ldr	r1, [r4, #16]
 800d696:	464a      	mov	r2, r9
 800d698:	f7fe fe19 	bl	800c2ce <memcpy>
 800d69c:	89a3      	ldrh	r3, [r4, #12]
 800d69e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d6a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6a6:	81a3      	strh	r3, [r4, #12]
 800d6a8:	6126      	str	r6, [r4, #16]
 800d6aa:	6165      	str	r5, [r4, #20]
 800d6ac:	444e      	add	r6, r9
 800d6ae:	eba5 0509 	sub.w	r5, r5, r9
 800d6b2:	6026      	str	r6, [r4, #0]
 800d6b4:	60a5      	str	r5, [r4, #8]
 800d6b6:	463e      	mov	r6, r7
 800d6b8:	42be      	cmp	r6, r7
 800d6ba:	d900      	bls.n	800d6be <__ssputs_r+0x70>
 800d6bc:	463e      	mov	r6, r7
 800d6be:	6820      	ldr	r0, [r4, #0]
 800d6c0:	4632      	mov	r2, r6
 800d6c2:	4641      	mov	r1, r8
 800d6c4:	f000 fb5a 	bl	800dd7c <memmove>
 800d6c8:	68a3      	ldr	r3, [r4, #8]
 800d6ca:	1b9b      	subs	r3, r3, r6
 800d6cc:	60a3      	str	r3, [r4, #8]
 800d6ce:	6823      	ldr	r3, [r4, #0]
 800d6d0:	4433      	add	r3, r6
 800d6d2:	6023      	str	r3, [r4, #0]
 800d6d4:	2000      	movs	r0, #0
 800d6d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6da:	462a      	mov	r2, r5
 800d6dc:	f000 fbb4 	bl	800de48 <_realloc_r>
 800d6e0:	4606      	mov	r6, r0
 800d6e2:	2800      	cmp	r0, #0
 800d6e4:	d1e0      	bne.n	800d6a8 <__ssputs_r+0x5a>
 800d6e6:	6921      	ldr	r1, [r4, #16]
 800d6e8:	4650      	mov	r0, sl
 800d6ea:	f7fe fe0f 	bl	800c30c <_free_r>
 800d6ee:	230c      	movs	r3, #12
 800d6f0:	f8ca 3000 	str.w	r3, [sl]
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6fa:	81a3      	strh	r3, [r4, #12]
 800d6fc:	f04f 30ff 	mov.w	r0, #4294967295
 800d700:	e7e9      	b.n	800d6d6 <__ssputs_r+0x88>
	...

0800d704 <_svfiprintf_r>:
 800d704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d708:	4698      	mov	r8, r3
 800d70a:	898b      	ldrh	r3, [r1, #12]
 800d70c:	061b      	lsls	r3, r3, #24
 800d70e:	b09d      	sub	sp, #116	; 0x74
 800d710:	4607      	mov	r7, r0
 800d712:	460d      	mov	r5, r1
 800d714:	4614      	mov	r4, r2
 800d716:	d50e      	bpl.n	800d736 <_svfiprintf_r+0x32>
 800d718:	690b      	ldr	r3, [r1, #16]
 800d71a:	b963      	cbnz	r3, 800d736 <_svfiprintf_r+0x32>
 800d71c:	2140      	movs	r1, #64	; 0x40
 800d71e:	f7ff f9b9 	bl	800ca94 <_malloc_r>
 800d722:	6028      	str	r0, [r5, #0]
 800d724:	6128      	str	r0, [r5, #16]
 800d726:	b920      	cbnz	r0, 800d732 <_svfiprintf_r+0x2e>
 800d728:	230c      	movs	r3, #12
 800d72a:	603b      	str	r3, [r7, #0]
 800d72c:	f04f 30ff 	mov.w	r0, #4294967295
 800d730:	e0d0      	b.n	800d8d4 <_svfiprintf_r+0x1d0>
 800d732:	2340      	movs	r3, #64	; 0x40
 800d734:	616b      	str	r3, [r5, #20]
 800d736:	2300      	movs	r3, #0
 800d738:	9309      	str	r3, [sp, #36]	; 0x24
 800d73a:	2320      	movs	r3, #32
 800d73c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d740:	f8cd 800c 	str.w	r8, [sp, #12]
 800d744:	2330      	movs	r3, #48	; 0x30
 800d746:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d8ec <_svfiprintf_r+0x1e8>
 800d74a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d74e:	f04f 0901 	mov.w	r9, #1
 800d752:	4623      	mov	r3, r4
 800d754:	469a      	mov	sl, r3
 800d756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d75a:	b10a      	cbz	r2, 800d760 <_svfiprintf_r+0x5c>
 800d75c:	2a25      	cmp	r2, #37	; 0x25
 800d75e:	d1f9      	bne.n	800d754 <_svfiprintf_r+0x50>
 800d760:	ebba 0b04 	subs.w	fp, sl, r4
 800d764:	d00b      	beq.n	800d77e <_svfiprintf_r+0x7a>
 800d766:	465b      	mov	r3, fp
 800d768:	4622      	mov	r2, r4
 800d76a:	4629      	mov	r1, r5
 800d76c:	4638      	mov	r0, r7
 800d76e:	f7ff ff6e 	bl	800d64e <__ssputs_r>
 800d772:	3001      	adds	r0, #1
 800d774:	f000 80a9 	beq.w	800d8ca <_svfiprintf_r+0x1c6>
 800d778:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d77a:	445a      	add	r2, fp
 800d77c:	9209      	str	r2, [sp, #36]	; 0x24
 800d77e:	f89a 3000 	ldrb.w	r3, [sl]
 800d782:	2b00      	cmp	r3, #0
 800d784:	f000 80a1 	beq.w	800d8ca <_svfiprintf_r+0x1c6>
 800d788:	2300      	movs	r3, #0
 800d78a:	f04f 32ff 	mov.w	r2, #4294967295
 800d78e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d792:	f10a 0a01 	add.w	sl, sl, #1
 800d796:	9304      	str	r3, [sp, #16]
 800d798:	9307      	str	r3, [sp, #28]
 800d79a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d79e:	931a      	str	r3, [sp, #104]	; 0x68
 800d7a0:	4654      	mov	r4, sl
 800d7a2:	2205      	movs	r2, #5
 800d7a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a8:	4850      	ldr	r0, [pc, #320]	; (800d8ec <_svfiprintf_r+0x1e8>)
 800d7aa:	f7f2 fd11 	bl	80001d0 <memchr>
 800d7ae:	9a04      	ldr	r2, [sp, #16]
 800d7b0:	b9d8      	cbnz	r0, 800d7ea <_svfiprintf_r+0xe6>
 800d7b2:	06d0      	lsls	r0, r2, #27
 800d7b4:	bf44      	itt	mi
 800d7b6:	2320      	movmi	r3, #32
 800d7b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7bc:	0711      	lsls	r1, r2, #28
 800d7be:	bf44      	itt	mi
 800d7c0:	232b      	movmi	r3, #43	; 0x2b
 800d7c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d7c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d7ca:	2b2a      	cmp	r3, #42	; 0x2a
 800d7cc:	d015      	beq.n	800d7fa <_svfiprintf_r+0xf6>
 800d7ce:	9a07      	ldr	r2, [sp, #28]
 800d7d0:	4654      	mov	r4, sl
 800d7d2:	2000      	movs	r0, #0
 800d7d4:	f04f 0c0a 	mov.w	ip, #10
 800d7d8:	4621      	mov	r1, r4
 800d7da:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7de:	3b30      	subs	r3, #48	; 0x30
 800d7e0:	2b09      	cmp	r3, #9
 800d7e2:	d94d      	bls.n	800d880 <_svfiprintf_r+0x17c>
 800d7e4:	b1b0      	cbz	r0, 800d814 <_svfiprintf_r+0x110>
 800d7e6:	9207      	str	r2, [sp, #28]
 800d7e8:	e014      	b.n	800d814 <_svfiprintf_r+0x110>
 800d7ea:	eba0 0308 	sub.w	r3, r0, r8
 800d7ee:	fa09 f303 	lsl.w	r3, r9, r3
 800d7f2:	4313      	orrs	r3, r2
 800d7f4:	9304      	str	r3, [sp, #16]
 800d7f6:	46a2      	mov	sl, r4
 800d7f8:	e7d2      	b.n	800d7a0 <_svfiprintf_r+0x9c>
 800d7fa:	9b03      	ldr	r3, [sp, #12]
 800d7fc:	1d19      	adds	r1, r3, #4
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	9103      	str	r1, [sp, #12]
 800d802:	2b00      	cmp	r3, #0
 800d804:	bfbb      	ittet	lt
 800d806:	425b      	neglt	r3, r3
 800d808:	f042 0202 	orrlt.w	r2, r2, #2
 800d80c:	9307      	strge	r3, [sp, #28]
 800d80e:	9307      	strlt	r3, [sp, #28]
 800d810:	bfb8      	it	lt
 800d812:	9204      	strlt	r2, [sp, #16]
 800d814:	7823      	ldrb	r3, [r4, #0]
 800d816:	2b2e      	cmp	r3, #46	; 0x2e
 800d818:	d10c      	bne.n	800d834 <_svfiprintf_r+0x130>
 800d81a:	7863      	ldrb	r3, [r4, #1]
 800d81c:	2b2a      	cmp	r3, #42	; 0x2a
 800d81e:	d134      	bne.n	800d88a <_svfiprintf_r+0x186>
 800d820:	9b03      	ldr	r3, [sp, #12]
 800d822:	1d1a      	adds	r2, r3, #4
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	9203      	str	r2, [sp, #12]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	bfb8      	it	lt
 800d82c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d830:	3402      	adds	r4, #2
 800d832:	9305      	str	r3, [sp, #20]
 800d834:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d8fc <_svfiprintf_r+0x1f8>
 800d838:	7821      	ldrb	r1, [r4, #0]
 800d83a:	2203      	movs	r2, #3
 800d83c:	4650      	mov	r0, sl
 800d83e:	f7f2 fcc7 	bl	80001d0 <memchr>
 800d842:	b138      	cbz	r0, 800d854 <_svfiprintf_r+0x150>
 800d844:	9b04      	ldr	r3, [sp, #16]
 800d846:	eba0 000a 	sub.w	r0, r0, sl
 800d84a:	2240      	movs	r2, #64	; 0x40
 800d84c:	4082      	lsls	r2, r0
 800d84e:	4313      	orrs	r3, r2
 800d850:	3401      	adds	r4, #1
 800d852:	9304      	str	r3, [sp, #16]
 800d854:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d858:	4825      	ldr	r0, [pc, #148]	; (800d8f0 <_svfiprintf_r+0x1ec>)
 800d85a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d85e:	2206      	movs	r2, #6
 800d860:	f7f2 fcb6 	bl	80001d0 <memchr>
 800d864:	2800      	cmp	r0, #0
 800d866:	d038      	beq.n	800d8da <_svfiprintf_r+0x1d6>
 800d868:	4b22      	ldr	r3, [pc, #136]	; (800d8f4 <_svfiprintf_r+0x1f0>)
 800d86a:	bb1b      	cbnz	r3, 800d8b4 <_svfiprintf_r+0x1b0>
 800d86c:	9b03      	ldr	r3, [sp, #12]
 800d86e:	3307      	adds	r3, #7
 800d870:	f023 0307 	bic.w	r3, r3, #7
 800d874:	3308      	adds	r3, #8
 800d876:	9303      	str	r3, [sp, #12]
 800d878:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d87a:	4433      	add	r3, r6
 800d87c:	9309      	str	r3, [sp, #36]	; 0x24
 800d87e:	e768      	b.n	800d752 <_svfiprintf_r+0x4e>
 800d880:	fb0c 3202 	mla	r2, ip, r2, r3
 800d884:	460c      	mov	r4, r1
 800d886:	2001      	movs	r0, #1
 800d888:	e7a6      	b.n	800d7d8 <_svfiprintf_r+0xd4>
 800d88a:	2300      	movs	r3, #0
 800d88c:	3401      	adds	r4, #1
 800d88e:	9305      	str	r3, [sp, #20]
 800d890:	4619      	mov	r1, r3
 800d892:	f04f 0c0a 	mov.w	ip, #10
 800d896:	4620      	mov	r0, r4
 800d898:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d89c:	3a30      	subs	r2, #48	; 0x30
 800d89e:	2a09      	cmp	r2, #9
 800d8a0:	d903      	bls.n	800d8aa <_svfiprintf_r+0x1a6>
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d0c6      	beq.n	800d834 <_svfiprintf_r+0x130>
 800d8a6:	9105      	str	r1, [sp, #20]
 800d8a8:	e7c4      	b.n	800d834 <_svfiprintf_r+0x130>
 800d8aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d8ae:	4604      	mov	r4, r0
 800d8b0:	2301      	movs	r3, #1
 800d8b2:	e7f0      	b.n	800d896 <_svfiprintf_r+0x192>
 800d8b4:	ab03      	add	r3, sp, #12
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	462a      	mov	r2, r5
 800d8ba:	4b0f      	ldr	r3, [pc, #60]	; (800d8f8 <_svfiprintf_r+0x1f4>)
 800d8bc:	a904      	add	r1, sp, #16
 800d8be:	4638      	mov	r0, r7
 800d8c0:	f3af 8000 	nop.w
 800d8c4:	1c42      	adds	r2, r0, #1
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	d1d6      	bne.n	800d878 <_svfiprintf_r+0x174>
 800d8ca:	89ab      	ldrh	r3, [r5, #12]
 800d8cc:	065b      	lsls	r3, r3, #25
 800d8ce:	f53f af2d 	bmi.w	800d72c <_svfiprintf_r+0x28>
 800d8d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8d4:	b01d      	add	sp, #116	; 0x74
 800d8d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8da:	ab03      	add	r3, sp, #12
 800d8dc:	9300      	str	r3, [sp, #0]
 800d8de:	462a      	mov	r2, r5
 800d8e0:	4b05      	ldr	r3, [pc, #20]	; (800d8f8 <_svfiprintf_r+0x1f4>)
 800d8e2:	a904      	add	r1, sp, #16
 800d8e4:	4638      	mov	r0, r7
 800d8e6:	f000 f879 	bl	800d9dc <_printf_i>
 800d8ea:	e7eb      	b.n	800d8c4 <_svfiprintf_r+0x1c0>
 800d8ec:	08010244 	.word	0x08010244
 800d8f0:	0801024e 	.word	0x0801024e
 800d8f4:	00000000 	.word	0x00000000
 800d8f8:	0800d64f 	.word	0x0800d64f
 800d8fc:	0801024a 	.word	0x0801024a

0800d900 <_printf_common>:
 800d900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d904:	4616      	mov	r6, r2
 800d906:	4699      	mov	r9, r3
 800d908:	688a      	ldr	r2, [r1, #8]
 800d90a:	690b      	ldr	r3, [r1, #16]
 800d90c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d910:	4293      	cmp	r3, r2
 800d912:	bfb8      	it	lt
 800d914:	4613      	movlt	r3, r2
 800d916:	6033      	str	r3, [r6, #0]
 800d918:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d91c:	4607      	mov	r7, r0
 800d91e:	460c      	mov	r4, r1
 800d920:	b10a      	cbz	r2, 800d926 <_printf_common+0x26>
 800d922:	3301      	adds	r3, #1
 800d924:	6033      	str	r3, [r6, #0]
 800d926:	6823      	ldr	r3, [r4, #0]
 800d928:	0699      	lsls	r1, r3, #26
 800d92a:	bf42      	ittt	mi
 800d92c:	6833      	ldrmi	r3, [r6, #0]
 800d92e:	3302      	addmi	r3, #2
 800d930:	6033      	strmi	r3, [r6, #0]
 800d932:	6825      	ldr	r5, [r4, #0]
 800d934:	f015 0506 	ands.w	r5, r5, #6
 800d938:	d106      	bne.n	800d948 <_printf_common+0x48>
 800d93a:	f104 0a19 	add.w	sl, r4, #25
 800d93e:	68e3      	ldr	r3, [r4, #12]
 800d940:	6832      	ldr	r2, [r6, #0]
 800d942:	1a9b      	subs	r3, r3, r2
 800d944:	42ab      	cmp	r3, r5
 800d946:	dc26      	bgt.n	800d996 <_printf_common+0x96>
 800d948:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d94c:	1e13      	subs	r3, r2, #0
 800d94e:	6822      	ldr	r2, [r4, #0]
 800d950:	bf18      	it	ne
 800d952:	2301      	movne	r3, #1
 800d954:	0692      	lsls	r2, r2, #26
 800d956:	d42b      	bmi.n	800d9b0 <_printf_common+0xb0>
 800d958:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d95c:	4649      	mov	r1, r9
 800d95e:	4638      	mov	r0, r7
 800d960:	47c0      	blx	r8
 800d962:	3001      	adds	r0, #1
 800d964:	d01e      	beq.n	800d9a4 <_printf_common+0xa4>
 800d966:	6823      	ldr	r3, [r4, #0]
 800d968:	6922      	ldr	r2, [r4, #16]
 800d96a:	f003 0306 	and.w	r3, r3, #6
 800d96e:	2b04      	cmp	r3, #4
 800d970:	bf02      	ittt	eq
 800d972:	68e5      	ldreq	r5, [r4, #12]
 800d974:	6833      	ldreq	r3, [r6, #0]
 800d976:	1aed      	subeq	r5, r5, r3
 800d978:	68a3      	ldr	r3, [r4, #8]
 800d97a:	bf0c      	ite	eq
 800d97c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d980:	2500      	movne	r5, #0
 800d982:	4293      	cmp	r3, r2
 800d984:	bfc4      	itt	gt
 800d986:	1a9b      	subgt	r3, r3, r2
 800d988:	18ed      	addgt	r5, r5, r3
 800d98a:	2600      	movs	r6, #0
 800d98c:	341a      	adds	r4, #26
 800d98e:	42b5      	cmp	r5, r6
 800d990:	d11a      	bne.n	800d9c8 <_printf_common+0xc8>
 800d992:	2000      	movs	r0, #0
 800d994:	e008      	b.n	800d9a8 <_printf_common+0xa8>
 800d996:	2301      	movs	r3, #1
 800d998:	4652      	mov	r2, sl
 800d99a:	4649      	mov	r1, r9
 800d99c:	4638      	mov	r0, r7
 800d99e:	47c0      	blx	r8
 800d9a0:	3001      	adds	r0, #1
 800d9a2:	d103      	bne.n	800d9ac <_printf_common+0xac>
 800d9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800d9a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d9ac:	3501      	adds	r5, #1
 800d9ae:	e7c6      	b.n	800d93e <_printf_common+0x3e>
 800d9b0:	18e1      	adds	r1, r4, r3
 800d9b2:	1c5a      	adds	r2, r3, #1
 800d9b4:	2030      	movs	r0, #48	; 0x30
 800d9b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d9ba:	4422      	add	r2, r4
 800d9bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d9c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d9c4:	3302      	adds	r3, #2
 800d9c6:	e7c7      	b.n	800d958 <_printf_common+0x58>
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	4649      	mov	r1, r9
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	47c0      	blx	r8
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	d0e6      	beq.n	800d9a4 <_printf_common+0xa4>
 800d9d6:	3601      	adds	r6, #1
 800d9d8:	e7d9      	b.n	800d98e <_printf_common+0x8e>
	...

0800d9dc <_printf_i>:
 800d9dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d9e0:	7e0f      	ldrb	r7, [r1, #24]
 800d9e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d9e4:	2f78      	cmp	r7, #120	; 0x78
 800d9e6:	4691      	mov	r9, r2
 800d9e8:	4680      	mov	r8, r0
 800d9ea:	460c      	mov	r4, r1
 800d9ec:	469a      	mov	sl, r3
 800d9ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d9f2:	d807      	bhi.n	800da04 <_printf_i+0x28>
 800d9f4:	2f62      	cmp	r7, #98	; 0x62
 800d9f6:	d80a      	bhi.n	800da0e <_printf_i+0x32>
 800d9f8:	2f00      	cmp	r7, #0
 800d9fa:	f000 80d4 	beq.w	800dba6 <_printf_i+0x1ca>
 800d9fe:	2f58      	cmp	r7, #88	; 0x58
 800da00:	f000 80c0 	beq.w	800db84 <_printf_i+0x1a8>
 800da04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800da0c:	e03a      	b.n	800da84 <_printf_i+0xa8>
 800da0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800da12:	2b15      	cmp	r3, #21
 800da14:	d8f6      	bhi.n	800da04 <_printf_i+0x28>
 800da16:	a101      	add	r1, pc, #4	; (adr r1, 800da1c <_printf_i+0x40>)
 800da18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da1c:	0800da75 	.word	0x0800da75
 800da20:	0800da89 	.word	0x0800da89
 800da24:	0800da05 	.word	0x0800da05
 800da28:	0800da05 	.word	0x0800da05
 800da2c:	0800da05 	.word	0x0800da05
 800da30:	0800da05 	.word	0x0800da05
 800da34:	0800da89 	.word	0x0800da89
 800da38:	0800da05 	.word	0x0800da05
 800da3c:	0800da05 	.word	0x0800da05
 800da40:	0800da05 	.word	0x0800da05
 800da44:	0800da05 	.word	0x0800da05
 800da48:	0800db8d 	.word	0x0800db8d
 800da4c:	0800dab5 	.word	0x0800dab5
 800da50:	0800db47 	.word	0x0800db47
 800da54:	0800da05 	.word	0x0800da05
 800da58:	0800da05 	.word	0x0800da05
 800da5c:	0800dbaf 	.word	0x0800dbaf
 800da60:	0800da05 	.word	0x0800da05
 800da64:	0800dab5 	.word	0x0800dab5
 800da68:	0800da05 	.word	0x0800da05
 800da6c:	0800da05 	.word	0x0800da05
 800da70:	0800db4f 	.word	0x0800db4f
 800da74:	682b      	ldr	r3, [r5, #0]
 800da76:	1d1a      	adds	r2, r3, #4
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	602a      	str	r2, [r5, #0]
 800da7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800da80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800da84:	2301      	movs	r3, #1
 800da86:	e09f      	b.n	800dbc8 <_printf_i+0x1ec>
 800da88:	6820      	ldr	r0, [r4, #0]
 800da8a:	682b      	ldr	r3, [r5, #0]
 800da8c:	0607      	lsls	r7, r0, #24
 800da8e:	f103 0104 	add.w	r1, r3, #4
 800da92:	6029      	str	r1, [r5, #0]
 800da94:	d501      	bpl.n	800da9a <_printf_i+0xbe>
 800da96:	681e      	ldr	r6, [r3, #0]
 800da98:	e003      	b.n	800daa2 <_printf_i+0xc6>
 800da9a:	0646      	lsls	r6, r0, #25
 800da9c:	d5fb      	bpl.n	800da96 <_printf_i+0xba>
 800da9e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800daa2:	2e00      	cmp	r6, #0
 800daa4:	da03      	bge.n	800daae <_printf_i+0xd2>
 800daa6:	232d      	movs	r3, #45	; 0x2d
 800daa8:	4276      	negs	r6, r6
 800daaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800daae:	485a      	ldr	r0, [pc, #360]	; (800dc18 <_printf_i+0x23c>)
 800dab0:	230a      	movs	r3, #10
 800dab2:	e012      	b.n	800dada <_printf_i+0xfe>
 800dab4:	682b      	ldr	r3, [r5, #0]
 800dab6:	6820      	ldr	r0, [r4, #0]
 800dab8:	1d19      	adds	r1, r3, #4
 800daba:	6029      	str	r1, [r5, #0]
 800dabc:	0605      	lsls	r5, r0, #24
 800dabe:	d501      	bpl.n	800dac4 <_printf_i+0xe8>
 800dac0:	681e      	ldr	r6, [r3, #0]
 800dac2:	e002      	b.n	800daca <_printf_i+0xee>
 800dac4:	0641      	lsls	r1, r0, #25
 800dac6:	d5fb      	bpl.n	800dac0 <_printf_i+0xe4>
 800dac8:	881e      	ldrh	r6, [r3, #0]
 800daca:	4853      	ldr	r0, [pc, #332]	; (800dc18 <_printf_i+0x23c>)
 800dacc:	2f6f      	cmp	r7, #111	; 0x6f
 800dace:	bf0c      	ite	eq
 800dad0:	2308      	moveq	r3, #8
 800dad2:	230a      	movne	r3, #10
 800dad4:	2100      	movs	r1, #0
 800dad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800dada:	6865      	ldr	r5, [r4, #4]
 800dadc:	60a5      	str	r5, [r4, #8]
 800dade:	2d00      	cmp	r5, #0
 800dae0:	bfa2      	ittt	ge
 800dae2:	6821      	ldrge	r1, [r4, #0]
 800dae4:	f021 0104 	bicge.w	r1, r1, #4
 800dae8:	6021      	strge	r1, [r4, #0]
 800daea:	b90e      	cbnz	r6, 800daf0 <_printf_i+0x114>
 800daec:	2d00      	cmp	r5, #0
 800daee:	d04b      	beq.n	800db88 <_printf_i+0x1ac>
 800daf0:	4615      	mov	r5, r2
 800daf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800daf6:	fb03 6711 	mls	r7, r3, r1, r6
 800dafa:	5dc7      	ldrb	r7, [r0, r7]
 800dafc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800db00:	4637      	mov	r7, r6
 800db02:	42bb      	cmp	r3, r7
 800db04:	460e      	mov	r6, r1
 800db06:	d9f4      	bls.n	800daf2 <_printf_i+0x116>
 800db08:	2b08      	cmp	r3, #8
 800db0a:	d10b      	bne.n	800db24 <_printf_i+0x148>
 800db0c:	6823      	ldr	r3, [r4, #0]
 800db0e:	07de      	lsls	r6, r3, #31
 800db10:	d508      	bpl.n	800db24 <_printf_i+0x148>
 800db12:	6923      	ldr	r3, [r4, #16]
 800db14:	6861      	ldr	r1, [r4, #4]
 800db16:	4299      	cmp	r1, r3
 800db18:	bfde      	ittt	le
 800db1a:	2330      	movle	r3, #48	; 0x30
 800db1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800db20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800db24:	1b52      	subs	r2, r2, r5
 800db26:	6122      	str	r2, [r4, #16]
 800db28:	f8cd a000 	str.w	sl, [sp]
 800db2c:	464b      	mov	r3, r9
 800db2e:	aa03      	add	r2, sp, #12
 800db30:	4621      	mov	r1, r4
 800db32:	4640      	mov	r0, r8
 800db34:	f7ff fee4 	bl	800d900 <_printf_common>
 800db38:	3001      	adds	r0, #1
 800db3a:	d14a      	bne.n	800dbd2 <_printf_i+0x1f6>
 800db3c:	f04f 30ff 	mov.w	r0, #4294967295
 800db40:	b004      	add	sp, #16
 800db42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db46:	6823      	ldr	r3, [r4, #0]
 800db48:	f043 0320 	orr.w	r3, r3, #32
 800db4c:	6023      	str	r3, [r4, #0]
 800db4e:	4833      	ldr	r0, [pc, #204]	; (800dc1c <_printf_i+0x240>)
 800db50:	2778      	movs	r7, #120	; 0x78
 800db52:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800db56:	6823      	ldr	r3, [r4, #0]
 800db58:	6829      	ldr	r1, [r5, #0]
 800db5a:	061f      	lsls	r7, r3, #24
 800db5c:	f851 6b04 	ldr.w	r6, [r1], #4
 800db60:	d402      	bmi.n	800db68 <_printf_i+0x18c>
 800db62:	065f      	lsls	r7, r3, #25
 800db64:	bf48      	it	mi
 800db66:	b2b6      	uxthmi	r6, r6
 800db68:	07df      	lsls	r7, r3, #31
 800db6a:	bf48      	it	mi
 800db6c:	f043 0320 	orrmi.w	r3, r3, #32
 800db70:	6029      	str	r1, [r5, #0]
 800db72:	bf48      	it	mi
 800db74:	6023      	strmi	r3, [r4, #0]
 800db76:	b91e      	cbnz	r6, 800db80 <_printf_i+0x1a4>
 800db78:	6823      	ldr	r3, [r4, #0]
 800db7a:	f023 0320 	bic.w	r3, r3, #32
 800db7e:	6023      	str	r3, [r4, #0]
 800db80:	2310      	movs	r3, #16
 800db82:	e7a7      	b.n	800dad4 <_printf_i+0xf8>
 800db84:	4824      	ldr	r0, [pc, #144]	; (800dc18 <_printf_i+0x23c>)
 800db86:	e7e4      	b.n	800db52 <_printf_i+0x176>
 800db88:	4615      	mov	r5, r2
 800db8a:	e7bd      	b.n	800db08 <_printf_i+0x12c>
 800db8c:	682b      	ldr	r3, [r5, #0]
 800db8e:	6826      	ldr	r6, [r4, #0]
 800db90:	6961      	ldr	r1, [r4, #20]
 800db92:	1d18      	adds	r0, r3, #4
 800db94:	6028      	str	r0, [r5, #0]
 800db96:	0635      	lsls	r5, r6, #24
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	d501      	bpl.n	800dba0 <_printf_i+0x1c4>
 800db9c:	6019      	str	r1, [r3, #0]
 800db9e:	e002      	b.n	800dba6 <_printf_i+0x1ca>
 800dba0:	0670      	lsls	r0, r6, #25
 800dba2:	d5fb      	bpl.n	800db9c <_printf_i+0x1c0>
 800dba4:	8019      	strh	r1, [r3, #0]
 800dba6:	2300      	movs	r3, #0
 800dba8:	6123      	str	r3, [r4, #16]
 800dbaa:	4615      	mov	r5, r2
 800dbac:	e7bc      	b.n	800db28 <_printf_i+0x14c>
 800dbae:	682b      	ldr	r3, [r5, #0]
 800dbb0:	1d1a      	adds	r2, r3, #4
 800dbb2:	602a      	str	r2, [r5, #0]
 800dbb4:	681d      	ldr	r5, [r3, #0]
 800dbb6:	6862      	ldr	r2, [r4, #4]
 800dbb8:	2100      	movs	r1, #0
 800dbba:	4628      	mov	r0, r5
 800dbbc:	f7f2 fb08 	bl	80001d0 <memchr>
 800dbc0:	b108      	cbz	r0, 800dbc6 <_printf_i+0x1ea>
 800dbc2:	1b40      	subs	r0, r0, r5
 800dbc4:	6060      	str	r0, [r4, #4]
 800dbc6:	6863      	ldr	r3, [r4, #4]
 800dbc8:	6123      	str	r3, [r4, #16]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dbd0:	e7aa      	b.n	800db28 <_printf_i+0x14c>
 800dbd2:	6923      	ldr	r3, [r4, #16]
 800dbd4:	462a      	mov	r2, r5
 800dbd6:	4649      	mov	r1, r9
 800dbd8:	4640      	mov	r0, r8
 800dbda:	47d0      	blx	sl
 800dbdc:	3001      	adds	r0, #1
 800dbde:	d0ad      	beq.n	800db3c <_printf_i+0x160>
 800dbe0:	6823      	ldr	r3, [r4, #0]
 800dbe2:	079b      	lsls	r3, r3, #30
 800dbe4:	d413      	bmi.n	800dc0e <_printf_i+0x232>
 800dbe6:	68e0      	ldr	r0, [r4, #12]
 800dbe8:	9b03      	ldr	r3, [sp, #12]
 800dbea:	4298      	cmp	r0, r3
 800dbec:	bfb8      	it	lt
 800dbee:	4618      	movlt	r0, r3
 800dbf0:	e7a6      	b.n	800db40 <_printf_i+0x164>
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	4632      	mov	r2, r6
 800dbf6:	4649      	mov	r1, r9
 800dbf8:	4640      	mov	r0, r8
 800dbfa:	47d0      	blx	sl
 800dbfc:	3001      	adds	r0, #1
 800dbfe:	d09d      	beq.n	800db3c <_printf_i+0x160>
 800dc00:	3501      	adds	r5, #1
 800dc02:	68e3      	ldr	r3, [r4, #12]
 800dc04:	9903      	ldr	r1, [sp, #12]
 800dc06:	1a5b      	subs	r3, r3, r1
 800dc08:	42ab      	cmp	r3, r5
 800dc0a:	dcf2      	bgt.n	800dbf2 <_printf_i+0x216>
 800dc0c:	e7eb      	b.n	800dbe6 <_printf_i+0x20a>
 800dc0e:	2500      	movs	r5, #0
 800dc10:	f104 0619 	add.w	r6, r4, #25
 800dc14:	e7f5      	b.n	800dc02 <_printf_i+0x226>
 800dc16:	bf00      	nop
 800dc18:	08010255 	.word	0x08010255
 800dc1c:	08010266 	.word	0x08010266

0800dc20 <__sflush_r>:
 800dc20:	898a      	ldrh	r2, [r1, #12]
 800dc22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc26:	4605      	mov	r5, r0
 800dc28:	0710      	lsls	r0, r2, #28
 800dc2a:	460c      	mov	r4, r1
 800dc2c:	d458      	bmi.n	800dce0 <__sflush_r+0xc0>
 800dc2e:	684b      	ldr	r3, [r1, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	dc05      	bgt.n	800dc40 <__sflush_r+0x20>
 800dc34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	dc02      	bgt.n	800dc40 <__sflush_r+0x20>
 800dc3a:	2000      	movs	r0, #0
 800dc3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc42:	2e00      	cmp	r6, #0
 800dc44:	d0f9      	beq.n	800dc3a <__sflush_r+0x1a>
 800dc46:	2300      	movs	r3, #0
 800dc48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dc4c:	682f      	ldr	r7, [r5, #0]
 800dc4e:	6a21      	ldr	r1, [r4, #32]
 800dc50:	602b      	str	r3, [r5, #0]
 800dc52:	d032      	beq.n	800dcba <__sflush_r+0x9a>
 800dc54:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800dc56:	89a3      	ldrh	r3, [r4, #12]
 800dc58:	075a      	lsls	r2, r3, #29
 800dc5a:	d505      	bpl.n	800dc68 <__sflush_r+0x48>
 800dc5c:	6863      	ldr	r3, [r4, #4]
 800dc5e:	1ac0      	subs	r0, r0, r3
 800dc60:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800dc62:	b10b      	cbz	r3, 800dc68 <__sflush_r+0x48>
 800dc64:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800dc66:	1ac0      	subs	r0, r0, r3
 800dc68:	2300      	movs	r3, #0
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dc6e:	6a21      	ldr	r1, [r4, #32]
 800dc70:	4628      	mov	r0, r5
 800dc72:	47b0      	blx	r6
 800dc74:	1c43      	adds	r3, r0, #1
 800dc76:	89a3      	ldrh	r3, [r4, #12]
 800dc78:	d106      	bne.n	800dc88 <__sflush_r+0x68>
 800dc7a:	6829      	ldr	r1, [r5, #0]
 800dc7c:	291d      	cmp	r1, #29
 800dc7e:	d82b      	bhi.n	800dcd8 <__sflush_r+0xb8>
 800dc80:	4a29      	ldr	r2, [pc, #164]	; (800dd28 <__sflush_r+0x108>)
 800dc82:	410a      	asrs	r2, r1
 800dc84:	07d6      	lsls	r6, r2, #31
 800dc86:	d427      	bmi.n	800dcd8 <__sflush_r+0xb8>
 800dc88:	2200      	movs	r2, #0
 800dc8a:	6062      	str	r2, [r4, #4]
 800dc8c:	04d9      	lsls	r1, r3, #19
 800dc8e:	6922      	ldr	r2, [r4, #16]
 800dc90:	6022      	str	r2, [r4, #0]
 800dc92:	d504      	bpl.n	800dc9e <__sflush_r+0x7e>
 800dc94:	1c42      	adds	r2, r0, #1
 800dc96:	d101      	bne.n	800dc9c <__sflush_r+0x7c>
 800dc98:	682b      	ldr	r3, [r5, #0]
 800dc9a:	b903      	cbnz	r3, 800dc9e <__sflush_r+0x7e>
 800dc9c:	6560      	str	r0, [r4, #84]	; 0x54
 800dc9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dca0:	602f      	str	r7, [r5, #0]
 800dca2:	2900      	cmp	r1, #0
 800dca4:	d0c9      	beq.n	800dc3a <__sflush_r+0x1a>
 800dca6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800dcaa:	4299      	cmp	r1, r3
 800dcac:	d002      	beq.n	800dcb4 <__sflush_r+0x94>
 800dcae:	4628      	mov	r0, r5
 800dcb0:	f7fe fb2c 	bl	800c30c <_free_r>
 800dcb4:	2000      	movs	r0, #0
 800dcb6:	6360      	str	r0, [r4, #52]	; 0x34
 800dcb8:	e7c0      	b.n	800dc3c <__sflush_r+0x1c>
 800dcba:	2301      	movs	r3, #1
 800dcbc:	4628      	mov	r0, r5
 800dcbe:	47b0      	blx	r6
 800dcc0:	1c41      	adds	r1, r0, #1
 800dcc2:	d1c8      	bne.n	800dc56 <__sflush_r+0x36>
 800dcc4:	682b      	ldr	r3, [r5, #0]
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d0c5      	beq.n	800dc56 <__sflush_r+0x36>
 800dcca:	2b1d      	cmp	r3, #29
 800dccc:	d001      	beq.n	800dcd2 <__sflush_r+0xb2>
 800dcce:	2b16      	cmp	r3, #22
 800dcd0:	d101      	bne.n	800dcd6 <__sflush_r+0xb6>
 800dcd2:	602f      	str	r7, [r5, #0]
 800dcd4:	e7b1      	b.n	800dc3a <__sflush_r+0x1a>
 800dcd6:	89a3      	ldrh	r3, [r4, #12]
 800dcd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dcdc:	81a3      	strh	r3, [r4, #12]
 800dcde:	e7ad      	b.n	800dc3c <__sflush_r+0x1c>
 800dce0:	690f      	ldr	r7, [r1, #16]
 800dce2:	2f00      	cmp	r7, #0
 800dce4:	d0a9      	beq.n	800dc3a <__sflush_r+0x1a>
 800dce6:	0793      	lsls	r3, r2, #30
 800dce8:	680e      	ldr	r6, [r1, #0]
 800dcea:	bf08      	it	eq
 800dcec:	694b      	ldreq	r3, [r1, #20]
 800dcee:	600f      	str	r7, [r1, #0]
 800dcf0:	bf18      	it	ne
 800dcf2:	2300      	movne	r3, #0
 800dcf4:	eba6 0807 	sub.w	r8, r6, r7
 800dcf8:	608b      	str	r3, [r1, #8]
 800dcfa:	f1b8 0f00 	cmp.w	r8, #0
 800dcfe:	dd9c      	ble.n	800dc3a <__sflush_r+0x1a>
 800dd00:	6a21      	ldr	r1, [r4, #32]
 800dd02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dd04:	4643      	mov	r3, r8
 800dd06:	463a      	mov	r2, r7
 800dd08:	4628      	mov	r0, r5
 800dd0a:	47b0      	blx	r6
 800dd0c:	2800      	cmp	r0, #0
 800dd0e:	dc06      	bgt.n	800dd1e <__sflush_r+0xfe>
 800dd10:	89a3      	ldrh	r3, [r4, #12]
 800dd12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dd16:	81a3      	strh	r3, [r4, #12]
 800dd18:	f04f 30ff 	mov.w	r0, #4294967295
 800dd1c:	e78e      	b.n	800dc3c <__sflush_r+0x1c>
 800dd1e:	4407      	add	r7, r0
 800dd20:	eba8 0800 	sub.w	r8, r8, r0
 800dd24:	e7e9      	b.n	800dcfa <__sflush_r+0xda>
 800dd26:	bf00      	nop
 800dd28:	dfbffffe 	.word	0xdfbffffe

0800dd2c <_fflush_r>:
 800dd2c:	b538      	push	{r3, r4, r5, lr}
 800dd2e:	690b      	ldr	r3, [r1, #16]
 800dd30:	4605      	mov	r5, r0
 800dd32:	460c      	mov	r4, r1
 800dd34:	b913      	cbnz	r3, 800dd3c <_fflush_r+0x10>
 800dd36:	2500      	movs	r5, #0
 800dd38:	4628      	mov	r0, r5
 800dd3a:	bd38      	pop	{r3, r4, r5, pc}
 800dd3c:	b118      	cbz	r0, 800dd46 <_fflush_r+0x1a>
 800dd3e:	6a03      	ldr	r3, [r0, #32]
 800dd40:	b90b      	cbnz	r3, 800dd46 <_fflush_r+0x1a>
 800dd42:	f7fe f99d 	bl	800c080 <__sinit>
 800dd46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dd4a:	2b00      	cmp	r3, #0
 800dd4c:	d0f3      	beq.n	800dd36 <_fflush_r+0xa>
 800dd4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dd50:	07d0      	lsls	r0, r2, #31
 800dd52:	d404      	bmi.n	800dd5e <_fflush_r+0x32>
 800dd54:	0599      	lsls	r1, r3, #22
 800dd56:	d402      	bmi.n	800dd5e <_fflush_r+0x32>
 800dd58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd5a:	f7fe fab6 	bl	800c2ca <__retarget_lock_acquire_recursive>
 800dd5e:	4628      	mov	r0, r5
 800dd60:	4621      	mov	r1, r4
 800dd62:	f7ff ff5d 	bl	800dc20 <__sflush_r>
 800dd66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dd68:	07da      	lsls	r2, r3, #31
 800dd6a:	4605      	mov	r5, r0
 800dd6c:	d4e4      	bmi.n	800dd38 <_fflush_r+0xc>
 800dd6e:	89a3      	ldrh	r3, [r4, #12]
 800dd70:	059b      	lsls	r3, r3, #22
 800dd72:	d4e1      	bmi.n	800dd38 <_fflush_r+0xc>
 800dd74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dd76:	f7fe faa9 	bl	800c2cc <__retarget_lock_release_recursive>
 800dd7a:	e7dd      	b.n	800dd38 <_fflush_r+0xc>

0800dd7c <memmove>:
 800dd7c:	4288      	cmp	r0, r1
 800dd7e:	b510      	push	{r4, lr}
 800dd80:	eb01 0402 	add.w	r4, r1, r2
 800dd84:	d902      	bls.n	800dd8c <memmove+0x10>
 800dd86:	4284      	cmp	r4, r0
 800dd88:	4623      	mov	r3, r4
 800dd8a:	d807      	bhi.n	800dd9c <memmove+0x20>
 800dd8c:	1e43      	subs	r3, r0, #1
 800dd8e:	42a1      	cmp	r1, r4
 800dd90:	d008      	beq.n	800dda4 <memmove+0x28>
 800dd92:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd96:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd9a:	e7f8      	b.n	800dd8e <memmove+0x12>
 800dd9c:	4402      	add	r2, r0
 800dd9e:	4601      	mov	r1, r0
 800dda0:	428a      	cmp	r2, r1
 800dda2:	d100      	bne.n	800dda6 <memmove+0x2a>
 800dda4:	bd10      	pop	{r4, pc}
 800dda6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ddaa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ddae:	e7f7      	b.n	800dda0 <memmove+0x24>

0800ddb0 <_sbrk_r>:
 800ddb0:	b538      	push	{r3, r4, r5, lr}
 800ddb2:	4d06      	ldr	r5, [pc, #24]	; (800ddcc <_sbrk_r+0x1c>)
 800ddb4:	2300      	movs	r3, #0
 800ddb6:	4604      	mov	r4, r0
 800ddb8:	4608      	mov	r0, r1
 800ddba:	602b      	str	r3, [r5, #0]
 800ddbc:	f7f7 f9b2 	bl	8005124 <_sbrk>
 800ddc0:	1c43      	adds	r3, r0, #1
 800ddc2:	d102      	bne.n	800ddca <_sbrk_r+0x1a>
 800ddc4:	682b      	ldr	r3, [r5, #0]
 800ddc6:	b103      	cbz	r3, 800ddca <_sbrk_r+0x1a>
 800ddc8:	6023      	str	r3, [r4, #0]
 800ddca:	bd38      	pop	{r3, r4, r5, pc}
 800ddcc:	20000fa8 	.word	0x20000fa8

0800ddd0 <__assert_func>:
 800ddd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ddd2:	4614      	mov	r4, r2
 800ddd4:	461a      	mov	r2, r3
 800ddd6:	4b09      	ldr	r3, [pc, #36]	; (800ddfc <__assert_func+0x2c>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	4605      	mov	r5, r0
 800dddc:	68d8      	ldr	r0, [r3, #12]
 800ddde:	b14c      	cbz	r4, 800ddf4 <__assert_func+0x24>
 800dde0:	4b07      	ldr	r3, [pc, #28]	; (800de00 <__assert_func+0x30>)
 800dde2:	9100      	str	r1, [sp, #0]
 800dde4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dde8:	4906      	ldr	r1, [pc, #24]	; (800de04 <__assert_func+0x34>)
 800ddea:	462b      	mov	r3, r5
 800ddec:	f000 f85c 	bl	800dea8 <fiprintf>
 800ddf0:	f000 f86c 	bl	800decc <abort>
 800ddf4:	4b04      	ldr	r3, [pc, #16]	; (800de08 <__assert_func+0x38>)
 800ddf6:	461c      	mov	r4, r3
 800ddf8:	e7f3      	b.n	800dde2 <__assert_func+0x12>
 800ddfa:	bf00      	nop
 800ddfc:	200001dc 	.word	0x200001dc
 800de00:	08010277 	.word	0x08010277
 800de04:	08010284 	.word	0x08010284
 800de08:	080102b2 	.word	0x080102b2

0800de0c <_calloc_r>:
 800de0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800de0e:	fba1 2402 	umull	r2, r4, r1, r2
 800de12:	b94c      	cbnz	r4, 800de28 <_calloc_r+0x1c>
 800de14:	4611      	mov	r1, r2
 800de16:	9201      	str	r2, [sp, #4]
 800de18:	f7fe fe3c 	bl	800ca94 <_malloc_r>
 800de1c:	9a01      	ldr	r2, [sp, #4]
 800de1e:	4605      	mov	r5, r0
 800de20:	b930      	cbnz	r0, 800de30 <_calloc_r+0x24>
 800de22:	4628      	mov	r0, r5
 800de24:	b003      	add	sp, #12
 800de26:	bd30      	pop	{r4, r5, pc}
 800de28:	220c      	movs	r2, #12
 800de2a:	6002      	str	r2, [r0, #0]
 800de2c:	2500      	movs	r5, #0
 800de2e:	e7f8      	b.n	800de22 <_calloc_r+0x16>
 800de30:	4621      	mov	r1, r4
 800de32:	f7fe f9be 	bl	800c1b2 <memset>
 800de36:	e7f4      	b.n	800de22 <_calloc_r+0x16>

0800de38 <malloc>:
 800de38:	4b02      	ldr	r3, [pc, #8]	; (800de44 <malloc+0xc>)
 800de3a:	4601      	mov	r1, r0
 800de3c:	6818      	ldr	r0, [r3, #0]
 800de3e:	f7fe be29 	b.w	800ca94 <_malloc_r>
 800de42:	bf00      	nop
 800de44:	200001dc 	.word	0x200001dc

0800de48 <_realloc_r>:
 800de48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de4c:	4680      	mov	r8, r0
 800de4e:	4614      	mov	r4, r2
 800de50:	460e      	mov	r6, r1
 800de52:	b921      	cbnz	r1, 800de5e <_realloc_r+0x16>
 800de54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800de58:	4611      	mov	r1, r2
 800de5a:	f7fe be1b 	b.w	800ca94 <_malloc_r>
 800de5e:	b92a      	cbnz	r2, 800de6c <_realloc_r+0x24>
 800de60:	f7fe fa54 	bl	800c30c <_free_r>
 800de64:	4625      	mov	r5, r4
 800de66:	4628      	mov	r0, r5
 800de68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de6c:	f000 f835 	bl	800deda <_malloc_usable_size_r>
 800de70:	4284      	cmp	r4, r0
 800de72:	4607      	mov	r7, r0
 800de74:	d802      	bhi.n	800de7c <_realloc_r+0x34>
 800de76:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800de7a:	d812      	bhi.n	800dea2 <_realloc_r+0x5a>
 800de7c:	4621      	mov	r1, r4
 800de7e:	4640      	mov	r0, r8
 800de80:	f7fe fe08 	bl	800ca94 <_malloc_r>
 800de84:	4605      	mov	r5, r0
 800de86:	2800      	cmp	r0, #0
 800de88:	d0ed      	beq.n	800de66 <_realloc_r+0x1e>
 800de8a:	42bc      	cmp	r4, r7
 800de8c:	4622      	mov	r2, r4
 800de8e:	4631      	mov	r1, r6
 800de90:	bf28      	it	cs
 800de92:	463a      	movcs	r2, r7
 800de94:	f7fe fa1b 	bl	800c2ce <memcpy>
 800de98:	4631      	mov	r1, r6
 800de9a:	4640      	mov	r0, r8
 800de9c:	f7fe fa36 	bl	800c30c <_free_r>
 800dea0:	e7e1      	b.n	800de66 <_realloc_r+0x1e>
 800dea2:	4635      	mov	r5, r6
 800dea4:	e7df      	b.n	800de66 <_realloc_r+0x1e>
	...

0800dea8 <fiprintf>:
 800dea8:	b40e      	push	{r1, r2, r3}
 800deaa:	b503      	push	{r0, r1, lr}
 800deac:	4601      	mov	r1, r0
 800deae:	ab03      	add	r3, sp, #12
 800deb0:	4805      	ldr	r0, [pc, #20]	; (800dec8 <fiprintf+0x20>)
 800deb2:	f853 2b04 	ldr.w	r2, [r3], #4
 800deb6:	6800      	ldr	r0, [r0, #0]
 800deb8:	9301      	str	r3, [sp, #4]
 800deba:	f000 f83f 	bl	800df3c <_vfiprintf_r>
 800debe:	b002      	add	sp, #8
 800dec0:	f85d eb04 	ldr.w	lr, [sp], #4
 800dec4:	b003      	add	sp, #12
 800dec6:	4770      	bx	lr
 800dec8:	200001dc 	.word	0x200001dc

0800decc <abort>:
 800decc:	b508      	push	{r3, lr}
 800dece:	2006      	movs	r0, #6
 800ded0:	f000 fa0c 	bl	800e2ec <raise>
 800ded4:	2001      	movs	r0, #1
 800ded6:	f7f7 f8ad 	bl	8005034 <_exit>

0800deda <_malloc_usable_size_r>:
 800deda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dede:	1f18      	subs	r0, r3, #4
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	bfbc      	itt	lt
 800dee4:	580b      	ldrlt	r3, [r1, r0]
 800dee6:	18c0      	addlt	r0, r0, r3
 800dee8:	4770      	bx	lr

0800deea <__sfputc_r>:
 800deea:	6893      	ldr	r3, [r2, #8]
 800deec:	3b01      	subs	r3, #1
 800deee:	2b00      	cmp	r3, #0
 800def0:	b410      	push	{r4}
 800def2:	6093      	str	r3, [r2, #8]
 800def4:	da08      	bge.n	800df08 <__sfputc_r+0x1e>
 800def6:	6994      	ldr	r4, [r2, #24]
 800def8:	42a3      	cmp	r3, r4
 800defa:	db01      	blt.n	800df00 <__sfputc_r+0x16>
 800defc:	290a      	cmp	r1, #10
 800defe:	d103      	bne.n	800df08 <__sfputc_r+0x1e>
 800df00:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df04:	f000 b934 	b.w	800e170 <__swbuf_r>
 800df08:	6813      	ldr	r3, [r2, #0]
 800df0a:	1c58      	adds	r0, r3, #1
 800df0c:	6010      	str	r0, [r2, #0]
 800df0e:	7019      	strb	r1, [r3, #0]
 800df10:	4608      	mov	r0, r1
 800df12:	f85d 4b04 	ldr.w	r4, [sp], #4
 800df16:	4770      	bx	lr

0800df18 <__sfputs_r>:
 800df18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df1a:	4606      	mov	r6, r0
 800df1c:	460f      	mov	r7, r1
 800df1e:	4614      	mov	r4, r2
 800df20:	18d5      	adds	r5, r2, r3
 800df22:	42ac      	cmp	r4, r5
 800df24:	d101      	bne.n	800df2a <__sfputs_r+0x12>
 800df26:	2000      	movs	r0, #0
 800df28:	e007      	b.n	800df3a <__sfputs_r+0x22>
 800df2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df2e:	463a      	mov	r2, r7
 800df30:	4630      	mov	r0, r6
 800df32:	f7ff ffda 	bl	800deea <__sfputc_r>
 800df36:	1c43      	adds	r3, r0, #1
 800df38:	d1f3      	bne.n	800df22 <__sfputs_r+0xa>
 800df3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800df3c <_vfiprintf_r>:
 800df3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df40:	460d      	mov	r5, r1
 800df42:	b09d      	sub	sp, #116	; 0x74
 800df44:	4614      	mov	r4, r2
 800df46:	4698      	mov	r8, r3
 800df48:	4606      	mov	r6, r0
 800df4a:	b118      	cbz	r0, 800df54 <_vfiprintf_r+0x18>
 800df4c:	6a03      	ldr	r3, [r0, #32]
 800df4e:	b90b      	cbnz	r3, 800df54 <_vfiprintf_r+0x18>
 800df50:	f7fe f896 	bl	800c080 <__sinit>
 800df54:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df56:	07d9      	lsls	r1, r3, #31
 800df58:	d405      	bmi.n	800df66 <_vfiprintf_r+0x2a>
 800df5a:	89ab      	ldrh	r3, [r5, #12]
 800df5c:	059a      	lsls	r2, r3, #22
 800df5e:	d402      	bmi.n	800df66 <_vfiprintf_r+0x2a>
 800df60:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df62:	f7fe f9b2 	bl	800c2ca <__retarget_lock_acquire_recursive>
 800df66:	89ab      	ldrh	r3, [r5, #12]
 800df68:	071b      	lsls	r3, r3, #28
 800df6a:	d501      	bpl.n	800df70 <_vfiprintf_r+0x34>
 800df6c:	692b      	ldr	r3, [r5, #16]
 800df6e:	b99b      	cbnz	r3, 800df98 <_vfiprintf_r+0x5c>
 800df70:	4629      	mov	r1, r5
 800df72:	4630      	mov	r0, r6
 800df74:	f000 f93a 	bl	800e1ec <__swsetup_r>
 800df78:	b170      	cbz	r0, 800df98 <_vfiprintf_r+0x5c>
 800df7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df7c:	07dc      	lsls	r4, r3, #31
 800df7e:	d504      	bpl.n	800df8a <_vfiprintf_r+0x4e>
 800df80:	f04f 30ff 	mov.w	r0, #4294967295
 800df84:	b01d      	add	sp, #116	; 0x74
 800df86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df8a:	89ab      	ldrh	r3, [r5, #12]
 800df8c:	0598      	lsls	r0, r3, #22
 800df8e:	d4f7      	bmi.n	800df80 <_vfiprintf_r+0x44>
 800df90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df92:	f7fe f99b 	bl	800c2cc <__retarget_lock_release_recursive>
 800df96:	e7f3      	b.n	800df80 <_vfiprintf_r+0x44>
 800df98:	2300      	movs	r3, #0
 800df9a:	9309      	str	r3, [sp, #36]	; 0x24
 800df9c:	2320      	movs	r3, #32
 800df9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfa2:	f8cd 800c 	str.w	r8, [sp, #12]
 800dfa6:	2330      	movs	r3, #48	; 0x30
 800dfa8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800e15c <_vfiprintf_r+0x220>
 800dfac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfb0:	f04f 0901 	mov.w	r9, #1
 800dfb4:	4623      	mov	r3, r4
 800dfb6:	469a      	mov	sl, r3
 800dfb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dfbc:	b10a      	cbz	r2, 800dfc2 <_vfiprintf_r+0x86>
 800dfbe:	2a25      	cmp	r2, #37	; 0x25
 800dfc0:	d1f9      	bne.n	800dfb6 <_vfiprintf_r+0x7a>
 800dfc2:	ebba 0b04 	subs.w	fp, sl, r4
 800dfc6:	d00b      	beq.n	800dfe0 <_vfiprintf_r+0xa4>
 800dfc8:	465b      	mov	r3, fp
 800dfca:	4622      	mov	r2, r4
 800dfcc:	4629      	mov	r1, r5
 800dfce:	4630      	mov	r0, r6
 800dfd0:	f7ff ffa2 	bl	800df18 <__sfputs_r>
 800dfd4:	3001      	adds	r0, #1
 800dfd6:	f000 80a9 	beq.w	800e12c <_vfiprintf_r+0x1f0>
 800dfda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dfdc:	445a      	add	r2, fp
 800dfde:	9209      	str	r2, [sp, #36]	; 0x24
 800dfe0:	f89a 3000 	ldrb.w	r3, [sl]
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 80a1 	beq.w	800e12c <_vfiprintf_r+0x1f0>
 800dfea:	2300      	movs	r3, #0
 800dfec:	f04f 32ff 	mov.w	r2, #4294967295
 800dff0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dff4:	f10a 0a01 	add.w	sl, sl, #1
 800dff8:	9304      	str	r3, [sp, #16]
 800dffa:	9307      	str	r3, [sp, #28]
 800dffc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e000:	931a      	str	r3, [sp, #104]	; 0x68
 800e002:	4654      	mov	r4, sl
 800e004:	2205      	movs	r2, #5
 800e006:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e00a:	4854      	ldr	r0, [pc, #336]	; (800e15c <_vfiprintf_r+0x220>)
 800e00c:	f7f2 f8e0 	bl	80001d0 <memchr>
 800e010:	9a04      	ldr	r2, [sp, #16]
 800e012:	b9d8      	cbnz	r0, 800e04c <_vfiprintf_r+0x110>
 800e014:	06d1      	lsls	r1, r2, #27
 800e016:	bf44      	itt	mi
 800e018:	2320      	movmi	r3, #32
 800e01a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e01e:	0713      	lsls	r3, r2, #28
 800e020:	bf44      	itt	mi
 800e022:	232b      	movmi	r3, #43	; 0x2b
 800e024:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e028:	f89a 3000 	ldrb.w	r3, [sl]
 800e02c:	2b2a      	cmp	r3, #42	; 0x2a
 800e02e:	d015      	beq.n	800e05c <_vfiprintf_r+0x120>
 800e030:	9a07      	ldr	r2, [sp, #28]
 800e032:	4654      	mov	r4, sl
 800e034:	2000      	movs	r0, #0
 800e036:	f04f 0c0a 	mov.w	ip, #10
 800e03a:	4621      	mov	r1, r4
 800e03c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e040:	3b30      	subs	r3, #48	; 0x30
 800e042:	2b09      	cmp	r3, #9
 800e044:	d94d      	bls.n	800e0e2 <_vfiprintf_r+0x1a6>
 800e046:	b1b0      	cbz	r0, 800e076 <_vfiprintf_r+0x13a>
 800e048:	9207      	str	r2, [sp, #28]
 800e04a:	e014      	b.n	800e076 <_vfiprintf_r+0x13a>
 800e04c:	eba0 0308 	sub.w	r3, r0, r8
 800e050:	fa09 f303 	lsl.w	r3, r9, r3
 800e054:	4313      	orrs	r3, r2
 800e056:	9304      	str	r3, [sp, #16]
 800e058:	46a2      	mov	sl, r4
 800e05a:	e7d2      	b.n	800e002 <_vfiprintf_r+0xc6>
 800e05c:	9b03      	ldr	r3, [sp, #12]
 800e05e:	1d19      	adds	r1, r3, #4
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	9103      	str	r1, [sp, #12]
 800e064:	2b00      	cmp	r3, #0
 800e066:	bfbb      	ittet	lt
 800e068:	425b      	neglt	r3, r3
 800e06a:	f042 0202 	orrlt.w	r2, r2, #2
 800e06e:	9307      	strge	r3, [sp, #28]
 800e070:	9307      	strlt	r3, [sp, #28]
 800e072:	bfb8      	it	lt
 800e074:	9204      	strlt	r2, [sp, #16]
 800e076:	7823      	ldrb	r3, [r4, #0]
 800e078:	2b2e      	cmp	r3, #46	; 0x2e
 800e07a:	d10c      	bne.n	800e096 <_vfiprintf_r+0x15a>
 800e07c:	7863      	ldrb	r3, [r4, #1]
 800e07e:	2b2a      	cmp	r3, #42	; 0x2a
 800e080:	d134      	bne.n	800e0ec <_vfiprintf_r+0x1b0>
 800e082:	9b03      	ldr	r3, [sp, #12]
 800e084:	1d1a      	adds	r2, r3, #4
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	9203      	str	r2, [sp, #12]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	bfb8      	it	lt
 800e08e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e092:	3402      	adds	r4, #2
 800e094:	9305      	str	r3, [sp, #20]
 800e096:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800e16c <_vfiprintf_r+0x230>
 800e09a:	7821      	ldrb	r1, [r4, #0]
 800e09c:	2203      	movs	r2, #3
 800e09e:	4650      	mov	r0, sl
 800e0a0:	f7f2 f896 	bl	80001d0 <memchr>
 800e0a4:	b138      	cbz	r0, 800e0b6 <_vfiprintf_r+0x17a>
 800e0a6:	9b04      	ldr	r3, [sp, #16]
 800e0a8:	eba0 000a 	sub.w	r0, r0, sl
 800e0ac:	2240      	movs	r2, #64	; 0x40
 800e0ae:	4082      	lsls	r2, r0
 800e0b0:	4313      	orrs	r3, r2
 800e0b2:	3401      	adds	r4, #1
 800e0b4:	9304      	str	r3, [sp, #16]
 800e0b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e0ba:	4829      	ldr	r0, [pc, #164]	; (800e160 <_vfiprintf_r+0x224>)
 800e0bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0c0:	2206      	movs	r2, #6
 800e0c2:	f7f2 f885 	bl	80001d0 <memchr>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d03f      	beq.n	800e14a <_vfiprintf_r+0x20e>
 800e0ca:	4b26      	ldr	r3, [pc, #152]	; (800e164 <_vfiprintf_r+0x228>)
 800e0cc:	bb1b      	cbnz	r3, 800e116 <_vfiprintf_r+0x1da>
 800e0ce:	9b03      	ldr	r3, [sp, #12]
 800e0d0:	3307      	adds	r3, #7
 800e0d2:	f023 0307 	bic.w	r3, r3, #7
 800e0d6:	3308      	adds	r3, #8
 800e0d8:	9303      	str	r3, [sp, #12]
 800e0da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e0dc:	443b      	add	r3, r7
 800e0de:	9309      	str	r3, [sp, #36]	; 0x24
 800e0e0:	e768      	b.n	800dfb4 <_vfiprintf_r+0x78>
 800e0e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800e0e6:	460c      	mov	r4, r1
 800e0e8:	2001      	movs	r0, #1
 800e0ea:	e7a6      	b.n	800e03a <_vfiprintf_r+0xfe>
 800e0ec:	2300      	movs	r3, #0
 800e0ee:	3401      	adds	r4, #1
 800e0f0:	9305      	str	r3, [sp, #20]
 800e0f2:	4619      	mov	r1, r3
 800e0f4:	f04f 0c0a 	mov.w	ip, #10
 800e0f8:	4620      	mov	r0, r4
 800e0fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e0fe:	3a30      	subs	r2, #48	; 0x30
 800e100:	2a09      	cmp	r2, #9
 800e102:	d903      	bls.n	800e10c <_vfiprintf_r+0x1d0>
 800e104:	2b00      	cmp	r3, #0
 800e106:	d0c6      	beq.n	800e096 <_vfiprintf_r+0x15a>
 800e108:	9105      	str	r1, [sp, #20]
 800e10a:	e7c4      	b.n	800e096 <_vfiprintf_r+0x15a>
 800e10c:	fb0c 2101 	mla	r1, ip, r1, r2
 800e110:	4604      	mov	r4, r0
 800e112:	2301      	movs	r3, #1
 800e114:	e7f0      	b.n	800e0f8 <_vfiprintf_r+0x1bc>
 800e116:	ab03      	add	r3, sp, #12
 800e118:	9300      	str	r3, [sp, #0]
 800e11a:	462a      	mov	r2, r5
 800e11c:	4b12      	ldr	r3, [pc, #72]	; (800e168 <_vfiprintf_r+0x22c>)
 800e11e:	a904      	add	r1, sp, #16
 800e120:	4630      	mov	r0, r6
 800e122:	f3af 8000 	nop.w
 800e126:	4607      	mov	r7, r0
 800e128:	1c78      	adds	r0, r7, #1
 800e12a:	d1d6      	bne.n	800e0da <_vfiprintf_r+0x19e>
 800e12c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e12e:	07d9      	lsls	r1, r3, #31
 800e130:	d405      	bmi.n	800e13e <_vfiprintf_r+0x202>
 800e132:	89ab      	ldrh	r3, [r5, #12]
 800e134:	059a      	lsls	r2, r3, #22
 800e136:	d402      	bmi.n	800e13e <_vfiprintf_r+0x202>
 800e138:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e13a:	f7fe f8c7 	bl	800c2cc <__retarget_lock_release_recursive>
 800e13e:	89ab      	ldrh	r3, [r5, #12]
 800e140:	065b      	lsls	r3, r3, #25
 800e142:	f53f af1d 	bmi.w	800df80 <_vfiprintf_r+0x44>
 800e146:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e148:	e71c      	b.n	800df84 <_vfiprintf_r+0x48>
 800e14a:	ab03      	add	r3, sp, #12
 800e14c:	9300      	str	r3, [sp, #0]
 800e14e:	462a      	mov	r2, r5
 800e150:	4b05      	ldr	r3, [pc, #20]	; (800e168 <_vfiprintf_r+0x22c>)
 800e152:	a904      	add	r1, sp, #16
 800e154:	4630      	mov	r0, r6
 800e156:	f7ff fc41 	bl	800d9dc <_printf_i>
 800e15a:	e7e4      	b.n	800e126 <_vfiprintf_r+0x1ea>
 800e15c:	08010244 	.word	0x08010244
 800e160:	0801024e 	.word	0x0801024e
 800e164:	00000000 	.word	0x00000000
 800e168:	0800df19 	.word	0x0800df19
 800e16c:	0801024a 	.word	0x0801024a

0800e170 <__swbuf_r>:
 800e170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e172:	460e      	mov	r6, r1
 800e174:	4614      	mov	r4, r2
 800e176:	4605      	mov	r5, r0
 800e178:	b118      	cbz	r0, 800e182 <__swbuf_r+0x12>
 800e17a:	6a03      	ldr	r3, [r0, #32]
 800e17c:	b90b      	cbnz	r3, 800e182 <__swbuf_r+0x12>
 800e17e:	f7fd ff7f 	bl	800c080 <__sinit>
 800e182:	69a3      	ldr	r3, [r4, #24]
 800e184:	60a3      	str	r3, [r4, #8]
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	071a      	lsls	r2, r3, #28
 800e18a:	d525      	bpl.n	800e1d8 <__swbuf_r+0x68>
 800e18c:	6923      	ldr	r3, [r4, #16]
 800e18e:	b31b      	cbz	r3, 800e1d8 <__swbuf_r+0x68>
 800e190:	6823      	ldr	r3, [r4, #0]
 800e192:	6922      	ldr	r2, [r4, #16]
 800e194:	1a98      	subs	r0, r3, r2
 800e196:	6963      	ldr	r3, [r4, #20]
 800e198:	b2f6      	uxtb	r6, r6
 800e19a:	4283      	cmp	r3, r0
 800e19c:	4637      	mov	r7, r6
 800e19e:	dc04      	bgt.n	800e1aa <__swbuf_r+0x3a>
 800e1a0:	4621      	mov	r1, r4
 800e1a2:	4628      	mov	r0, r5
 800e1a4:	f7ff fdc2 	bl	800dd2c <_fflush_r>
 800e1a8:	b9e0      	cbnz	r0, 800e1e4 <__swbuf_r+0x74>
 800e1aa:	68a3      	ldr	r3, [r4, #8]
 800e1ac:	3b01      	subs	r3, #1
 800e1ae:	60a3      	str	r3, [r4, #8]
 800e1b0:	6823      	ldr	r3, [r4, #0]
 800e1b2:	1c5a      	adds	r2, r3, #1
 800e1b4:	6022      	str	r2, [r4, #0]
 800e1b6:	701e      	strb	r6, [r3, #0]
 800e1b8:	6962      	ldr	r2, [r4, #20]
 800e1ba:	1c43      	adds	r3, r0, #1
 800e1bc:	429a      	cmp	r2, r3
 800e1be:	d004      	beq.n	800e1ca <__swbuf_r+0x5a>
 800e1c0:	89a3      	ldrh	r3, [r4, #12]
 800e1c2:	07db      	lsls	r3, r3, #31
 800e1c4:	d506      	bpl.n	800e1d4 <__swbuf_r+0x64>
 800e1c6:	2e0a      	cmp	r6, #10
 800e1c8:	d104      	bne.n	800e1d4 <__swbuf_r+0x64>
 800e1ca:	4621      	mov	r1, r4
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f7ff fdad 	bl	800dd2c <_fflush_r>
 800e1d2:	b938      	cbnz	r0, 800e1e4 <__swbuf_r+0x74>
 800e1d4:	4638      	mov	r0, r7
 800e1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e1d8:	4621      	mov	r1, r4
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f000 f806 	bl	800e1ec <__swsetup_r>
 800e1e0:	2800      	cmp	r0, #0
 800e1e2:	d0d5      	beq.n	800e190 <__swbuf_r+0x20>
 800e1e4:	f04f 37ff 	mov.w	r7, #4294967295
 800e1e8:	e7f4      	b.n	800e1d4 <__swbuf_r+0x64>
	...

0800e1ec <__swsetup_r>:
 800e1ec:	b538      	push	{r3, r4, r5, lr}
 800e1ee:	4b2a      	ldr	r3, [pc, #168]	; (800e298 <__swsetup_r+0xac>)
 800e1f0:	4605      	mov	r5, r0
 800e1f2:	6818      	ldr	r0, [r3, #0]
 800e1f4:	460c      	mov	r4, r1
 800e1f6:	b118      	cbz	r0, 800e200 <__swsetup_r+0x14>
 800e1f8:	6a03      	ldr	r3, [r0, #32]
 800e1fa:	b90b      	cbnz	r3, 800e200 <__swsetup_r+0x14>
 800e1fc:	f7fd ff40 	bl	800c080 <__sinit>
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e206:	0718      	lsls	r0, r3, #28
 800e208:	d422      	bmi.n	800e250 <__swsetup_r+0x64>
 800e20a:	06d9      	lsls	r1, r3, #27
 800e20c:	d407      	bmi.n	800e21e <__swsetup_r+0x32>
 800e20e:	2309      	movs	r3, #9
 800e210:	602b      	str	r3, [r5, #0]
 800e212:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e216:	81a3      	strh	r3, [r4, #12]
 800e218:	f04f 30ff 	mov.w	r0, #4294967295
 800e21c:	e034      	b.n	800e288 <__swsetup_r+0x9c>
 800e21e:	0758      	lsls	r0, r3, #29
 800e220:	d512      	bpl.n	800e248 <__swsetup_r+0x5c>
 800e222:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e224:	b141      	cbz	r1, 800e238 <__swsetup_r+0x4c>
 800e226:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e22a:	4299      	cmp	r1, r3
 800e22c:	d002      	beq.n	800e234 <__swsetup_r+0x48>
 800e22e:	4628      	mov	r0, r5
 800e230:	f7fe f86c 	bl	800c30c <_free_r>
 800e234:	2300      	movs	r3, #0
 800e236:	6363      	str	r3, [r4, #52]	; 0x34
 800e238:	89a3      	ldrh	r3, [r4, #12]
 800e23a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e23e:	81a3      	strh	r3, [r4, #12]
 800e240:	2300      	movs	r3, #0
 800e242:	6063      	str	r3, [r4, #4]
 800e244:	6923      	ldr	r3, [r4, #16]
 800e246:	6023      	str	r3, [r4, #0]
 800e248:	89a3      	ldrh	r3, [r4, #12]
 800e24a:	f043 0308 	orr.w	r3, r3, #8
 800e24e:	81a3      	strh	r3, [r4, #12]
 800e250:	6923      	ldr	r3, [r4, #16]
 800e252:	b94b      	cbnz	r3, 800e268 <__swsetup_r+0x7c>
 800e254:	89a3      	ldrh	r3, [r4, #12]
 800e256:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e25a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e25e:	d003      	beq.n	800e268 <__swsetup_r+0x7c>
 800e260:	4621      	mov	r1, r4
 800e262:	4628      	mov	r0, r5
 800e264:	f000 f884 	bl	800e370 <__smakebuf_r>
 800e268:	89a0      	ldrh	r0, [r4, #12]
 800e26a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e26e:	f010 0301 	ands.w	r3, r0, #1
 800e272:	d00a      	beq.n	800e28a <__swsetup_r+0x9e>
 800e274:	2300      	movs	r3, #0
 800e276:	60a3      	str	r3, [r4, #8]
 800e278:	6963      	ldr	r3, [r4, #20]
 800e27a:	425b      	negs	r3, r3
 800e27c:	61a3      	str	r3, [r4, #24]
 800e27e:	6923      	ldr	r3, [r4, #16]
 800e280:	b943      	cbnz	r3, 800e294 <__swsetup_r+0xa8>
 800e282:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e286:	d1c4      	bne.n	800e212 <__swsetup_r+0x26>
 800e288:	bd38      	pop	{r3, r4, r5, pc}
 800e28a:	0781      	lsls	r1, r0, #30
 800e28c:	bf58      	it	pl
 800e28e:	6963      	ldrpl	r3, [r4, #20]
 800e290:	60a3      	str	r3, [r4, #8]
 800e292:	e7f4      	b.n	800e27e <__swsetup_r+0x92>
 800e294:	2000      	movs	r0, #0
 800e296:	e7f7      	b.n	800e288 <__swsetup_r+0x9c>
 800e298:	200001dc 	.word	0x200001dc

0800e29c <_raise_r>:
 800e29c:	291f      	cmp	r1, #31
 800e29e:	b538      	push	{r3, r4, r5, lr}
 800e2a0:	4604      	mov	r4, r0
 800e2a2:	460d      	mov	r5, r1
 800e2a4:	d904      	bls.n	800e2b0 <_raise_r+0x14>
 800e2a6:	2316      	movs	r3, #22
 800e2a8:	6003      	str	r3, [r0, #0]
 800e2aa:	f04f 30ff 	mov.w	r0, #4294967295
 800e2ae:	bd38      	pop	{r3, r4, r5, pc}
 800e2b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800e2b2:	b112      	cbz	r2, 800e2ba <_raise_r+0x1e>
 800e2b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e2b8:	b94b      	cbnz	r3, 800e2ce <_raise_r+0x32>
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f000 f830 	bl	800e320 <_getpid_r>
 800e2c0:	462a      	mov	r2, r5
 800e2c2:	4601      	mov	r1, r0
 800e2c4:	4620      	mov	r0, r4
 800e2c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e2ca:	f000 b817 	b.w	800e2fc <_kill_r>
 800e2ce:	2b01      	cmp	r3, #1
 800e2d0:	d00a      	beq.n	800e2e8 <_raise_r+0x4c>
 800e2d2:	1c59      	adds	r1, r3, #1
 800e2d4:	d103      	bne.n	800e2de <_raise_r+0x42>
 800e2d6:	2316      	movs	r3, #22
 800e2d8:	6003      	str	r3, [r0, #0]
 800e2da:	2001      	movs	r0, #1
 800e2dc:	e7e7      	b.n	800e2ae <_raise_r+0x12>
 800e2de:	2400      	movs	r4, #0
 800e2e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	4798      	blx	r3
 800e2e8:	2000      	movs	r0, #0
 800e2ea:	e7e0      	b.n	800e2ae <_raise_r+0x12>

0800e2ec <raise>:
 800e2ec:	4b02      	ldr	r3, [pc, #8]	; (800e2f8 <raise+0xc>)
 800e2ee:	4601      	mov	r1, r0
 800e2f0:	6818      	ldr	r0, [r3, #0]
 800e2f2:	f7ff bfd3 	b.w	800e29c <_raise_r>
 800e2f6:	bf00      	nop
 800e2f8:	200001dc 	.word	0x200001dc

0800e2fc <_kill_r>:
 800e2fc:	b538      	push	{r3, r4, r5, lr}
 800e2fe:	4d07      	ldr	r5, [pc, #28]	; (800e31c <_kill_r+0x20>)
 800e300:	2300      	movs	r3, #0
 800e302:	4604      	mov	r4, r0
 800e304:	4608      	mov	r0, r1
 800e306:	4611      	mov	r1, r2
 800e308:	602b      	str	r3, [r5, #0]
 800e30a:	f7f6 fe83 	bl	8005014 <_kill>
 800e30e:	1c43      	adds	r3, r0, #1
 800e310:	d102      	bne.n	800e318 <_kill_r+0x1c>
 800e312:	682b      	ldr	r3, [r5, #0]
 800e314:	b103      	cbz	r3, 800e318 <_kill_r+0x1c>
 800e316:	6023      	str	r3, [r4, #0]
 800e318:	bd38      	pop	{r3, r4, r5, pc}
 800e31a:	bf00      	nop
 800e31c:	20000fa8 	.word	0x20000fa8

0800e320 <_getpid_r>:
 800e320:	f7f6 be70 	b.w	8005004 <_getpid>

0800e324 <__swhatbuf_r>:
 800e324:	b570      	push	{r4, r5, r6, lr}
 800e326:	460c      	mov	r4, r1
 800e328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e32c:	2900      	cmp	r1, #0
 800e32e:	b096      	sub	sp, #88	; 0x58
 800e330:	4615      	mov	r5, r2
 800e332:	461e      	mov	r6, r3
 800e334:	da0d      	bge.n	800e352 <__swhatbuf_r+0x2e>
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	f013 0f80 	tst.w	r3, #128	; 0x80
 800e33c:	f04f 0100 	mov.w	r1, #0
 800e340:	bf0c      	ite	eq
 800e342:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800e346:	2340      	movne	r3, #64	; 0x40
 800e348:	2000      	movs	r0, #0
 800e34a:	6031      	str	r1, [r6, #0]
 800e34c:	602b      	str	r3, [r5, #0]
 800e34e:	b016      	add	sp, #88	; 0x58
 800e350:	bd70      	pop	{r4, r5, r6, pc}
 800e352:	466a      	mov	r2, sp
 800e354:	f000 f848 	bl	800e3e8 <_fstat_r>
 800e358:	2800      	cmp	r0, #0
 800e35a:	dbec      	blt.n	800e336 <__swhatbuf_r+0x12>
 800e35c:	9901      	ldr	r1, [sp, #4]
 800e35e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800e362:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800e366:	4259      	negs	r1, r3
 800e368:	4159      	adcs	r1, r3
 800e36a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e36e:	e7eb      	b.n	800e348 <__swhatbuf_r+0x24>

0800e370 <__smakebuf_r>:
 800e370:	898b      	ldrh	r3, [r1, #12]
 800e372:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e374:	079d      	lsls	r5, r3, #30
 800e376:	4606      	mov	r6, r0
 800e378:	460c      	mov	r4, r1
 800e37a:	d507      	bpl.n	800e38c <__smakebuf_r+0x1c>
 800e37c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e380:	6023      	str	r3, [r4, #0]
 800e382:	6123      	str	r3, [r4, #16]
 800e384:	2301      	movs	r3, #1
 800e386:	6163      	str	r3, [r4, #20]
 800e388:	b002      	add	sp, #8
 800e38a:	bd70      	pop	{r4, r5, r6, pc}
 800e38c:	ab01      	add	r3, sp, #4
 800e38e:	466a      	mov	r2, sp
 800e390:	f7ff ffc8 	bl	800e324 <__swhatbuf_r>
 800e394:	9900      	ldr	r1, [sp, #0]
 800e396:	4605      	mov	r5, r0
 800e398:	4630      	mov	r0, r6
 800e39a:	f7fe fb7b 	bl	800ca94 <_malloc_r>
 800e39e:	b948      	cbnz	r0, 800e3b4 <__smakebuf_r+0x44>
 800e3a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3a4:	059a      	lsls	r2, r3, #22
 800e3a6:	d4ef      	bmi.n	800e388 <__smakebuf_r+0x18>
 800e3a8:	f023 0303 	bic.w	r3, r3, #3
 800e3ac:	f043 0302 	orr.w	r3, r3, #2
 800e3b0:	81a3      	strh	r3, [r4, #12]
 800e3b2:	e7e3      	b.n	800e37c <__smakebuf_r+0xc>
 800e3b4:	89a3      	ldrh	r3, [r4, #12]
 800e3b6:	6020      	str	r0, [r4, #0]
 800e3b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e3bc:	81a3      	strh	r3, [r4, #12]
 800e3be:	9b00      	ldr	r3, [sp, #0]
 800e3c0:	6163      	str	r3, [r4, #20]
 800e3c2:	9b01      	ldr	r3, [sp, #4]
 800e3c4:	6120      	str	r0, [r4, #16]
 800e3c6:	b15b      	cbz	r3, 800e3e0 <__smakebuf_r+0x70>
 800e3c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e3cc:	4630      	mov	r0, r6
 800e3ce:	f000 f81d 	bl	800e40c <_isatty_r>
 800e3d2:	b128      	cbz	r0, 800e3e0 <__smakebuf_r+0x70>
 800e3d4:	89a3      	ldrh	r3, [r4, #12]
 800e3d6:	f023 0303 	bic.w	r3, r3, #3
 800e3da:	f043 0301 	orr.w	r3, r3, #1
 800e3de:	81a3      	strh	r3, [r4, #12]
 800e3e0:	89a3      	ldrh	r3, [r4, #12]
 800e3e2:	431d      	orrs	r5, r3
 800e3e4:	81a5      	strh	r5, [r4, #12]
 800e3e6:	e7cf      	b.n	800e388 <__smakebuf_r+0x18>

0800e3e8 <_fstat_r>:
 800e3e8:	b538      	push	{r3, r4, r5, lr}
 800e3ea:	4d07      	ldr	r5, [pc, #28]	; (800e408 <_fstat_r+0x20>)
 800e3ec:	2300      	movs	r3, #0
 800e3ee:	4604      	mov	r4, r0
 800e3f0:	4608      	mov	r0, r1
 800e3f2:	4611      	mov	r1, r2
 800e3f4:	602b      	str	r3, [r5, #0]
 800e3f6:	f7f6 fe6c 	bl	80050d2 <_fstat>
 800e3fa:	1c43      	adds	r3, r0, #1
 800e3fc:	d102      	bne.n	800e404 <_fstat_r+0x1c>
 800e3fe:	682b      	ldr	r3, [r5, #0]
 800e400:	b103      	cbz	r3, 800e404 <_fstat_r+0x1c>
 800e402:	6023      	str	r3, [r4, #0]
 800e404:	bd38      	pop	{r3, r4, r5, pc}
 800e406:	bf00      	nop
 800e408:	20000fa8 	.word	0x20000fa8

0800e40c <_isatty_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	4d06      	ldr	r5, [pc, #24]	; (800e428 <_isatty_r+0x1c>)
 800e410:	2300      	movs	r3, #0
 800e412:	4604      	mov	r4, r0
 800e414:	4608      	mov	r0, r1
 800e416:	602b      	str	r3, [r5, #0]
 800e418:	f7f6 fe6b 	bl	80050f2 <_isatty>
 800e41c:	1c43      	adds	r3, r0, #1
 800e41e:	d102      	bne.n	800e426 <_isatty_r+0x1a>
 800e420:	682b      	ldr	r3, [r5, #0]
 800e422:	b103      	cbz	r3, 800e426 <_isatty_r+0x1a>
 800e424:	6023      	str	r3, [r4, #0]
 800e426:	bd38      	pop	{r3, r4, r5, pc}
 800e428:	20000fa8 	.word	0x20000fa8
 800e42c:	00000000 	.word	0x00000000

0800e430 <log>:
 800e430:	b538      	push	{r3, r4, r5, lr}
 800e432:	ed2d 8b02 	vpush	{d8}
 800e436:	ec55 4b10 	vmov	r4, r5, d0
 800e43a:	f000 f919 	bl	800e670 <__ieee754_log>
 800e43e:	4622      	mov	r2, r4
 800e440:	462b      	mov	r3, r5
 800e442:	4620      	mov	r0, r4
 800e444:	4629      	mov	r1, r5
 800e446:	eeb0 8a40 	vmov.f32	s16, s0
 800e44a:	eef0 8a60 	vmov.f32	s17, s1
 800e44e:	f7f2 fb65 	bl	8000b1c <__aeabi_dcmpun>
 800e452:	b998      	cbnz	r0, 800e47c <log+0x4c>
 800e454:	2200      	movs	r2, #0
 800e456:	2300      	movs	r3, #0
 800e458:	4620      	mov	r0, r4
 800e45a:	4629      	mov	r1, r5
 800e45c:	f7f2 fb54 	bl	8000b08 <__aeabi_dcmpgt>
 800e460:	b960      	cbnz	r0, 800e47c <log+0x4c>
 800e462:	2200      	movs	r2, #0
 800e464:	2300      	movs	r3, #0
 800e466:	4620      	mov	r0, r4
 800e468:	4629      	mov	r1, r5
 800e46a:	f7f2 fb25 	bl	8000ab8 <__aeabi_dcmpeq>
 800e46e:	b160      	cbz	r0, 800e48a <log+0x5a>
 800e470:	f7fd ff00 	bl	800c274 <__errno>
 800e474:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800e4a0 <log+0x70>
 800e478:	2322      	movs	r3, #34	; 0x22
 800e47a:	6003      	str	r3, [r0, #0]
 800e47c:	eeb0 0a48 	vmov.f32	s0, s16
 800e480:	eef0 0a68 	vmov.f32	s1, s17
 800e484:	ecbd 8b02 	vpop	{d8}
 800e488:	bd38      	pop	{r3, r4, r5, pc}
 800e48a:	f7fd fef3 	bl	800c274 <__errno>
 800e48e:	ecbd 8b02 	vpop	{d8}
 800e492:	2321      	movs	r3, #33	; 0x21
 800e494:	6003      	str	r3, [r0, #0]
 800e496:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e49a:	4803      	ldr	r0, [pc, #12]	; (800e4a8 <log+0x78>)
 800e49c:	f7fd bf28 	b.w	800c2f0 <nan>
 800e4a0:	00000000 	.word	0x00000000
 800e4a4:	fff00000 	.word	0xfff00000
 800e4a8:	080102b2 	.word	0x080102b2

0800e4ac <pow>:
 800e4ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4ae:	ed2d 8b02 	vpush	{d8}
 800e4b2:	eeb0 8a40 	vmov.f32	s16, s0
 800e4b6:	eef0 8a60 	vmov.f32	s17, s1
 800e4ba:	ec55 4b11 	vmov	r4, r5, d1
 800e4be:	f000 fa93 	bl	800e9e8 <__ieee754_pow>
 800e4c2:	4622      	mov	r2, r4
 800e4c4:	462b      	mov	r3, r5
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	4629      	mov	r1, r5
 800e4ca:	ec57 6b10 	vmov	r6, r7, d0
 800e4ce:	f7f2 fb25 	bl	8000b1c <__aeabi_dcmpun>
 800e4d2:	2800      	cmp	r0, #0
 800e4d4:	d13b      	bne.n	800e54e <pow+0xa2>
 800e4d6:	ec51 0b18 	vmov	r0, r1, d8
 800e4da:	2200      	movs	r2, #0
 800e4dc:	2300      	movs	r3, #0
 800e4de:	f7f2 faeb 	bl	8000ab8 <__aeabi_dcmpeq>
 800e4e2:	b1b8      	cbz	r0, 800e514 <pow+0x68>
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	4620      	mov	r0, r4
 800e4ea:	4629      	mov	r1, r5
 800e4ec:	f7f2 fae4 	bl	8000ab8 <__aeabi_dcmpeq>
 800e4f0:	2800      	cmp	r0, #0
 800e4f2:	d146      	bne.n	800e582 <pow+0xd6>
 800e4f4:	ec45 4b10 	vmov	d0, r4, r5
 800e4f8:	f000 f89f 	bl	800e63a <finite>
 800e4fc:	b338      	cbz	r0, 800e54e <pow+0xa2>
 800e4fe:	2200      	movs	r2, #0
 800e500:	2300      	movs	r3, #0
 800e502:	4620      	mov	r0, r4
 800e504:	4629      	mov	r1, r5
 800e506:	f7f2 fae1 	bl	8000acc <__aeabi_dcmplt>
 800e50a:	b300      	cbz	r0, 800e54e <pow+0xa2>
 800e50c:	f7fd feb2 	bl	800c274 <__errno>
 800e510:	2322      	movs	r3, #34	; 0x22
 800e512:	e01b      	b.n	800e54c <pow+0xa0>
 800e514:	ec47 6b10 	vmov	d0, r6, r7
 800e518:	f000 f88f 	bl	800e63a <finite>
 800e51c:	b9e0      	cbnz	r0, 800e558 <pow+0xac>
 800e51e:	eeb0 0a48 	vmov.f32	s0, s16
 800e522:	eef0 0a68 	vmov.f32	s1, s17
 800e526:	f000 f888 	bl	800e63a <finite>
 800e52a:	b1a8      	cbz	r0, 800e558 <pow+0xac>
 800e52c:	ec45 4b10 	vmov	d0, r4, r5
 800e530:	f000 f883 	bl	800e63a <finite>
 800e534:	b180      	cbz	r0, 800e558 <pow+0xac>
 800e536:	4632      	mov	r2, r6
 800e538:	463b      	mov	r3, r7
 800e53a:	4630      	mov	r0, r6
 800e53c:	4639      	mov	r1, r7
 800e53e:	f7f2 faed 	bl	8000b1c <__aeabi_dcmpun>
 800e542:	2800      	cmp	r0, #0
 800e544:	d0e2      	beq.n	800e50c <pow+0x60>
 800e546:	f7fd fe95 	bl	800c274 <__errno>
 800e54a:	2321      	movs	r3, #33	; 0x21
 800e54c:	6003      	str	r3, [r0, #0]
 800e54e:	ecbd 8b02 	vpop	{d8}
 800e552:	ec47 6b10 	vmov	d0, r6, r7
 800e556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e558:	2200      	movs	r2, #0
 800e55a:	2300      	movs	r3, #0
 800e55c:	4630      	mov	r0, r6
 800e55e:	4639      	mov	r1, r7
 800e560:	f7f2 faaa 	bl	8000ab8 <__aeabi_dcmpeq>
 800e564:	2800      	cmp	r0, #0
 800e566:	d0f2      	beq.n	800e54e <pow+0xa2>
 800e568:	eeb0 0a48 	vmov.f32	s0, s16
 800e56c:	eef0 0a68 	vmov.f32	s1, s17
 800e570:	f000 f863 	bl	800e63a <finite>
 800e574:	2800      	cmp	r0, #0
 800e576:	d0ea      	beq.n	800e54e <pow+0xa2>
 800e578:	ec45 4b10 	vmov	d0, r4, r5
 800e57c:	f000 f85d 	bl	800e63a <finite>
 800e580:	e7c3      	b.n	800e50a <pow+0x5e>
 800e582:	4f01      	ldr	r7, [pc, #4]	; (800e588 <pow+0xdc>)
 800e584:	2600      	movs	r6, #0
 800e586:	e7e2      	b.n	800e54e <pow+0xa2>
 800e588:	3ff00000 	.word	0x3ff00000

0800e58c <powf>:
 800e58c:	b508      	push	{r3, lr}
 800e58e:	ed2d 8b04 	vpush	{d8-d9}
 800e592:	eeb0 8a60 	vmov.f32	s16, s1
 800e596:	eeb0 9a40 	vmov.f32	s18, s0
 800e59a:	f000 ff59 	bl	800f450 <__ieee754_powf>
 800e59e:	eeb4 8a48 	vcmp.f32	s16, s16
 800e5a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5a6:	eef0 8a40 	vmov.f32	s17, s0
 800e5aa:	d63e      	bvs.n	800e62a <powf+0x9e>
 800e5ac:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800e5b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5b4:	d112      	bne.n	800e5dc <powf+0x50>
 800e5b6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e5ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5be:	d039      	beq.n	800e634 <powf+0xa8>
 800e5c0:	eeb0 0a48 	vmov.f32	s0, s16
 800e5c4:	f000 f844 	bl	800e650 <finitef>
 800e5c8:	b378      	cbz	r0, 800e62a <powf+0x9e>
 800e5ca:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800e5ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5d2:	d52a      	bpl.n	800e62a <powf+0x9e>
 800e5d4:	f7fd fe4e 	bl	800c274 <__errno>
 800e5d8:	2322      	movs	r3, #34	; 0x22
 800e5da:	e014      	b.n	800e606 <powf+0x7a>
 800e5dc:	f000 f838 	bl	800e650 <finitef>
 800e5e0:	b998      	cbnz	r0, 800e60a <powf+0x7e>
 800e5e2:	eeb0 0a49 	vmov.f32	s0, s18
 800e5e6:	f000 f833 	bl	800e650 <finitef>
 800e5ea:	b170      	cbz	r0, 800e60a <powf+0x7e>
 800e5ec:	eeb0 0a48 	vmov.f32	s0, s16
 800e5f0:	f000 f82e 	bl	800e650 <finitef>
 800e5f4:	b148      	cbz	r0, 800e60a <powf+0x7e>
 800e5f6:	eef4 8a68 	vcmp.f32	s17, s17
 800e5fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e5fe:	d7e9      	bvc.n	800e5d4 <powf+0x48>
 800e600:	f7fd fe38 	bl	800c274 <__errno>
 800e604:	2321      	movs	r3, #33	; 0x21
 800e606:	6003      	str	r3, [r0, #0]
 800e608:	e00f      	b.n	800e62a <powf+0x9e>
 800e60a:	eef5 8a40 	vcmp.f32	s17, #0.0
 800e60e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e612:	d10a      	bne.n	800e62a <powf+0x9e>
 800e614:	eeb0 0a49 	vmov.f32	s0, s18
 800e618:	f000 f81a 	bl	800e650 <finitef>
 800e61c:	b128      	cbz	r0, 800e62a <powf+0x9e>
 800e61e:	eeb0 0a48 	vmov.f32	s0, s16
 800e622:	f000 f815 	bl	800e650 <finitef>
 800e626:	2800      	cmp	r0, #0
 800e628:	d1d4      	bne.n	800e5d4 <powf+0x48>
 800e62a:	eeb0 0a68 	vmov.f32	s0, s17
 800e62e:	ecbd 8b04 	vpop	{d8-d9}
 800e632:	bd08      	pop	{r3, pc}
 800e634:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800e638:	e7f7      	b.n	800e62a <powf+0x9e>

0800e63a <finite>:
 800e63a:	b082      	sub	sp, #8
 800e63c:	ed8d 0b00 	vstr	d0, [sp]
 800e640:	9801      	ldr	r0, [sp, #4]
 800e642:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e646:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e64a:	0fc0      	lsrs	r0, r0, #31
 800e64c:	b002      	add	sp, #8
 800e64e:	4770      	bx	lr

0800e650 <finitef>:
 800e650:	b082      	sub	sp, #8
 800e652:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e656:	9801      	ldr	r0, [sp, #4]
 800e658:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e65c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e660:	bfac      	ite	ge
 800e662:	2000      	movge	r0, #0
 800e664:	2001      	movlt	r0, #1
 800e666:	b002      	add	sp, #8
 800e668:	4770      	bx	lr
 800e66a:	0000      	movs	r0, r0
 800e66c:	0000      	movs	r0, r0
	...

0800e670 <__ieee754_log>:
 800e670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e674:	ec51 0b10 	vmov	r0, r1, d0
 800e678:	ed2d 8b04 	vpush	{d8-d9}
 800e67c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800e680:	b083      	sub	sp, #12
 800e682:	460d      	mov	r5, r1
 800e684:	da29      	bge.n	800e6da <__ieee754_log+0x6a>
 800e686:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e68a:	4303      	orrs	r3, r0
 800e68c:	ee10 2a10 	vmov	r2, s0
 800e690:	d10c      	bne.n	800e6ac <__ieee754_log+0x3c>
 800e692:	49cf      	ldr	r1, [pc, #828]	; (800e9d0 <__ieee754_log+0x360>)
 800e694:	2200      	movs	r2, #0
 800e696:	2300      	movs	r3, #0
 800e698:	2000      	movs	r0, #0
 800e69a:	f7f2 f8cf 	bl	800083c <__aeabi_ddiv>
 800e69e:	ec41 0b10 	vmov	d0, r0, r1
 800e6a2:	b003      	add	sp, #12
 800e6a4:	ecbd 8b04 	vpop	{d8-d9}
 800e6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6ac:	2900      	cmp	r1, #0
 800e6ae:	da05      	bge.n	800e6bc <__ieee754_log+0x4c>
 800e6b0:	460b      	mov	r3, r1
 800e6b2:	f7f1 fde1 	bl	8000278 <__aeabi_dsub>
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	2300      	movs	r3, #0
 800e6ba:	e7ee      	b.n	800e69a <__ieee754_log+0x2a>
 800e6bc:	4bc5      	ldr	r3, [pc, #788]	; (800e9d4 <__ieee754_log+0x364>)
 800e6be:	2200      	movs	r2, #0
 800e6c0:	f7f1 ff92 	bl	80005e8 <__aeabi_dmul>
 800e6c4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 800e6c8:	460d      	mov	r5, r1
 800e6ca:	4ac3      	ldr	r2, [pc, #780]	; (800e9d8 <__ieee754_log+0x368>)
 800e6cc:	4295      	cmp	r5, r2
 800e6ce:	dd06      	ble.n	800e6de <__ieee754_log+0x6e>
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	460b      	mov	r3, r1
 800e6d4:	f7f1 fdd2 	bl	800027c <__adddf3>
 800e6d8:	e7e1      	b.n	800e69e <__ieee754_log+0x2e>
 800e6da:	2300      	movs	r3, #0
 800e6dc:	e7f5      	b.n	800e6ca <__ieee754_log+0x5a>
 800e6de:	152c      	asrs	r4, r5, #20
 800e6e0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800e6e4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 800e6e8:	441c      	add	r4, r3
 800e6ea:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 800e6ee:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 800e6f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e6f6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800e6fa:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800e6fe:	ea42 0105 	orr.w	r1, r2, r5
 800e702:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 800e706:	2200      	movs	r2, #0
 800e708:	4bb4      	ldr	r3, [pc, #720]	; (800e9dc <__ieee754_log+0x36c>)
 800e70a:	f7f1 fdb5 	bl	8000278 <__aeabi_dsub>
 800e70e:	1cab      	adds	r3, r5, #2
 800e710:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e714:	2b02      	cmp	r3, #2
 800e716:	4682      	mov	sl, r0
 800e718:	468b      	mov	fp, r1
 800e71a:	f04f 0200 	mov.w	r2, #0
 800e71e:	dc53      	bgt.n	800e7c8 <__ieee754_log+0x158>
 800e720:	2300      	movs	r3, #0
 800e722:	f7f2 f9c9 	bl	8000ab8 <__aeabi_dcmpeq>
 800e726:	b1d0      	cbz	r0, 800e75e <__ieee754_log+0xee>
 800e728:	2c00      	cmp	r4, #0
 800e72a:	f000 8122 	beq.w	800e972 <__ieee754_log+0x302>
 800e72e:	4620      	mov	r0, r4
 800e730:	f7f1 fef0 	bl	8000514 <__aeabi_i2d>
 800e734:	a390      	add	r3, pc, #576	; (adr r3, 800e978 <__ieee754_log+0x308>)
 800e736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e73a:	4606      	mov	r6, r0
 800e73c:	460f      	mov	r7, r1
 800e73e:	f7f1 ff53 	bl	80005e8 <__aeabi_dmul>
 800e742:	a38f      	add	r3, pc, #572	; (adr r3, 800e980 <__ieee754_log+0x310>)
 800e744:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e748:	4604      	mov	r4, r0
 800e74a:	460d      	mov	r5, r1
 800e74c:	4630      	mov	r0, r6
 800e74e:	4639      	mov	r1, r7
 800e750:	f7f1 ff4a 	bl	80005e8 <__aeabi_dmul>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4620      	mov	r0, r4
 800e75a:	4629      	mov	r1, r5
 800e75c:	e7ba      	b.n	800e6d4 <__ieee754_log+0x64>
 800e75e:	a38a      	add	r3, pc, #552	; (adr r3, 800e988 <__ieee754_log+0x318>)
 800e760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e764:	4650      	mov	r0, sl
 800e766:	4659      	mov	r1, fp
 800e768:	f7f1 ff3e 	bl	80005e8 <__aeabi_dmul>
 800e76c:	4602      	mov	r2, r0
 800e76e:	460b      	mov	r3, r1
 800e770:	2000      	movs	r0, #0
 800e772:	499b      	ldr	r1, [pc, #620]	; (800e9e0 <__ieee754_log+0x370>)
 800e774:	f7f1 fd80 	bl	8000278 <__aeabi_dsub>
 800e778:	4652      	mov	r2, sl
 800e77a:	4606      	mov	r6, r0
 800e77c:	460f      	mov	r7, r1
 800e77e:	465b      	mov	r3, fp
 800e780:	4650      	mov	r0, sl
 800e782:	4659      	mov	r1, fp
 800e784:	f7f1 ff30 	bl	80005e8 <__aeabi_dmul>
 800e788:	4602      	mov	r2, r0
 800e78a:	460b      	mov	r3, r1
 800e78c:	4630      	mov	r0, r6
 800e78e:	4639      	mov	r1, r7
 800e790:	f7f1 ff2a 	bl	80005e8 <__aeabi_dmul>
 800e794:	4606      	mov	r6, r0
 800e796:	460f      	mov	r7, r1
 800e798:	b914      	cbnz	r4, 800e7a0 <__ieee754_log+0x130>
 800e79a:	4632      	mov	r2, r6
 800e79c:	463b      	mov	r3, r7
 800e79e:	e0a2      	b.n	800e8e6 <__ieee754_log+0x276>
 800e7a0:	4620      	mov	r0, r4
 800e7a2:	f7f1 feb7 	bl	8000514 <__aeabi_i2d>
 800e7a6:	a374      	add	r3, pc, #464	; (adr r3, 800e978 <__ieee754_log+0x308>)
 800e7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ac:	4680      	mov	r8, r0
 800e7ae:	4689      	mov	r9, r1
 800e7b0:	f7f1 ff1a 	bl	80005e8 <__aeabi_dmul>
 800e7b4:	a372      	add	r3, pc, #456	; (adr r3, 800e980 <__ieee754_log+0x310>)
 800e7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7ba:	4604      	mov	r4, r0
 800e7bc:	460d      	mov	r5, r1
 800e7be:	4640      	mov	r0, r8
 800e7c0:	4649      	mov	r1, r9
 800e7c2:	f7f1 ff11 	bl	80005e8 <__aeabi_dmul>
 800e7c6:	e0a7      	b.n	800e918 <__ieee754_log+0x2a8>
 800e7c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e7cc:	f7f1 fd56 	bl	800027c <__adddf3>
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	4650      	mov	r0, sl
 800e7d6:	4659      	mov	r1, fp
 800e7d8:	f7f2 f830 	bl	800083c <__aeabi_ddiv>
 800e7dc:	ec41 0b18 	vmov	d8, r0, r1
 800e7e0:	4620      	mov	r0, r4
 800e7e2:	f7f1 fe97 	bl	8000514 <__aeabi_i2d>
 800e7e6:	ec53 2b18 	vmov	r2, r3, d8
 800e7ea:	ec41 0b19 	vmov	d9, r0, r1
 800e7ee:	ec51 0b18 	vmov	r0, r1, d8
 800e7f2:	f7f1 fef9 	bl	80005e8 <__aeabi_dmul>
 800e7f6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 800e7fa:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	4680      	mov	r8, r0
 800e806:	4689      	mov	r9, r1
 800e808:	f7f1 feee 	bl	80005e8 <__aeabi_dmul>
 800e80c:	a360      	add	r3, pc, #384	; (adr r3, 800e990 <__ieee754_log+0x320>)
 800e80e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e812:	4606      	mov	r6, r0
 800e814:	460f      	mov	r7, r1
 800e816:	f7f1 fee7 	bl	80005e8 <__aeabi_dmul>
 800e81a:	a35f      	add	r3, pc, #380	; (adr r3, 800e998 <__ieee754_log+0x328>)
 800e81c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e820:	f7f1 fd2c 	bl	800027c <__adddf3>
 800e824:	4632      	mov	r2, r6
 800e826:	463b      	mov	r3, r7
 800e828:	f7f1 fede 	bl	80005e8 <__aeabi_dmul>
 800e82c:	a35c      	add	r3, pc, #368	; (adr r3, 800e9a0 <__ieee754_log+0x330>)
 800e82e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e832:	f7f1 fd23 	bl	800027c <__adddf3>
 800e836:	4632      	mov	r2, r6
 800e838:	463b      	mov	r3, r7
 800e83a:	f7f1 fed5 	bl	80005e8 <__aeabi_dmul>
 800e83e:	a35a      	add	r3, pc, #360	; (adr r3, 800e9a8 <__ieee754_log+0x338>)
 800e840:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e844:	f7f1 fd1a 	bl	800027c <__adddf3>
 800e848:	4642      	mov	r2, r8
 800e84a:	464b      	mov	r3, r9
 800e84c:	f7f1 fecc 	bl	80005e8 <__aeabi_dmul>
 800e850:	a357      	add	r3, pc, #348	; (adr r3, 800e9b0 <__ieee754_log+0x340>)
 800e852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e856:	4680      	mov	r8, r0
 800e858:	4689      	mov	r9, r1
 800e85a:	4630      	mov	r0, r6
 800e85c:	4639      	mov	r1, r7
 800e85e:	f7f1 fec3 	bl	80005e8 <__aeabi_dmul>
 800e862:	a355      	add	r3, pc, #340	; (adr r3, 800e9b8 <__ieee754_log+0x348>)
 800e864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e868:	f7f1 fd08 	bl	800027c <__adddf3>
 800e86c:	4632      	mov	r2, r6
 800e86e:	463b      	mov	r3, r7
 800e870:	f7f1 feba 	bl	80005e8 <__aeabi_dmul>
 800e874:	a352      	add	r3, pc, #328	; (adr r3, 800e9c0 <__ieee754_log+0x350>)
 800e876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e87a:	f7f1 fcff 	bl	800027c <__adddf3>
 800e87e:	4632      	mov	r2, r6
 800e880:	463b      	mov	r3, r7
 800e882:	f7f1 feb1 	bl	80005e8 <__aeabi_dmul>
 800e886:	460b      	mov	r3, r1
 800e888:	4602      	mov	r2, r0
 800e88a:	4649      	mov	r1, r9
 800e88c:	4640      	mov	r0, r8
 800e88e:	f7f1 fcf5 	bl	800027c <__adddf3>
 800e892:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 800e896:	9b01      	ldr	r3, [sp, #4]
 800e898:	3551      	adds	r5, #81	; 0x51
 800e89a:	431d      	orrs	r5, r3
 800e89c:	2d00      	cmp	r5, #0
 800e89e:	4680      	mov	r8, r0
 800e8a0:	4689      	mov	r9, r1
 800e8a2:	dd48      	ble.n	800e936 <__ieee754_log+0x2c6>
 800e8a4:	4b4e      	ldr	r3, [pc, #312]	; (800e9e0 <__ieee754_log+0x370>)
 800e8a6:	2200      	movs	r2, #0
 800e8a8:	4650      	mov	r0, sl
 800e8aa:	4659      	mov	r1, fp
 800e8ac:	f7f1 fe9c 	bl	80005e8 <__aeabi_dmul>
 800e8b0:	4652      	mov	r2, sl
 800e8b2:	465b      	mov	r3, fp
 800e8b4:	f7f1 fe98 	bl	80005e8 <__aeabi_dmul>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4606      	mov	r6, r0
 800e8be:	460f      	mov	r7, r1
 800e8c0:	4640      	mov	r0, r8
 800e8c2:	4649      	mov	r1, r9
 800e8c4:	f7f1 fcda 	bl	800027c <__adddf3>
 800e8c8:	ec53 2b18 	vmov	r2, r3, d8
 800e8cc:	f7f1 fe8c 	bl	80005e8 <__aeabi_dmul>
 800e8d0:	4680      	mov	r8, r0
 800e8d2:	4689      	mov	r9, r1
 800e8d4:	b964      	cbnz	r4, 800e8f0 <__ieee754_log+0x280>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	460b      	mov	r3, r1
 800e8da:	4630      	mov	r0, r6
 800e8dc:	4639      	mov	r1, r7
 800e8de:	f7f1 fccb 	bl	8000278 <__aeabi_dsub>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
 800e8e6:	4650      	mov	r0, sl
 800e8e8:	4659      	mov	r1, fp
 800e8ea:	f7f1 fcc5 	bl	8000278 <__aeabi_dsub>
 800e8ee:	e6d6      	b.n	800e69e <__ieee754_log+0x2e>
 800e8f0:	a321      	add	r3, pc, #132	; (adr r3, 800e978 <__ieee754_log+0x308>)
 800e8f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8f6:	ec51 0b19 	vmov	r0, r1, d9
 800e8fa:	f7f1 fe75 	bl	80005e8 <__aeabi_dmul>
 800e8fe:	a320      	add	r3, pc, #128	; (adr r3, 800e980 <__ieee754_log+0x310>)
 800e900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e904:	4604      	mov	r4, r0
 800e906:	460d      	mov	r5, r1
 800e908:	ec51 0b19 	vmov	r0, r1, d9
 800e90c:	f7f1 fe6c 	bl	80005e8 <__aeabi_dmul>
 800e910:	4642      	mov	r2, r8
 800e912:	464b      	mov	r3, r9
 800e914:	f7f1 fcb2 	bl	800027c <__adddf3>
 800e918:	4602      	mov	r2, r0
 800e91a:	460b      	mov	r3, r1
 800e91c:	4630      	mov	r0, r6
 800e91e:	4639      	mov	r1, r7
 800e920:	f7f1 fcaa 	bl	8000278 <__aeabi_dsub>
 800e924:	4652      	mov	r2, sl
 800e926:	465b      	mov	r3, fp
 800e928:	f7f1 fca6 	bl	8000278 <__aeabi_dsub>
 800e92c:	4602      	mov	r2, r0
 800e92e:	460b      	mov	r3, r1
 800e930:	4620      	mov	r0, r4
 800e932:	4629      	mov	r1, r5
 800e934:	e7d9      	b.n	800e8ea <__ieee754_log+0x27a>
 800e936:	4602      	mov	r2, r0
 800e938:	460b      	mov	r3, r1
 800e93a:	4650      	mov	r0, sl
 800e93c:	4659      	mov	r1, fp
 800e93e:	f7f1 fc9b 	bl	8000278 <__aeabi_dsub>
 800e942:	ec53 2b18 	vmov	r2, r3, d8
 800e946:	f7f1 fe4f 	bl	80005e8 <__aeabi_dmul>
 800e94a:	4606      	mov	r6, r0
 800e94c:	460f      	mov	r7, r1
 800e94e:	2c00      	cmp	r4, #0
 800e950:	f43f af23 	beq.w	800e79a <__ieee754_log+0x12a>
 800e954:	a308      	add	r3, pc, #32	; (adr r3, 800e978 <__ieee754_log+0x308>)
 800e956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95a:	ec51 0b19 	vmov	r0, r1, d9
 800e95e:	f7f1 fe43 	bl	80005e8 <__aeabi_dmul>
 800e962:	a307      	add	r3, pc, #28	; (adr r3, 800e980 <__ieee754_log+0x310>)
 800e964:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e968:	4604      	mov	r4, r0
 800e96a:	460d      	mov	r5, r1
 800e96c:	ec51 0b19 	vmov	r0, r1, d9
 800e970:	e727      	b.n	800e7c2 <__ieee754_log+0x152>
 800e972:	ed9f 0b15 	vldr	d0, [pc, #84]	; 800e9c8 <__ieee754_log+0x358>
 800e976:	e694      	b.n	800e6a2 <__ieee754_log+0x32>
 800e978:	fee00000 	.word	0xfee00000
 800e97c:	3fe62e42 	.word	0x3fe62e42
 800e980:	35793c76 	.word	0x35793c76
 800e984:	3dea39ef 	.word	0x3dea39ef
 800e988:	55555555 	.word	0x55555555
 800e98c:	3fd55555 	.word	0x3fd55555
 800e990:	df3e5244 	.word	0xdf3e5244
 800e994:	3fc2f112 	.word	0x3fc2f112
 800e998:	96cb03de 	.word	0x96cb03de
 800e99c:	3fc74664 	.word	0x3fc74664
 800e9a0:	94229359 	.word	0x94229359
 800e9a4:	3fd24924 	.word	0x3fd24924
 800e9a8:	55555593 	.word	0x55555593
 800e9ac:	3fe55555 	.word	0x3fe55555
 800e9b0:	d078c69f 	.word	0xd078c69f
 800e9b4:	3fc39a09 	.word	0x3fc39a09
 800e9b8:	1d8e78af 	.word	0x1d8e78af
 800e9bc:	3fcc71c5 	.word	0x3fcc71c5
 800e9c0:	9997fa04 	.word	0x9997fa04
 800e9c4:	3fd99999 	.word	0x3fd99999
	...
 800e9d0:	c3500000 	.word	0xc3500000
 800e9d4:	43500000 	.word	0x43500000
 800e9d8:	7fefffff 	.word	0x7fefffff
 800e9dc:	3ff00000 	.word	0x3ff00000
 800e9e0:	3fe00000 	.word	0x3fe00000
 800e9e4:	00000000 	.word	0x00000000

0800e9e8 <__ieee754_pow>:
 800e9e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ec:	ed2d 8b06 	vpush	{d8-d10}
 800e9f0:	b089      	sub	sp, #36	; 0x24
 800e9f2:	ed8d 1b00 	vstr	d1, [sp]
 800e9f6:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e9fa:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e9fe:	ea58 0102 	orrs.w	r1, r8, r2
 800ea02:	ec57 6b10 	vmov	r6, r7, d0
 800ea06:	d115      	bne.n	800ea34 <__ieee754_pow+0x4c>
 800ea08:	19b3      	adds	r3, r6, r6
 800ea0a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ea0e:	4152      	adcs	r2, r2
 800ea10:	4299      	cmp	r1, r3
 800ea12:	4b89      	ldr	r3, [pc, #548]	; (800ec38 <__ieee754_pow+0x250>)
 800ea14:	4193      	sbcs	r3, r2
 800ea16:	f080 84d1 	bcs.w	800f3bc <__ieee754_pow+0x9d4>
 800ea1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea1e:	4630      	mov	r0, r6
 800ea20:	4639      	mov	r1, r7
 800ea22:	f7f1 fc2b 	bl	800027c <__adddf3>
 800ea26:	ec41 0b10 	vmov	d0, r0, r1
 800ea2a:	b009      	add	sp, #36	; 0x24
 800ea2c:	ecbd 8b06 	vpop	{d8-d10}
 800ea30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea34:	4b81      	ldr	r3, [pc, #516]	; (800ec3c <__ieee754_pow+0x254>)
 800ea36:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ea3a:	429c      	cmp	r4, r3
 800ea3c:	ee10 aa10 	vmov	sl, s0
 800ea40:	463d      	mov	r5, r7
 800ea42:	dc06      	bgt.n	800ea52 <__ieee754_pow+0x6a>
 800ea44:	d101      	bne.n	800ea4a <__ieee754_pow+0x62>
 800ea46:	2e00      	cmp	r6, #0
 800ea48:	d1e7      	bne.n	800ea1a <__ieee754_pow+0x32>
 800ea4a:	4598      	cmp	r8, r3
 800ea4c:	dc01      	bgt.n	800ea52 <__ieee754_pow+0x6a>
 800ea4e:	d10f      	bne.n	800ea70 <__ieee754_pow+0x88>
 800ea50:	b172      	cbz	r2, 800ea70 <__ieee754_pow+0x88>
 800ea52:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ea56:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ea5a:	ea55 050a 	orrs.w	r5, r5, sl
 800ea5e:	d1dc      	bne.n	800ea1a <__ieee754_pow+0x32>
 800ea60:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea64:	18db      	adds	r3, r3, r3
 800ea66:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ea6a:	4152      	adcs	r2, r2
 800ea6c:	429d      	cmp	r5, r3
 800ea6e:	e7d0      	b.n	800ea12 <__ieee754_pow+0x2a>
 800ea70:	2d00      	cmp	r5, #0
 800ea72:	da3b      	bge.n	800eaec <__ieee754_pow+0x104>
 800ea74:	4b72      	ldr	r3, [pc, #456]	; (800ec40 <__ieee754_pow+0x258>)
 800ea76:	4598      	cmp	r8, r3
 800ea78:	dc51      	bgt.n	800eb1e <__ieee754_pow+0x136>
 800ea7a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ea7e:	4598      	cmp	r8, r3
 800ea80:	f340 84ab 	ble.w	800f3da <__ieee754_pow+0x9f2>
 800ea84:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea88:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea8c:	2b14      	cmp	r3, #20
 800ea8e:	dd0f      	ble.n	800eab0 <__ieee754_pow+0xc8>
 800ea90:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ea94:	fa22 f103 	lsr.w	r1, r2, r3
 800ea98:	fa01 f303 	lsl.w	r3, r1, r3
 800ea9c:	4293      	cmp	r3, r2
 800ea9e:	f040 849c 	bne.w	800f3da <__ieee754_pow+0x9f2>
 800eaa2:	f001 0101 	and.w	r1, r1, #1
 800eaa6:	f1c1 0302 	rsb	r3, r1, #2
 800eaaa:	9304      	str	r3, [sp, #16]
 800eaac:	b182      	cbz	r2, 800ead0 <__ieee754_pow+0xe8>
 800eaae:	e05f      	b.n	800eb70 <__ieee754_pow+0x188>
 800eab0:	2a00      	cmp	r2, #0
 800eab2:	d15b      	bne.n	800eb6c <__ieee754_pow+0x184>
 800eab4:	f1c3 0314 	rsb	r3, r3, #20
 800eab8:	fa48 f103 	asr.w	r1, r8, r3
 800eabc:	fa01 f303 	lsl.w	r3, r1, r3
 800eac0:	4543      	cmp	r3, r8
 800eac2:	f040 8487 	bne.w	800f3d4 <__ieee754_pow+0x9ec>
 800eac6:	f001 0101 	and.w	r1, r1, #1
 800eaca:	f1c1 0302 	rsb	r3, r1, #2
 800eace:	9304      	str	r3, [sp, #16]
 800ead0:	4b5c      	ldr	r3, [pc, #368]	; (800ec44 <__ieee754_pow+0x25c>)
 800ead2:	4598      	cmp	r8, r3
 800ead4:	d132      	bne.n	800eb3c <__ieee754_pow+0x154>
 800ead6:	f1b9 0f00 	cmp.w	r9, #0
 800eada:	f280 8477 	bge.w	800f3cc <__ieee754_pow+0x9e4>
 800eade:	4959      	ldr	r1, [pc, #356]	; (800ec44 <__ieee754_pow+0x25c>)
 800eae0:	4632      	mov	r2, r6
 800eae2:	463b      	mov	r3, r7
 800eae4:	2000      	movs	r0, #0
 800eae6:	f7f1 fea9 	bl	800083c <__aeabi_ddiv>
 800eaea:	e79c      	b.n	800ea26 <__ieee754_pow+0x3e>
 800eaec:	2300      	movs	r3, #0
 800eaee:	9304      	str	r3, [sp, #16]
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	d13d      	bne.n	800eb70 <__ieee754_pow+0x188>
 800eaf4:	4b51      	ldr	r3, [pc, #324]	; (800ec3c <__ieee754_pow+0x254>)
 800eaf6:	4598      	cmp	r8, r3
 800eaf8:	d1ea      	bne.n	800ead0 <__ieee754_pow+0xe8>
 800eafa:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eafe:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eb02:	ea53 030a 	orrs.w	r3, r3, sl
 800eb06:	f000 8459 	beq.w	800f3bc <__ieee754_pow+0x9d4>
 800eb0a:	4b4f      	ldr	r3, [pc, #316]	; (800ec48 <__ieee754_pow+0x260>)
 800eb0c:	429c      	cmp	r4, r3
 800eb0e:	dd08      	ble.n	800eb22 <__ieee754_pow+0x13a>
 800eb10:	f1b9 0f00 	cmp.w	r9, #0
 800eb14:	f2c0 8456 	blt.w	800f3c4 <__ieee754_pow+0x9dc>
 800eb18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb1c:	e783      	b.n	800ea26 <__ieee754_pow+0x3e>
 800eb1e:	2302      	movs	r3, #2
 800eb20:	e7e5      	b.n	800eaee <__ieee754_pow+0x106>
 800eb22:	f1b9 0f00 	cmp.w	r9, #0
 800eb26:	f04f 0000 	mov.w	r0, #0
 800eb2a:	f04f 0100 	mov.w	r1, #0
 800eb2e:	f6bf af7a 	bge.w	800ea26 <__ieee754_pow+0x3e>
 800eb32:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eb36:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eb3a:	e774      	b.n	800ea26 <__ieee754_pow+0x3e>
 800eb3c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800eb40:	d106      	bne.n	800eb50 <__ieee754_pow+0x168>
 800eb42:	4632      	mov	r2, r6
 800eb44:	463b      	mov	r3, r7
 800eb46:	4630      	mov	r0, r6
 800eb48:	4639      	mov	r1, r7
 800eb4a:	f7f1 fd4d 	bl	80005e8 <__aeabi_dmul>
 800eb4e:	e76a      	b.n	800ea26 <__ieee754_pow+0x3e>
 800eb50:	4b3e      	ldr	r3, [pc, #248]	; (800ec4c <__ieee754_pow+0x264>)
 800eb52:	4599      	cmp	r9, r3
 800eb54:	d10c      	bne.n	800eb70 <__ieee754_pow+0x188>
 800eb56:	2d00      	cmp	r5, #0
 800eb58:	db0a      	blt.n	800eb70 <__ieee754_pow+0x188>
 800eb5a:	ec47 6b10 	vmov	d0, r6, r7
 800eb5e:	b009      	add	sp, #36	; 0x24
 800eb60:	ecbd 8b06 	vpop	{d8-d10}
 800eb64:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb68:	f001 b87c 	b.w	800fc64 <__ieee754_sqrt>
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	9304      	str	r3, [sp, #16]
 800eb70:	ec47 6b10 	vmov	d0, r6, r7
 800eb74:	f000 fc62 	bl	800f43c <fabs>
 800eb78:	ec51 0b10 	vmov	r0, r1, d0
 800eb7c:	f1ba 0f00 	cmp.w	sl, #0
 800eb80:	d129      	bne.n	800ebd6 <__ieee754_pow+0x1ee>
 800eb82:	b124      	cbz	r4, 800eb8e <__ieee754_pow+0x1a6>
 800eb84:	4b2f      	ldr	r3, [pc, #188]	; (800ec44 <__ieee754_pow+0x25c>)
 800eb86:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800eb8a:	429a      	cmp	r2, r3
 800eb8c:	d123      	bne.n	800ebd6 <__ieee754_pow+0x1ee>
 800eb8e:	f1b9 0f00 	cmp.w	r9, #0
 800eb92:	da05      	bge.n	800eba0 <__ieee754_pow+0x1b8>
 800eb94:	4602      	mov	r2, r0
 800eb96:	460b      	mov	r3, r1
 800eb98:	2000      	movs	r0, #0
 800eb9a:	492a      	ldr	r1, [pc, #168]	; (800ec44 <__ieee754_pow+0x25c>)
 800eb9c:	f7f1 fe4e 	bl	800083c <__aeabi_ddiv>
 800eba0:	2d00      	cmp	r5, #0
 800eba2:	f6bf af40 	bge.w	800ea26 <__ieee754_pow+0x3e>
 800eba6:	9b04      	ldr	r3, [sp, #16]
 800eba8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ebac:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ebb0:	431c      	orrs	r4, r3
 800ebb2:	d108      	bne.n	800ebc6 <__ieee754_pow+0x1de>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4610      	mov	r0, r2
 800ebba:	4619      	mov	r1, r3
 800ebbc:	f7f1 fb5c 	bl	8000278 <__aeabi_dsub>
 800ebc0:	4602      	mov	r2, r0
 800ebc2:	460b      	mov	r3, r1
 800ebc4:	e78f      	b.n	800eae6 <__ieee754_pow+0xfe>
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	2b01      	cmp	r3, #1
 800ebca:	f47f af2c 	bne.w	800ea26 <__ieee754_pow+0x3e>
 800ebce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebd2:	4619      	mov	r1, r3
 800ebd4:	e727      	b.n	800ea26 <__ieee754_pow+0x3e>
 800ebd6:	0feb      	lsrs	r3, r5, #31
 800ebd8:	3b01      	subs	r3, #1
 800ebda:	9306      	str	r3, [sp, #24]
 800ebdc:	9a06      	ldr	r2, [sp, #24]
 800ebde:	9b04      	ldr	r3, [sp, #16]
 800ebe0:	4313      	orrs	r3, r2
 800ebe2:	d102      	bne.n	800ebea <__ieee754_pow+0x202>
 800ebe4:	4632      	mov	r2, r6
 800ebe6:	463b      	mov	r3, r7
 800ebe8:	e7e6      	b.n	800ebb8 <__ieee754_pow+0x1d0>
 800ebea:	4b19      	ldr	r3, [pc, #100]	; (800ec50 <__ieee754_pow+0x268>)
 800ebec:	4598      	cmp	r8, r3
 800ebee:	f340 80fb 	ble.w	800ede8 <__ieee754_pow+0x400>
 800ebf2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ebf6:	4598      	cmp	r8, r3
 800ebf8:	4b13      	ldr	r3, [pc, #76]	; (800ec48 <__ieee754_pow+0x260>)
 800ebfa:	dd0c      	ble.n	800ec16 <__ieee754_pow+0x22e>
 800ebfc:	429c      	cmp	r4, r3
 800ebfe:	dc0f      	bgt.n	800ec20 <__ieee754_pow+0x238>
 800ec00:	f1b9 0f00 	cmp.w	r9, #0
 800ec04:	da0f      	bge.n	800ec26 <__ieee754_pow+0x23e>
 800ec06:	2000      	movs	r0, #0
 800ec08:	b009      	add	sp, #36	; 0x24
 800ec0a:	ecbd 8b06 	vpop	{d8-d10}
 800ec0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec12:	f000 bf96 	b.w	800fb42 <__math_oflow>
 800ec16:	429c      	cmp	r4, r3
 800ec18:	dbf2      	blt.n	800ec00 <__ieee754_pow+0x218>
 800ec1a:	4b0a      	ldr	r3, [pc, #40]	; (800ec44 <__ieee754_pow+0x25c>)
 800ec1c:	429c      	cmp	r4, r3
 800ec1e:	dd19      	ble.n	800ec54 <__ieee754_pow+0x26c>
 800ec20:	f1b9 0f00 	cmp.w	r9, #0
 800ec24:	dcef      	bgt.n	800ec06 <__ieee754_pow+0x21e>
 800ec26:	2000      	movs	r0, #0
 800ec28:	b009      	add	sp, #36	; 0x24
 800ec2a:	ecbd 8b06 	vpop	{d8-d10}
 800ec2e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec32:	f000 bf7d 	b.w	800fb30 <__math_uflow>
 800ec36:	bf00      	nop
 800ec38:	fff00000 	.word	0xfff00000
 800ec3c:	7ff00000 	.word	0x7ff00000
 800ec40:	433fffff 	.word	0x433fffff
 800ec44:	3ff00000 	.word	0x3ff00000
 800ec48:	3fefffff 	.word	0x3fefffff
 800ec4c:	3fe00000 	.word	0x3fe00000
 800ec50:	41e00000 	.word	0x41e00000
 800ec54:	4b60      	ldr	r3, [pc, #384]	; (800edd8 <__ieee754_pow+0x3f0>)
 800ec56:	2200      	movs	r2, #0
 800ec58:	f7f1 fb0e 	bl	8000278 <__aeabi_dsub>
 800ec5c:	a354      	add	r3, pc, #336	; (adr r3, 800edb0 <__ieee754_pow+0x3c8>)
 800ec5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec62:	4604      	mov	r4, r0
 800ec64:	460d      	mov	r5, r1
 800ec66:	f7f1 fcbf 	bl	80005e8 <__aeabi_dmul>
 800ec6a:	a353      	add	r3, pc, #332	; (adr r3, 800edb8 <__ieee754_pow+0x3d0>)
 800ec6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec70:	4606      	mov	r6, r0
 800ec72:	460f      	mov	r7, r1
 800ec74:	4620      	mov	r0, r4
 800ec76:	4629      	mov	r1, r5
 800ec78:	f7f1 fcb6 	bl	80005e8 <__aeabi_dmul>
 800ec7c:	4b57      	ldr	r3, [pc, #348]	; (800eddc <__ieee754_pow+0x3f4>)
 800ec7e:	4682      	mov	sl, r0
 800ec80:	468b      	mov	fp, r1
 800ec82:	2200      	movs	r2, #0
 800ec84:	4620      	mov	r0, r4
 800ec86:	4629      	mov	r1, r5
 800ec88:	f7f1 fcae 	bl	80005e8 <__aeabi_dmul>
 800ec8c:	4602      	mov	r2, r0
 800ec8e:	460b      	mov	r3, r1
 800ec90:	a14b      	add	r1, pc, #300	; (adr r1, 800edc0 <__ieee754_pow+0x3d8>)
 800ec92:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec96:	f7f1 faef 	bl	8000278 <__aeabi_dsub>
 800ec9a:	4622      	mov	r2, r4
 800ec9c:	462b      	mov	r3, r5
 800ec9e:	f7f1 fca3 	bl	80005e8 <__aeabi_dmul>
 800eca2:	4602      	mov	r2, r0
 800eca4:	460b      	mov	r3, r1
 800eca6:	2000      	movs	r0, #0
 800eca8:	494d      	ldr	r1, [pc, #308]	; (800ede0 <__ieee754_pow+0x3f8>)
 800ecaa:	f7f1 fae5 	bl	8000278 <__aeabi_dsub>
 800ecae:	4622      	mov	r2, r4
 800ecb0:	4680      	mov	r8, r0
 800ecb2:	4689      	mov	r9, r1
 800ecb4:	462b      	mov	r3, r5
 800ecb6:	4620      	mov	r0, r4
 800ecb8:	4629      	mov	r1, r5
 800ecba:	f7f1 fc95 	bl	80005e8 <__aeabi_dmul>
 800ecbe:	4602      	mov	r2, r0
 800ecc0:	460b      	mov	r3, r1
 800ecc2:	4640      	mov	r0, r8
 800ecc4:	4649      	mov	r1, r9
 800ecc6:	f7f1 fc8f 	bl	80005e8 <__aeabi_dmul>
 800ecca:	a33f      	add	r3, pc, #252	; (adr r3, 800edc8 <__ieee754_pow+0x3e0>)
 800eccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecd0:	f7f1 fc8a 	bl	80005e8 <__aeabi_dmul>
 800ecd4:	4602      	mov	r2, r0
 800ecd6:	460b      	mov	r3, r1
 800ecd8:	4650      	mov	r0, sl
 800ecda:	4659      	mov	r1, fp
 800ecdc:	f7f1 facc 	bl	8000278 <__aeabi_dsub>
 800ece0:	4602      	mov	r2, r0
 800ece2:	460b      	mov	r3, r1
 800ece4:	4680      	mov	r8, r0
 800ece6:	4689      	mov	r9, r1
 800ece8:	4630      	mov	r0, r6
 800ecea:	4639      	mov	r1, r7
 800ecec:	f7f1 fac6 	bl	800027c <__adddf3>
 800ecf0:	2000      	movs	r0, #0
 800ecf2:	4632      	mov	r2, r6
 800ecf4:	463b      	mov	r3, r7
 800ecf6:	4604      	mov	r4, r0
 800ecf8:	460d      	mov	r5, r1
 800ecfa:	f7f1 fabd 	bl	8000278 <__aeabi_dsub>
 800ecfe:	4602      	mov	r2, r0
 800ed00:	460b      	mov	r3, r1
 800ed02:	4640      	mov	r0, r8
 800ed04:	4649      	mov	r1, r9
 800ed06:	f7f1 fab7 	bl	8000278 <__aeabi_dsub>
 800ed0a:	9b04      	ldr	r3, [sp, #16]
 800ed0c:	9a06      	ldr	r2, [sp, #24]
 800ed0e:	3b01      	subs	r3, #1
 800ed10:	4313      	orrs	r3, r2
 800ed12:	4682      	mov	sl, r0
 800ed14:	468b      	mov	fp, r1
 800ed16:	f040 81e7 	bne.w	800f0e8 <__ieee754_pow+0x700>
 800ed1a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800edd0 <__ieee754_pow+0x3e8>
 800ed1e:	eeb0 8a47 	vmov.f32	s16, s14
 800ed22:	eef0 8a67 	vmov.f32	s17, s15
 800ed26:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed2a:	2600      	movs	r6, #0
 800ed2c:	4632      	mov	r2, r6
 800ed2e:	463b      	mov	r3, r7
 800ed30:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed34:	f7f1 faa0 	bl	8000278 <__aeabi_dsub>
 800ed38:	4622      	mov	r2, r4
 800ed3a:	462b      	mov	r3, r5
 800ed3c:	f7f1 fc54 	bl	80005e8 <__aeabi_dmul>
 800ed40:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed44:	4680      	mov	r8, r0
 800ed46:	4689      	mov	r9, r1
 800ed48:	4650      	mov	r0, sl
 800ed4a:	4659      	mov	r1, fp
 800ed4c:	f7f1 fc4c 	bl	80005e8 <__aeabi_dmul>
 800ed50:	4602      	mov	r2, r0
 800ed52:	460b      	mov	r3, r1
 800ed54:	4640      	mov	r0, r8
 800ed56:	4649      	mov	r1, r9
 800ed58:	f7f1 fa90 	bl	800027c <__adddf3>
 800ed5c:	4632      	mov	r2, r6
 800ed5e:	463b      	mov	r3, r7
 800ed60:	4680      	mov	r8, r0
 800ed62:	4689      	mov	r9, r1
 800ed64:	4620      	mov	r0, r4
 800ed66:	4629      	mov	r1, r5
 800ed68:	f7f1 fc3e 	bl	80005e8 <__aeabi_dmul>
 800ed6c:	460b      	mov	r3, r1
 800ed6e:	4604      	mov	r4, r0
 800ed70:	460d      	mov	r5, r1
 800ed72:	4602      	mov	r2, r0
 800ed74:	4649      	mov	r1, r9
 800ed76:	4640      	mov	r0, r8
 800ed78:	f7f1 fa80 	bl	800027c <__adddf3>
 800ed7c:	4b19      	ldr	r3, [pc, #100]	; (800ede4 <__ieee754_pow+0x3fc>)
 800ed7e:	4299      	cmp	r1, r3
 800ed80:	ec45 4b19 	vmov	d9, r4, r5
 800ed84:	4606      	mov	r6, r0
 800ed86:	460f      	mov	r7, r1
 800ed88:	468b      	mov	fp, r1
 800ed8a:	f340 82f0 	ble.w	800f36e <__ieee754_pow+0x986>
 800ed8e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ed92:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ed96:	4303      	orrs	r3, r0
 800ed98:	f000 81e4 	beq.w	800f164 <__ieee754_pow+0x77c>
 800ed9c:	ec51 0b18 	vmov	r0, r1, d8
 800eda0:	2200      	movs	r2, #0
 800eda2:	2300      	movs	r3, #0
 800eda4:	f7f1 fe92 	bl	8000acc <__aeabi_dcmplt>
 800eda8:	3800      	subs	r0, #0
 800edaa:	bf18      	it	ne
 800edac:	2001      	movne	r0, #1
 800edae:	e72b      	b.n	800ec08 <__ieee754_pow+0x220>
 800edb0:	60000000 	.word	0x60000000
 800edb4:	3ff71547 	.word	0x3ff71547
 800edb8:	f85ddf44 	.word	0xf85ddf44
 800edbc:	3e54ae0b 	.word	0x3e54ae0b
 800edc0:	55555555 	.word	0x55555555
 800edc4:	3fd55555 	.word	0x3fd55555
 800edc8:	652b82fe 	.word	0x652b82fe
 800edcc:	3ff71547 	.word	0x3ff71547
 800edd0:	00000000 	.word	0x00000000
 800edd4:	bff00000 	.word	0xbff00000
 800edd8:	3ff00000 	.word	0x3ff00000
 800eddc:	3fd00000 	.word	0x3fd00000
 800ede0:	3fe00000 	.word	0x3fe00000
 800ede4:	408fffff 	.word	0x408fffff
 800ede8:	4bd5      	ldr	r3, [pc, #852]	; (800f140 <__ieee754_pow+0x758>)
 800edea:	402b      	ands	r3, r5
 800edec:	2200      	movs	r2, #0
 800edee:	b92b      	cbnz	r3, 800edfc <__ieee754_pow+0x414>
 800edf0:	4bd4      	ldr	r3, [pc, #848]	; (800f144 <__ieee754_pow+0x75c>)
 800edf2:	f7f1 fbf9 	bl	80005e8 <__aeabi_dmul>
 800edf6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800edfa:	460c      	mov	r4, r1
 800edfc:	1523      	asrs	r3, r4, #20
 800edfe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee02:	4413      	add	r3, r2
 800ee04:	9305      	str	r3, [sp, #20]
 800ee06:	4bd0      	ldr	r3, [pc, #832]	; (800f148 <__ieee754_pow+0x760>)
 800ee08:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ee0c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ee10:	429c      	cmp	r4, r3
 800ee12:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ee16:	dd08      	ble.n	800ee2a <__ieee754_pow+0x442>
 800ee18:	4bcc      	ldr	r3, [pc, #816]	; (800f14c <__ieee754_pow+0x764>)
 800ee1a:	429c      	cmp	r4, r3
 800ee1c:	f340 8162 	ble.w	800f0e4 <__ieee754_pow+0x6fc>
 800ee20:	9b05      	ldr	r3, [sp, #20]
 800ee22:	3301      	adds	r3, #1
 800ee24:	9305      	str	r3, [sp, #20]
 800ee26:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ee2a:	2400      	movs	r4, #0
 800ee2c:	00e3      	lsls	r3, r4, #3
 800ee2e:	9307      	str	r3, [sp, #28]
 800ee30:	4bc7      	ldr	r3, [pc, #796]	; (800f150 <__ieee754_pow+0x768>)
 800ee32:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee36:	ed93 7b00 	vldr	d7, [r3]
 800ee3a:	4629      	mov	r1, r5
 800ee3c:	ec53 2b17 	vmov	r2, r3, d7
 800ee40:	eeb0 9a47 	vmov.f32	s18, s14
 800ee44:	eef0 9a67 	vmov.f32	s19, s15
 800ee48:	4682      	mov	sl, r0
 800ee4a:	f7f1 fa15 	bl	8000278 <__aeabi_dsub>
 800ee4e:	4652      	mov	r2, sl
 800ee50:	4606      	mov	r6, r0
 800ee52:	460f      	mov	r7, r1
 800ee54:	462b      	mov	r3, r5
 800ee56:	ec51 0b19 	vmov	r0, r1, d9
 800ee5a:	f7f1 fa0f 	bl	800027c <__adddf3>
 800ee5e:	4602      	mov	r2, r0
 800ee60:	460b      	mov	r3, r1
 800ee62:	2000      	movs	r0, #0
 800ee64:	49bb      	ldr	r1, [pc, #748]	; (800f154 <__ieee754_pow+0x76c>)
 800ee66:	f7f1 fce9 	bl	800083c <__aeabi_ddiv>
 800ee6a:	ec41 0b1a 	vmov	d10, r0, r1
 800ee6e:	4602      	mov	r2, r0
 800ee70:	460b      	mov	r3, r1
 800ee72:	4630      	mov	r0, r6
 800ee74:	4639      	mov	r1, r7
 800ee76:	f7f1 fbb7 	bl	80005e8 <__aeabi_dmul>
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee80:	9302      	str	r3, [sp, #8]
 800ee82:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee86:	46ab      	mov	fp, r5
 800ee88:	106d      	asrs	r5, r5, #1
 800ee8a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ee8e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ee92:	ec41 0b18 	vmov	d8, r0, r1
 800ee96:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ee9a:	2200      	movs	r2, #0
 800ee9c:	4640      	mov	r0, r8
 800ee9e:	4649      	mov	r1, r9
 800eea0:	4614      	mov	r4, r2
 800eea2:	461d      	mov	r5, r3
 800eea4:	f7f1 fba0 	bl	80005e8 <__aeabi_dmul>
 800eea8:	4602      	mov	r2, r0
 800eeaa:	460b      	mov	r3, r1
 800eeac:	4630      	mov	r0, r6
 800eeae:	4639      	mov	r1, r7
 800eeb0:	f7f1 f9e2 	bl	8000278 <__aeabi_dsub>
 800eeb4:	ec53 2b19 	vmov	r2, r3, d9
 800eeb8:	4606      	mov	r6, r0
 800eeba:	460f      	mov	r7, r1
 800eebc:	4620      	mov	r0, r4
 800eebe:	4629      	mov	r1, r5
 800eec0:	f7f1 f9da 	bl	8000278 <__aeabi_dsub>
 800eec4:	4602      	mov	r2, r0
 800eec6:	460b      	mov	r3, r1
 800eec8:	4650      	mov	r0, sl
 800eeca:	4659      	mov	r1, fp
 800eecc:	f7f1 f9d4 	bl	8000278 <__aeabi_dsub>
 800eed0:	4642      	mov	r2, r8
 800eed2:	464b      	mov	r3, r9
 800eed4:	f7f1 fb88 	bl	80005e8 <__aeabi_dmul>
 800eed8:	4602      	mov	r2, r0
 800eeda:	460b      	mov	r3, r1
 800eedc:	4630      	mov	r0, r6
 800eede:	4639      	mov	r1, r7
 800eee0:	f7f1 f9ca 	bl	8000278 <__aeabi_dsub>
 800eee4:	ec53 2b1a 	vmov	r2, r3, d10
 800eee8:	f7f1 fb7e 	bl	80005e8 <__aeabi_dmul>
 800eeec:	ec53 2b18 	vmov	r2, r3, d8
 800eef0:	ec41 0b19 	vmov	d9, r0, r1
 800eef4:	ec51 0b18 	vmov	r0, r1, d8
 800eef8:	f7f1 fb76 	bl	80005e8 <__aeabi_dmul>
 800eefc:	a37c      	add	r3, pc, #496	; (adr r3, 800f0f0 <__ieee754_pow+0x708>)
 800eefe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef02:	4604      	mov	r4, r0
 800ef04:	460d      	mov	r5, r1
 800ef06:	f7f1 fb6f 	bl	80005e8 <__aeabi_dmul>
 800ef0a:	a37b      	add	r3, pc, #492	; (adr r3, 800f0f8 <__ieee754_pow+0x710>)
 800ef0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef10:	f7f1 f9b4 	bl	800027c <__adddf3>
 800ef14:	4622      	mov	r2, r4
 800ef16:	462b      	mov	r3, r5
 800ef18:	f7f1 fb66 	bl	80005e8 <__aeabi_dmul>
 800ef1c:	a378      	add	r3, pc, #480	; (adr r3, 800f100 <__ieee754_pow+0x718>)
 800ef1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef22:	f7f1 f9ab 	bl	800027c <__adddf3>
 800ef26:	4622      	mov	r2, r4
 800ef28:	462b      	mov	r3, r5
 800ef2a:	f7f1 fb5d 	bl	80005e8 <__aeabi_dmul>
 800ef2e:	a376      	add	r3, pc, #472	; (adr r3, 800f108 <__ieee754_pow+0x720>)
 800ef30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef34:	f7f1 f9a2 	bl	800027c <__adddf3>
 800ef38:	4622      	mov	r2, r4
 800ef3a:	462b      	mov	r3, r5
 800ef3c:	f7f1 fb54 	bl	80005e8 <__aeabi_dmul>
 800ef40:	a373      	add	r3, pc, #460	; (adr r3, 800f110 <__ieee754_pow+0x728>)
 800ef42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef46:	f7f1 f999 	bl	800027c <__adddf3>
 800ef4a:	4622      	mov	r2, r4
 800ef4c:	462b      	mov	r3, r5
 800ef4e:	f7f1 fb4b 	bl	80005e8 <__aeabi_dmul>
 800ef52:	a371      	add	r3, pc, #452	; (adr r3, 800f118 <__ieee754_pow+0x730>)
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	f7f1 f990 	bl	800027c <__adddf3>
 800ef5c:	4622      	mov	r2, r4
 800ef5e:	4606      	mov	r6, r0
 800ef60:	460f      	mov	r7, r1
 800ef62:	462b      	mov	r3, r5
 800ef64:	4620      	mov	r0, r4
 800ef66:	4629      	mov	r1, r5
 800ef68:	f7f1 fb3e 	bl	80005e8 <__aeabi_dmul>
 800ef6c:	4602      	mov	r2, r0
 800ef6e:	460b      	mov	r3, r1
 800ef70:	4630      	mov	r0, r6
 800ef72:	4639      	mov	r1, r7
 800ef74:	f7f1 fb38 	bl	80005e8 <__aeabi_dmul>
 800ef78:	4642      	mov	r2, r8
 800ef7a:	4604      	mov	r4, r0
 800ef7c:	460d      	mov	r5, r1
 800ef7e:	464b      	mov	r3, r9
 800ef80:	ec51 0b18 	vmov	r0, r1, d8
 800ef84:	f7f1 f97a 	bl	800027c <__adddf3>
 800ef88:	ec53 2b19 	vmov	r2, r3, d9
 800ef8c:	f7f1 fb2c 	bl	80005e8 <__aeabi_dmul>
 800ef90:	4622      	mov	r2, r4
 800ef92:	462b      	mov	r3, r5
 800ef94:	f7f1 f972 	bl	800027c <__adddf3>
 800ef98:	4642      	mov	r2, r8
 800ef9a:	4682      	mov	sl, r0
 800ef9c:	468b      	mov	fp, r1
 800ef9e:	464b      	mov	r3, r9
 800efa0:	4640      	mov	r0, r8
 800efa2:	4649      	mov	r1, r9
 800efa4:	f7f1 fb20 	bl	80005e8 <__aeabi_dmul>
 800efa8:	4b6b      	ldr	r3, [pc, #428]	; (800f158 <__ieee754_pow+0x770>)
 800efaa:	2200      	movs	r2, #0
 800efac:	4606      	mov	r6, r0
 800efae:	460f      	mov	r7, r1
 800efb0:	f7f1 f964 	bl	800027c <__adddf3>
 800efb4:	4652      	mov	r2, sl
 800efb6:	465b      	mov	r3, fp
 800efb8:	f7f1 f960 	bl	800027c <__adddf3>
 800efbc:	2000      	movs	r0, #0
 800efbe:	4604      	mov	r4, r0
 800efc0:	460d      	mov	r5, r1
 800efc2:	4602      	mov	r2, r0
 800efc4:	460b      	mov	r3, r1
 800efc6:	4640      	mov	r0, r8
 800efc8:	4649      	mov	r1, r9
 800efca:	f7f1 fb0d 	bl	80005e8 <__aeabi_dmul>
 800efce:	4b62      	ldr	r3, [pc, #392]	; (800f158 <__ieee754_pow+0x770>)
 800efd0:	4680      	mov	r8, r0
 800efd2:	4689      	mov	r9, r1
 800efd4:	2200      	movs	r2, #0
 800efd6:	4620      	mov	r0, r4
 800efd8:	4629      	mov	r1, r5
 800efda:	f7f1 f94d 	bl	8000278 <__aeabi_dsub>
 800efde:	4632      	mov	r2, r6
 800efe0:	463b      	mov	r3, r7
 800efe2:	f7f1 f949 	bl	8000278 <__aeabi_dsub>
 800efe6:	4602      	mov	r2, r0
 800efe8:	460b      	mov	r3, r1
 800efea:	4650      	mov	r0, sl
 800efec:	4659      	mov	r1, fp
 800efee:	f7f1 f943 	bl	8000278 <__aeabi_dsub>
 800eff2:	ec53 2b18 	vmov	r2, r3, d8
 800eff6:	f7f1 faf7 	bl	80005e8 <__aeabi_dmul>
 800effa:	4622      	mov	r2, r4
 800effc:	4606      	mov	r6, r0
 800effe:	460f      	mov	r7, r1
 800f000:	462b      	mov	r3, r5
 800f002:	ec51 0b19 	vmov	r0, r1, d9
 800f006:	f7f1 faef 	bl	80005e8 <__aeabi_dmul>
 800f00a:	4602      	mov	r2, r0
 800f00c:	460b      	mov	r3, r1
 800f00e:	4630      	mov	r0, r6
 800f010:	4639      	mov	r1, r7
 800f012:	f7f1 f933 	bl	800027c <__adddf3>
 800f016:	4606      	mov	r6, r0
 800f018:	460f      	mov	r7, r1
 800f01a:	4602      	mov	r2, r0
 800f01c:	460b      	mov	r3, r1
 800f01e:	4640      	mov	r0, r8
 800f020:	4649      	mov	r1, r9
 800f022:	f7f1 f92b 	bl	800027c <__adddf3>
 800f026:	a33e      	add	r3, pc, #248	; (adr r3, 800f120 <__ieee754_pow+0x738>)
 800f028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f02c:	2000      	movs	r0, #0
 800f02e:	4604      	mov	r4, r0
 800f030:	460d      	mov	r5, r1
 800f032:	f7f1 fad9 	bl	80005e8 <__aeabi_dmul>
 800f036:	4642      	mov	r2, r8
 800f038:	ec41 0b18 	vmov	d8, r0, r1
 800f03c:	464b      	mov	r3, r9
 800f03e:	4620      	mov	r0, r4
 800f040:	4629      	mov	r1, r5
 800f042:	f7f1 f919 	bl	8000278 <__aeabi_dsub>
 800f046:	4602      	mov	r2, r0
 800f048:	460b      	mov	r3, r1
 800f04a:	4630      	mov	r0, r6
 800f04c:	4639      	mov	r1, r7
 800f04e:	f7f1 f913 	bl	8000278 <__aeabi_dsub>
 800f052:	a335      	add	r3, pc, #212	; (adr r3, 800f128 <__ieee754_pow+0x740>)
 800f054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f058:	f7f1 fac6 	bl	80005e8 <__aeabi_dmul>
 800f05c:	a334      	add	r3, pc, #208	; (adr r3, 800f130 <__ieee754_pow+0x748>)
 800f05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f062:	4606      	mov	r6, r0
 800f064:	460f      	mov	r7, r1
 800f066:	4620      	mov	r0, r4
 800f068:	4629      	mov	r1, r5
 800f06a:	f7f1 fabd 	bl	80005e8 <__aeabi_dmul>
 800f06e:	4602      	mov	r2, r0
 800f070:	460b      	mov	r3, r1
 800f072:	4630      	mov	r0, r6
 800f074:	4639      	mov	r1, r7
 800f076:	f7f1 f901 	bl	800027c <__adddf3>
 800f07a:	9a07      	ldr	r2, [sp, #28]
 800f07c:	4b37      	ldr	r3, [pc, #220]	; (800f15c <__ieee754_pow+0x774>)
 800f07e:	4413      	add	r3, r2
 800f080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f084:	f7f1 f8fa 	bl	800027c <__adddf3>
 800f088:	4682      	mov	sl, r0
 800f08a:	9805      	ldr	r0, [sp, #20]
 800f08c:	468b      	mov	fp, r1
 800f08e:	f7f1 fa41 	bl	8000514 <__aeabi_i2d>
 800f092:	9a07      	ldr	r2, [sp, #28]
 800f094:	4b32      	ldr	r3, [pc, #200]	; (800f160 <__ieee754_pow+0x778>)
 800f096:	4413      	add	r3, r2
 800f098:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f09c:	4606      	mov	r6, r0
 800f09e:	460f      	mov	r7, r1
 800f0a0:	4652      	mov	r2, sl
 800f0a2:	465b      	mov	r3, fp
 800f0a4:	ec51 0b18 	vmov	r0, r1, d8
 800f0a8:	f7f1 f8e8 	bl	800027c <__adddf3>
 800f0ac:	4642      	mov	r2, r8
 800f0ae:	464b      	mov	r3, r9
 800f0b0:	f7f1 f8e4 	bl	800027c <__adddf3>
 800f0b4:	4632      	mov	r2, r6
 800f0b6:	463b      	mov	r3, r7
 800f0b8:	f7f1 f8e0 	bl	800027c <__adddf3>
 800f0bc:	2000      	movs	r0, #0
 800f0be:	4632      	mov	r2, r6
 800f0c0:	463b      	mov	r3, r7
 800f0c2:	4604      	mov	r4, r0
 800f0c4:	460d      	mov	r5, r1
 800f0c6:	f7f1 f8d7 	bl	8000278 <__aeabi_dsub>
 800f0ca:	4642      	mov	r2, r8
 800f0cc:	464b      	mov	r3, r9
 800f0ce:	f7f1 f8d3 	bl	8000278 <__aeabi_dsub>
 800f0d2:	ec53 2b18 	vmov	r2, r3, d8
 800f0d6:	f7f1 f8cf 	bl	8000278 <__aeabi_dsub>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	460b      	mov	r3, r1
 800f0de:	4650      	mov	r0, sl
 800f0e0:	4659      	mov	r1, fp
 800f0e2:	e610      	b.n	800ed06 <__ieee754_pow+0x31e>
 800f0e4:	2401      	movs	r4, #1
 800f0e6:	e6a1      	b.n	800ee2c <__ieee754_pow+0x444>
 800f0e8:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f138 <__ieee754_pow+0x750>
 800f0ec:	e617      	b.n	800ed1e <__ieee754_pow+0x336>
 800f0ee:	bf00      	nop
 800f0f0:	4a454eef 	.word	0x4a454eef
 800f0f4:	3fca7e28 	.word	0x3fca7e28
 800f0f8:	93c9db65 	.word	0x93c9db65
 800f0fc:	3fcd864a 	.word	0x3fcd864a
 800f100:	a91d4101 	.word	0xa91d4101
 800f104:	3fd17460 	.word	0x3fd17460
 800f108:	518f264d 	.word	0x518f264d
 800f10c:	3fd55555 	.word	0x3fd55555
 800f110:	db6fabff 	.word	0xdb6fabff
 800f114:	3fdb6db6 	.word	0x3fdb6db6
 800f118:	33333303 	.word	0x33333303
 800f11c:	3fe33333 	.word	0x3fe33333
 800f120:	e0000000 	.word	0xe0000000
 800f124:	3feec709 	.word	0x3feec709
 800f128:	dc3a03fd 	.word	0xdc3a03fd
 800f12c:	3feec709 	.word	0x3feec709
 800f130:	145b01f5 	.word	0x145b01f5
 800f134:	be3e2fe0 	.word	0xbe3e2fe0
 800f138:	00000000 	.word	0x00000000
 800f13c:	3ff00000 	.word	0x3ff00000
 800f140:	7ff00000 	.word	0x7ff00000
 800f144:	43400000 	.word	0x43400000
 800f148:	0003988e 	.word	0x0003988e
 800f14c:	000bb679 	.word	0x000bb679
 800f150:	080102b8 	.word	0x080102b8
 800f154:	3ff00000 	.word	0x3ff00000
 800f158:	40080000 	.word	0x40080000
 800f15c:	080102d8 	.word	0x080102d8
 800f160:	080102c8 	.word	0x080102c8
 800f164:	a3b3      	add	r3, pc, #716	; (adr r3, 800f434 <__ieee754_pow+0xa4c>)
 800f166:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f16a:	4640      	mov	r0, r8
 800f16c:	4649      	mov	r1, r9
 800f16e:	f7f1 f885 	bl	800027c <__adddf3>
 800f172:	4622      	mov	r2, r4
 800f174:	ec41 0b1a 	vmov	d10, r0, r1
 800f178:	462b      	mov	r3, r5
 800f17a:	4630      	mov	r0, r6
 800f17c:	4639      	mov	r1, r7
 800f17e:	f7f1 f87b 	bl	8000278 <__aeabi_dsub>
 800f182:	4602      	mov	r2, r0
 800f184:	460b      	mov	r3, r1
 800f186:	ec51 0b1a 	vmov	r0, r1, d10
 800f18a:	f7f1 fcbd 	bl	8000b08 <__aeabi_dcmpgt>
 800f18e:	2800      	cmp	r0, #0
 800f190:	f47f ae04 	bne.w	800ed9c <__ieee754_pow+0x3b4>
 800f194:	4aa2      	ldr	r2, [pc, #648]	; (800f420 <__ieee754_pow+0xa38>)
 800f196:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f19a:	4293      	cmp	r3, r2
 800f19c:	f340 8107 	ble.w	800f3ae <__ieee754_pow+0x9c6>
 800f1a0:	151b      	asrs	r3, r3, #20
 800f1a2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f1a6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f1aa:	fa4a fa03 	asr.w	sl, sl, r3
 800f1ae:	44da      	add	sl, fp
 800f1b0:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f1b4:	489b      	ldr	r0, [pc, #620]	; (800f424 <__ieee754_pow+0xa3c>)
 800f1b6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800f1ba:	4108      	asrs	r0, r1
 800f1bc:	ea00 030a 	and.w	r3, r0, sl
 800f1c0:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f1c4:	f1c1 0114 	rsb	r1, r1, #20
 800f1c8:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f1cc:	fa4a fa01 	asr.w	sl, sl, r1
 800f1d0:	f1bb 0f00 	cmp.w	fp, #0
 800f1d4:	f04f 0200 	mov.w	r2, #0
 800f1d8:	4620      	mov	r0, r4
 800f1da:	4629      	mov	r1, r5
 800f1dc:	bfb8      	it	lt
 800f1de:	f1ca 0a00 	rsblt	sl, sl, #0
 800f1e2:	f7f1 f849 	bl	8000278 <__aeabi_dsub>
 800f1e6:	ec41 0b19 	vmov	d9, r0, r1
 800f1ea:	4642      	mov	r2, r8
 800f1ec:	464b      	mov	r3, r9
 800f1ee:	ec51 0b19 	vmov	r0, r1, d9
 800f1f2:	f7f1 f843 	bl	800027c <__adddf3>
 800f1f6:	a37a      	add	r3, pc, #488	; (adr r3, 800f3e0 <__ieee754_pow+0x9f8>)
 800f1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1fc:	2000      	movs	r0, #0
 800f1fe:	4604      	mov	r4, r0
 800f200:	460d      	mov	r5, r1
 800f202:	f7f1 f9f1 	bl	80005e8 <__aeabi_dmul>
 800f206:	ec53 2b19 	vmov	r2, r3, d9
 800f20a:	4606      	mov	r6, r0
 800f20c:	460f      	mov	r7, r1
 800f20e:	4620      	mov	r0, r4
 800f210:	4629      	mov	r1, r5
 800f212:	f7f1 f831 	bl	8000278 <__aeabi_dsub>
 800f216:	4602      	mov	r2, r0
 800f218:	460b      	mov	r3, r1
 800f21a:	4640      	mov	r0, r8
 800f21c:	4649      	mov	r1, r9
 800f21e:	f7f1 f82b 	bl	8000278 <__aeabi_dsub>
 800f222:	a371      	add	r3, pc, #452	; (adr r3, 800f3e8 <__ieee754_pow+0xa00>)
 800f224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f228:	f7f1 f9de 	bl	80005e8 <__aeabi_dmul>
 800f22c:	a370      	add	r3, pc, #448	; (adr r3, 800f3f0 <__ieee754_pow+0xa08>)
 800f22e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f232:	4680      	mov	r8, r0
 800f234:	4689      	mov	r9, r1
 800f236:	4620      	mov	r0, r4
 800f238:	4629      	mov	r1, r5
 800f23a:	f7f1 f9d5 	bl	80005e8 <__aeabi_dmul>
 800f23e:	4602      	mov	r2, r0
 800f240:	460b      	mov	r3, r1
 800f242:	4640      	mov	r0, r8
 800f244:	4649      	mov	r1, r9
 800f246:	f7f1 f819 	bl	800027c <__adddf3>
 800f24a:	4604      	mov	r4, r0
 800f24c:	460d      	mov	r5, r1
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4630      	mov	r0, r6
 800f254:	4639      	mov	r1, r7
 800f256:	f7f1 f811 	bl	800027c <__adddf3>
 800f25a:	4632      	mov	r2, r6
 800f25c:	463b      	mov	r3, r7
 800f25e:	4680      	mov	r8, r0
 800f260:	4689      	mov	r9, r1
 800f262:	f7f1 f809 	bl	8000278 <__aeabi_dsub>
 800f266:	4602      	mov	r2, r0
 800f268:	460b      	mov	r3, r1
 800f26a:	4620      	mov	r0, r4
 800f26c:	4629      	mov	r1, r5
 800f26e:	f7f1 f803 	bl	8000278 <__aeabi_dsub>
 800f272:	4642      	mov	r2, r8
 800f274:	4606      	mov	r6, r0
 800f276:	460f      	mov	r7, r1
 800f278:	464b      	mov	r3, r9
 800f27a:	4640      	mov	r0, r8
 800f27c:	4649      	mov	r1, r9
 800f27e:	f7f1 f9b3 	bl	80005e8 <__aeabi_dmul>
 800f282:	a35d      	add	r3, pc, #372	; (adr r3, 800f3f8 <__ieee754_pow+0xa10>)
 800f284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f288:	4604      	mov	r4, r0
 800f28a:	460d      	mov	r5, r1
 800f28c:	f7f1 f9ac 	bl	80005e8 <__aeabi_dmul>
 800f290:	a35b      	add	r3, pc, #364	; (adr r3, 800f400 <__ieee754_pow+0xa18>)
 800f292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f296:	f7f0 ffef 	bl	8000278 <__aeabi_dsub>
 800f29a:	4622      	mov	r2, r4
 800f29c:	462b      	mov	r3, r5
 800f29e:	f7f1 f9a3 	bl	80005e8 <__aeabi_dmul>
 800f2a2:	a359      	add	r3, pc, #356	; (adr r3, 800f408 <__ieee754_pow+0xa20>)
 800f2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a8:	f7f0 ffe8 	bl	800027c <__adddf3>
 800f2ac:	4622      	mov	r2, r4
 800f2ae:	462b      	mov	r3, r5
 800f2b0:	f7f1 f99a 	bl	80005e8 <__aeabi_dmul>
 800f2b4:	a356      	add	r3, pc, #344	; (adr r3, 800f410 <__ieee754_pow+0xa28>)
 800f2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ba:	f7f0 ffdd 	bl	8000278 <__aeabi_dsub>
 800f2be:	4622      	mov	r2, r4
 800f2c0:	462b      	mov	r3, r5
 800f2c2:	f7f1 f991 	bl	80005e8 <__aeabi_dmul>
 800f2c6:	a354      	add	r3, pc, #336	; (adr r3, 800f418 <__ieee754_pow+0xa30>)
 800f2c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2cc:	f7f0 ffd6 	bl	800027c <__adddf3>
 800f2d0:	4622      	mov	r2, r4
 800f2d2:	462b      	mov	r3, r5
 800f2d4:	f7f1 f988 	bl	80005e8 <__aeabi_dmul>
 800f2d8:	4602      	mov	r2, r0
 800f2da:	460b      	mov	r3, r1
 800f2dc:	4640      	mov	r0, r8
 800f2de:	4649      	mov	r1, r9
 800f2e0:	f7f0 ffca 	bl	8000278 <__aeabi_dsub>
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	460d      	mov	r5, r1
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	4640      	mov	r0, r8
 800f2ee:	4649      	mov	r1, r9
 800f2f0:	f7f1 f97a 	bl	80005e8 <__aeabi_dmul>
 800f2f4:	2200      	movs	r2, #0
 800f2f6:	ec41 0b19 	vmov	d9, r0, r1
 800f2fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f2fe:	4620      	mov	r0, r4
 800f300:	4629      	mov	r1, r5
 800f302:	f7f0 ffb9 	bl	8000278 <__aeabi_dsub>
 800f306:	4602      	mov	r2, r0
 800f308:	460b      	mov	r3, r1
 800f30a:	ec51 0b19 	vmov	r0, r1, d9
 800f30e:	f7f1 fa95 	bl	800083c <__aeabi_ddiv>
 800f312:	4632      	mov	r2, r6
 800f314:	4604      	mov	r4, r0
 800f316:	460d      	mov	r5, r1
 800f318:	463b      	mov	r3, r7
 800f31a:	4640      	mov	r0, r8
 800f31c:	4649      	mov	r1, r9
 800f31e:	f7f1 f963 	bl	80005e8 <__aeabi_dmul>
 800f322:	4632      	mov	r2, r6
 800f324:	463b      	mov	r3, r7
 800f326:	f7f0 ffa9 	bl	800027c <__adddf3>
 800f32a:	4602      	mov	r2, r0
 800f32c:	460b      	mov	r3, r1
 800f32e:	4620      	mov	r0, r4
 800f330:	4629      	mov	r1, r5
 800f332:	f7f0 ffa1 	bl	8000278 <__aeabi_dsub>
 800f336:	4642      	mov	r2, r8
 800f338:	464b      	mov	r3, r9
 800f33a:	f7f0 ff9d 	bl	8000278 <__aeabi_dsub>
 800f33e:	460b      	mov	r3, r1
 800f340:	4602      	mov	r2, r0
 800f342:	4939      	ldr	r1, [pc, #228]	; (800f428 <__ieee754_pow+0xa40>)
 800f344:	2000      	movs	r0, #0
 800f346:	f7f0 ff97 	bl	8000278 <__aeabi_dsub>
 800f34a:	ec41 0b10 	vmov	d0, r0, r1
 800f34e:	ee10 3a90 	vmov	r3, s1
 800f352:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f356:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f35a:	da2b      	bge.n	800f3b4 <__ieee754_pow+0x9cc>
 800f35c:	4650      	mov	r0, sl
 800f35e:	f000 fb4b 	bl	800f9f8 <scalbn>
 800f362:	ec51 0b10 	vmov	r0, r1, d0
 800f366:	ec53 2b18 	vmov	r2, r3, d8
 800f36a:	f7ff bbee 	b.w	800eb4a <__ieee754_pow+0x162>
 800f36e:	4b2f      	ldr	r3, [pc, #188]	; (800f42c <__ieee754_pow+0xa44>)
 800f370:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f374:	429e      	cmp	r6, r3
 800f376:	f77f af0d 	ble.w	800f194 <__ieee754_pow+0x7ac>
 800f37a:	4b2d      	ldr	r3, [pc, #180]	; (800f430 <__ieee754_pow+0xa48>)
 800f37c:	440b      	add	r3, r1
 800f37e:	4303      	orrs	r3, r0
 800f380:	d009      	beq.n	800f396 <__ieee754_pow+0x9ae>
 800f382:	ec51 0b18 	vmov	r0, r1, d8
 800f386:	2200      	movs	r2, #0
 800f388:	2300      	movs	r3, #0
 800f38a:	f7f1 fb9f 	bl	8000acc <__aeabi_dcmplt>
 800f38e:	3800      	subs	r0, #0
 800f390:	bf18      	it	ne
 800f392:	2001      	movne	r0, #1
 800f394:	e448      	b.n	800ec28 <__ieee754_pow+0x240>
 800f396:	4622      	mov	r2, r4
 800f398:	462b      	mov	r3, r5
 800f39a:	f7f0 ff6d 	bl	8000278 <__aeabi_dsub>
 800f39e:	4642      	mov	r2, r8
 800f3a0:	464b      	mov	r3, r9
 800f3a2:	f7f1 fba7 	bl	8000af4 <__aeabi_dcmpge>
 800f3a6:	2800      	cmp	r0, #0
 800f3a8:	f43f aef4 	beq.w	800f194 <__ieee754_pow+0x7ac>
 800f3ac:	e7e9      	b.n	800f382 <__ieee754_pow+0x99a>
 800f3ae:	f04f 0a00 	mov.w	sl, #0
 800f3b2:	e71a      	b.n	800f1ea <__ieee754_pow+0x802>
 800f3b4:	ec51 0b10 	vmov	r0, r1, d0
 800f3b8:	4619      	mov	r1, r3
 800f3ba:	e7d4      	b.n	800f366 <__ieee754_pow+0x97e>
 800f3bc:	491a      	ldr	r1, [pc, #104]	; (800f428 <__ieee754_pow+0xa40>)
 800f3be:	2000      	movs	r0, #0
 800f3c0:	f7ff bb31 	b.w	800ea26 <__ieee754_pow+0x3e>
 800f3c4:	2000      	movs	r0, #0
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	f7ff bb2d 	b.w	800ea26 <__ieee754_pow+0x3e>
 800f3cc:	4630      	mov	r0, r6
 800f3ce:	4639      	mov	r1, r7
 800f3d0:	f7ff bb29 	b.w	800ea26 <__ieee754_pow+0x3e>
 800f3d4:	9204      	str	r2, [sp, #16]
 800f3d6:	f7ff bb7b 	b.w	800ead0 <__ieee754_pow+0xe8>
 800f3da:	2300      	movs	r3, #0
 800f3dc:	f7ff bb65 	b.w	800eaaa <__ieee754_pow+0xc2>
 800f3e0:	00000000 	.word	0x00000000
 800f3e4:	3fe62e43 	.word	0x3fe62e43
 800f3e8:	fefa39ef 	.word	0xfefa39ef
 800f3ec:	3fe62e42 	.word	0x3fe62e42
 800f3f0:	0ca86c39 	.word	0x0ca86c39
 800f3f4:	be205c61 	.word	0xbe205c61
 800f3f8:	72bea4d0 	.word	0x72bea4d0
 800f3fc:	3e663769 	.word	0x3e663769
 800f400:	c5d26bf1 	.word	0xc5d26bf1
 800f404:	3ebbbd41 	.word	0x3ebbbd41
 800f408:	af25de2c 	.word	0xaf25de2c
 800f40c:	3f11566a 	.word	0x3f11566a
 800f410:	16bebd93 	.word	0x16bebd93
 800f414:	3f66c16c 	.word	0x3f66c16c
 800f418:	5555553e 	.word	0x5555553e
 800f41c:	3fc55555 	.word	0x3fc55555
 800f420:	3fe00000 	.word	0x3fe00000
 800f424:	fff00000 	.word	0xfff00000
 800f428:	3ff00000 	.word	0x3ff00000
 800f42c:	4090cbff 	.word	0x4090cbff
 800f430:	3f6f3400 	.word	0x3f6f3400
 800f434:	652b82fe 	.word	0x652b82fe
 800f438:	3c971547 	.word	0x3c971547

0800f43c <fabs>:
 800f43c:	ec51 0b10 	vmov	r0, r1, d0
 800f440:	ee10 2a10 	vmov	r2, s0
 800f444:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f448:	ec43 2b10 	vmov	d0, r2, r3
 800f44c:	4770      	bx	lr
	...

0800f450 <__ieee754_powf>:
 800f450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f454:	ee10 4a90 	vmov	r4, s1
 800f458:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800f45c:	ed2d 8b02 	vpush	{d8}
 800f460:	ee10 7a10 	vmov	r7, s0
 800f464:	eeb0 8a40 	vmov.f32	s16, s0
 800f468:	eef0 8a60 	vmov.f32	s17, s1
 800f46c:	d10c      	bne.n	800f488 <__ieee754_powf+0x38>
 800f46e:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 800f472:	007f      	lsls	r7, r7, #1
 800f474:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 800f478:	f240 8292 	bls.w	800f9a0 <__ieee754_powf+0x550>
 800f47c:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f480:	ecbd 8b02 	vpop	{d8}
 800f484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f488:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 800f48c:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800f490:	dcf4      	bgt.n	800f47c <__ieee754_powf+0x2c>
 800f492:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f496:	dd08      	ble.n	800f4aa <__ieee754_powf+0x5a>
 800f498:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800f49c:	d1ee      	bne.n	800f47c <__ieee754_powf+0x2c>
 800f49e:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800f4a2:	0064      	lsls	r4, r4, #1
 800f4a4:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800f4a8:	e7e6      	b.n	800f478 <__ieee754_powf+0x28>
 800f4aa:	2f00      	cmp	r7, #0
 800f4ac:	da20      	bge.n	800f4f0 <__ieee754_powf+0xa0>
 800f4ae:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800f4b2:	da2d      	bge.n	800f510 <__ieee754_powf+0xc0>
 800f4b4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f4b8:	f2c0 827b 	blt.w	800f9b2 <__ieee754_powf+0x562>
 800f4bc:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800f4c0:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800f4c4:	fa48 f603 	asr.w	r6, r8, r3
 800f4c8:	fa06 f303 	lsl.w	r3, r6, r3
 800f4cc:	4543      	cmp	r3, r8
 800f4ce:	f040 8270 	bne.w	800f9b2 <__ieee754_powf+0x562>
 800f4d2:	f006 0601 	and.w	r6, r6, #1
 800f4d6:	f1c6 0602 	rsb	r6, r6, #2
 800f4da:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800f4de:	d11f      	bne.n	800f520 <__ieee754_powf+0xd0>
 800f4e0:	2c00      	cmp	r4, #0
 800f4e2:	f280 8263 	bge.w	800f9ac <__ieee754_powf+0x55c>
 800f4e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f4ea:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f4ee:	e7c7      	b.n	800f480 <__ieee754_powf+0x30>
 800f4f0:	2600      	movs	r6, #0
 800f4f2:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800f4f6:	d1f0      	bne.n	800f4da <__ieee754_powf+0x8a>
 800f4f8:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800f4fc:	f000 8250 	beq.w	800f9a0 <__ieee754_powf+0x550>
 800f500:	dd08      	ble.n	800f514 <__ieee754_powf+0xc4>
 800f502:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800f808 <__ieee754_powf+0x3b8>
 800f506:	2c00      	cmp	r4, #0
 800f508:	bfa8      	it	ge
 800f50a:	eeb0 0a68 	vmovge.f32	s0, s17
 800f50e:	e7b7      	b.n	800f480 <__ieee754_powf+0x30>
 800f510:	2602      	movs	r6, #2
 800f512:	e7ee      	b.n	800f4f2 <__ieee754_powf+0xa2>
 800f514:	2c00      	cmp	r4, #0
 800f516:	f280 8246 	bge.w	800f9a6 <__ieee754_powf+0x556>
 800f51a:	eeb1 0a68 	vneg.f32	s0, s17
 800f51e:	e7af      	b.n	800f480 <__ieee754_powf+0x30>
 800f520:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f524:	d102      	bne.n	800f52c <__ieee754_powf+0xdc>
 800f526:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f52a:	e7a9      	b.n	800f480 <__ieee754_powf+0x30>
 800f52c:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800f530:	eeb0 0a48 	vmov.f32	s0, s16
 800f534:	d107      	bne.n	800f546 <__ieee754_powf+0xf6>
 800f536:	2f00      	cmp	r7, #0
 800f538:	db05      	blt.n	800f546 <__ieee754_powf+0xf6>
 800f53a:	ecbd 8b02 	vpop	{d8}
 800f53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f542:	f000 bc69 	b.w	800fe18 <__ieee754_sqrtf>
 800f546:	f000 fa4d 	bl	800f9e4 <fabsf>
 800f54a:	b125      	cbz	r5, 800f556 <__ieee754_powf+0x106>
 800f54c:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 800f550:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800f554:	d115      	bne.n	800f582 <__ieee754_powf+0x132>
 800f556:	2c00      	cmp	r4, #0
 800f558:	bfbc      	itt	lt
 800f55a:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800f55e:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f562:	2f00      	cmp	r7, #0
 800f564:	da8c      	bge.n	800f480 <__ieee754_powf+0x30>
 800f566:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800f56a:	4335      	orrs	r5, r6
 800f56c:	d104      	bne.n	800f578 <__ieee754_powf+0x128>
 800f56e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f572:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f576:	e783      	b.n	800f480 <__ieee754_powf+0x30>
 800f578:	2e01      	cmp	r6, #1
 800f57a:	d181      	bne.n	800f480 <__ieee754_powf+0x30>
 800f57c:	eeb1 0a40 	vneg.f32	s0, s0
 800f580:	e77e      	b.n	800f480 <__ieee754_powf+0x30>
 800f582:	0ff8      	lsrs	r0, r7, #31
 800f584:	3801      	subs	r0, #1
 800f586:	ea56 0300 	orrs.w	r3, r6, r0
 800f58a:	d104      	bne.n	800f596 <__ieee754_powf+0x146>
 800f58c:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f590:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f594:	e774      	b.n	800f480 <__ieee754_powf+0x30>
 800f596:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800f59a:	dd73      	ble.n	800f684 <__ieee754_powf+0x234>
 800f59c:	4b9b      	ldr	r3, [pc, #620]	; (800f80c <__ieee754_powf+0x3bc>)
 800f59e:	429d      	cmp	r5, r3
 800f5a0:	dc08      	bgt.n	800f5b4 <__ieee754_powf+0x164>
 800f5a2:	2c00      	cmp	r4, #0
 800f5a4:	da0b      	bge.n	800f5be <__ieee754_powf+0x16e>
 800f5a6:	2000      	movs	r0, #0
 800f5a8:	ecbd 8b02 	vpop	{d8}
 800f5ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b0:	f000 bb52 	b.w	800fc58 <__math_oflowf>
 800f5b4:	4b96      	ldr	r3, [pc, #600]	; (800f810 <__ieee754_powf+0x3c0>)
 800f5b6:	429d      	cmp	r5, r3
 800f5b8:	dd08      	ble.n	800f5cc <__ieee754_powf+0x17c>
 800f5ba:	2c00      	cmp	r4, #0
 800f5bc:	dcf3      	bgt.n	800f5a6 <__ieee754_powf+0x156>
 800f5be:	2000      	movs	r0, #0
 800f5c0:	ecbd 8b02 	vpop	{d8}
 800f5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5c8:	f000 bb40 	b.w	800fc4c <__math_uflowf>
 800f5cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800f5d0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f5d4:	eddf 6a8f 	vldr	s13, [pc, #572]	; 800f814 <__ieee754_powf+0x3c4>
 800f5d8:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800f5dc:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f5e0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800f5e4:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f5e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f5ec:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f5f0:	eddf 7a89 	vldr	s15, [pc, #548]	; 800f818 <__ieee754_powf+0x3c8>
 800f5f4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f5f8:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800f81c <__ieee754_powf+0x3cc>
 800f5fc:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f600:	ed9f 7a87 	vldr	s14, [pc, #540]	; 800f820 <__ieee754_powf+0x3d0>
 800f604:	eef0 6a67 	vmov.f32	s13, s15
 800f608:	eee0 6a07 	vfma.f32	s13, s0, s14
 800f60c:	ee16 3a90 	vmov	r3, s13
 800f610:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f614:	f023 030f 	bic.w	r3, r3, #15
 800f618:	ee06 3a90 	vmov	s13, r3
 800f61c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800f620:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f624:	3e01      	subs	r6, #1
 800f626:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800f62a:	4306      	orrs	r6, r0
 800f62c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800f630:	f024 040f 	bic.w	r4, r4, #15
 800f634:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800f638:	bf08      	it	eq
 800f63a:	eeb0 8a47 	vmoveq.f32	s16, s14
 800f63e:	ee07 4a10 	vmov	s14, r4
 800f642:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f646:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800f64a:	ee07 3a90 	vmov	s15, r3
 800f64e:	eee7 0a27 	vfma.f32	s1, s14, s15
 800f652:	ee07 4a10 	vmov	s14, r4
 800f656:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f65a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f65e:	ee17 1a10 	vmov	r1, s14
 800f662:	2900      	cmp	r1, #0
 800f664:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f668:	f340 817c 	ble.w	800f964 <__ieee754_powf+0x514>
 800f66c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800f670:	f340 80f8 	ble.w	800f864 <__ieee754_powf+0x414>
 800f674:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f67c:	bf4c      	ite	mi
 800f67e:	2001      	movmi	r0, #1
 800f680:	2000      	movpl	r0, #0
 800f682:	e791      	b.n	800f5a8 <__ieee754_powf+0x158>
 800f684:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 800f688:	bf01      	itttt	eq
 800f68a:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800f824 <__ieee754_powf+0x3d4>
 800f68e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f692:	f06f 0317 	mvneq.w	r3, #23
 800f696:	ee17 5a90 	vmoveq	r5, s15
 800f69a:	ea4f 52e5 	mov.w	r2, r5, asr #23
 800f69e:	bf18      	it	ne
 800f6a0:	2300      	movne	r3, #0
 800f6a2:	3a7f      	subs	r2, #127	; 0x7f
 800f6a4:	441a      	add	r2, r3
 800f6a6:	4b60      	ldr	r3, [pc, #384]	; (800f828 <__ieee754_powf+0x3d8>)
 800f6a8:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800f6ac:	429d      	cmp	r5, r3
 800f6ae:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800f6b2:	dd06      	ble.n	800f6c2 <__ieee754_powf+0x272>
 800f6b4:	4b5d      	ldr	r3, [pc, #372]	; (800f82c <__ieee754_powf+0x3dc>)
 800f6b6:	429d      	cmp	r5, r3
 800f6b8:	f340 80a4 	ble.w	800f804 <__ieee754_powf+0x3b4>
 800f6bc:	3201      	adds	r2, #1
 800f6be:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800f6c2:	2500      	movs	r5, #0
 800f6c4:	4b5a      	ldr	r3, [pc, #360]	; (800f830 <__ieee754_powf+0x3e0>)
 800f6c6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800f6ca:	ee07 1a10 	vmov	s14, r1
 800f6ce:	edd3 5a00 	vldr	s11, [r3]
 800f6d2:	4b58      	ldr	r3, [pc, #352]	; (800f834 <__ieee754_powf+0x3e4>)
 800f6d4:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f6d8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800f6dc:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f6e0:	1049      	asrs	r1, r1, #1
 800f6e2:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800f6e6:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800f6ea:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800f6ee:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f6f2:	ee07 1a90 	vmov	s15, r1
 800f6f6:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f6fa:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f6fe:	ee15 7a10 	vmov	r7, s10
 800f702:	401f      	ands	r7, r3
 800f704:	ee06 7a90 	vmov	s13, r7
 800f708:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f70c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f710:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f714:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f718:	eddf 5a47 	vldr	s11, [pc, #284]	; 800f838 <__ieee754_powf+0x3e8>
 800f71c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800f83c <__ieee754_powf+0x3ec>
 800f720:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f724:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800f840 <__ieee754_powf+0x3f0>
 800f728:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f72c:	eddf 5a39 	vldr	s11, [pc, #228]	; 800f814 <__ieee754_powf+0x3c4>
 800f730:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f734:	ed9f 7a43 	vldr	s14, [pc, #268]	; 800f844 <__ieee754_powf+0x3f4>
 800f738:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f73c:	eddf 5a42 	vldr	s11, [pc, #264]	; 800f848 <__ieee754_powf+0x3f8>
 800f740:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f744:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f748:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f74c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f750:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f754:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 800f758:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f75c:	eef0 5a67 	vmov.f32	s11, s15
 800f760:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f764:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f768:	ee15 1a90 	vmov	r1, s11
 800f76c:	4019      	ands	r1, r3
 800f76e:	ee05 1a90 	vmov	s11, r1
 800f772:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f776:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f77a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f77e:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f782:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f786:	eeb0 6a67 	vmov.f32	s12, s15
 800f78a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f78e:	ee16 1a10 	vmov	r1, s12
 800f792:	4019      	ands	r1, r3
 800f794:	ee07 1a10 	vmov	s14, r1
 800f798:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f79c:	ee06 1a10 	vmov	s12, r1
 800f7a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7a4:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800f84c <__ieee754_powf+0x3fc>
 800f7a8:	4929      	ldr	r1, [pc, #164]	; (800f850 <__ieee754_powf+0x400>)
 800f7aa:	eddf 5a2a 	vldr	s11, [pc, #168]	; 800f854 <__ieee754_powf+0x404>
 800f7ae:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f7b2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800f858 <__ieee754_powf+0x408>
 800f7b6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f7ba:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800f7be:	ed91 7a00 	vldr	s14, [r1]
 800f7c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f7c6:	ee07 2a10 	vmov	s14, r2
 800f7ca:	eef0 6a67 	vmov.f32	s13, s15
 800f7ce:	4a23      	ldr	r2, [pc, #140]	; (800f85c <__ieee754_powf+0x40c>)
 800f7d0:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f7d4:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800f7d8:	ed92 5a00 	vldr	s10, [r2]
 800f7dc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800f7e0:	ee76 6a85 	vadd.f32	s13, s13, s10
 800f7e4:	ee76 6a87 	vadd.f32	s13, s13, s14
 800f7e8:	ee16 2a90 	vmov	r2, s13
 800f7ec:	4013      	ands	r3, r2
 800f7ee:	ee06 3a90 	vmov	s13, r3
 800f7f2:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800f7f6:	ee37 7a45 	vsub.f32	s14, s14, s10
 800f7fa:	eea6 7a65 	vfms.f32	s14, s12, s11
 800f7fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f802:	e70f      	b.n	800f624 <__ieee754_powf+0x1d4>
 800f804:	2501      	movs	r5, #1
 800f806:	e75d      	b.n	800f6c4 <__ieee754_powf+0x274>
 800f808:	00000000 	.word	0x00000000
 800f80c:	3f7ffff3 	.word	0x3f7ffff3
 800f810:	3f800007 	.word	0x3f800007
 800f814:	3eaaaaab 	.word	0x3eaaaaab
 800f818:	3fb8aa3b 	.word	0x3fb8aa3b
 800f81c:	36eca570 	.word	0x36eca570
 800f820:	3fb8aa00 	.word	0x3fb8aa00
 800f824:	4b800000 	.word	0x4b800000
 800f828:	001cc471 	.word	0x001cc471
 800f82c:	005db3d6 	.word	0x005db3d6
 800f830:	080102e8 	.word	0x080102e8
 800f834:	fffff000 	.word	0xfffff000
 800f838:	3e6c3255 	.word	0x3e6c3255
 800f83c:	3e53f142 	.word	0x3e53f142
 800f840:	3e8ba305 	.word	0x3e8ba305
 800f844:	3edb6db7 	.word	0x3edb6db7
 800f848:	3f19999a 	.word	0x3f19999a
 800f84c:	3f76384f 	.word	0x3f76384f
 800f850:	080102f8 	.word	0x080102f8
 800f854:	3f763800 	.word	0x3f763800
 800f858:	369dc3a0 	.word	0x369dc3a0
 800f85c:	080102f0 	.word	0x080102f0
 800f860:	3338aa3c 	.word	0x3338aa3c
 800f864:	f040 8093 	bne.w	800f98e <__ieee754_powf+0x53e>
 800f868:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800f860 <__ieee754_powf+0x410>
 800f86c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f870:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f874:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f87c:	f73f aefa 	bgt.w	800f674 <__ieee754_powf+0x224>
 800f880:	15db      	asrs	r3, r3, #23
 800f882:	3b7e      	subs	r3, #126	; 0x7e
 800f884:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f888:	4118      	asrs	r0, r3
 800f88a:	4408      	add	r0, r1
 800f88c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f890:	4a49      	ldr	r2, [pc, #292]	; (800f9b8 <__ieee754_powf+0x568>)
 800f892:	3b7f      	subs	r3, #127	; 0x7f
 800f894:	411a      	asrs	r2, r3
 800f896:	4002      	ands	r2, r0
 800f898:	ee07 2a10 	vmov	s14, r2
 800f89c:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f8a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800f8a4:	f1c3 0317 	rsb	r3, r3, #23
 800f8a8:	4118      	asrs	r0, r3
 800f8aa:	2900      	cmp	r1, #0
 800f8ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8b0:	bfb8      	it	lt
 800f8b2:	4240      	neglt	r0, r0
 800f8b4:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800f8b8:	eddf 6a40 	vldr	s13, [pc, #256]	; 800f9bc <__ieee754_powf+0x56c>
 800f8bc:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800f9c0 <__ieee754_powf+0x570>
 800f8c0:	ee17 3a10 	vmov	r3, s14
 800f8c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800f8c8:	f023 030f 	bic.w	r3, r3, #15
 800f8cc:	ee07 3a10 	vmov	s14, r3
 800f8d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f8d4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f8d8:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f8dc:	eddf 7a39 	vldr	s15, [pc, #228]	; 800f9c4 <__ieee754_powf+0x574>
 800f8e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f8e4:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800f8e8:	eef0 6a67 	vmov.f32	s13, s15
 800f8ec:	eee7 6a06 	vfma.f32	s13, s14, s12
 800f8f0:	eef0 5a66 	vmov.f32	s11, s13
 800f8f4:	eee7 5a46 	vfms.f32	s11, s14, s12
 800f8f8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f8fc:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f900:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800f9c8 <__ieee754_powf+0x578>
 800f904:	eddf 5a31 	vldr	s11, [pc, #196]	; 800f9cc <__ieee754_powf+0x57c>
 800f908:	eea7 6a25 	vfma.f32	s12, s14, s11
 800f90c:	eddf 5a30 	vldr	s11, [pc, #192]	; 800f9d0 <__ieee754_powf+0x580>
 800f910:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f914:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800f9d4 <__ieee754_powf+0x584>
 800f918:	eea5 6a87 	vfma.f32	s12, s11, s14
 800f91c:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800f9d8 <__ieee754_powf+0x588>
 800f920:	eee6 5a07 	vfma.f32	s11, s12, s14
 800f924:	eeb0 6a66 	vmov.f32	s12, s13
 800f928:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800f92c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800f930:	ee66 5a86 	vmul.f32	s11, s13, s12
 800f934:	ee36 6a47 	vsub.f32	s12, s12, s14
 800f938:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800f93c:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800f940:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f944:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f948:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f94c:	ee10 3a10 	vmov	r3, s0
 800f950:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f954:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800f958:	da1f      	bge.n	800f99a <__ieee754_powf+0x54a>
 800f95a:	f000 f8fb 	bl	800fb54 <scalbnf>
 800f95e:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f962:	e58d      	b.n	800f480 <__ieee754_powf+0x30>
 800f964:	4a1d      	ldr	r2, [pc, #116]	; (800f9dc <__ieee754_powf+0x58c>)
 800f966:	4293      	cmp	r3, r2
 800f968:	dd07      	ble.n	800f97a <__ieee754_powf+0x52a>
 800f96a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f96e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f972:	bf4c      	ite	mi
 800f974:	2001      	movmi	r0, #1
 800f976:	2000      	movpl	r0, #0
 800f978:	e622      	b.n	800f5c0 <__ieee754_powf+0x170>
 800f97a:	d108      	bne.n	800f98e <__ieee754_powf+0x53e>
 800f97c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f980:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f984:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f988:	f6ff af7a 	blt.w	800f880 <__ieee754_powf+0x430>
 800f98c:	e7ed      	b.n	800f96a <__ieee754_powf+0x51a>
 800f98e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800f992:	f73f af75 	bgt.w	800f880 <__ieee754_powf+0x430>
 800f996:	2000      	movs	r0, #0
 800f998:	e78c      	b.n	800f8b4 <__ieee754_powf+0x464>
 800f99a:	ee00 3a10 	vmov	s0, r3
 800f99e:	e7de      	b.n	800f95e <__ieee754_powf+0x50e>
 800f9a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f9a4:	e56c      	b.n	800f480 <__ieee754_powf+0x30>
 800f9a6:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800f9e0 <__ieee754_powf+0x590>
 800f9aa:	e569      	b.n	800f480 <__ieee754_powf+0x30>
 800f9ac:	eeb0 0a48 	vmov.f32	s0, s16
 800f9b0:	e566      	b.n	800f480 <__ieee754_powf+0x30>
 800f9b2:	2600      	movs	r6, #0
 800f9b4:	e591      	b.n	800f4da <__ieee754_powf+0x8a>
 800f9b6:	bf00      	nop
 800f9b8:	ff800000 	.word	0xff800000
 800f9bc:	3f317218 	.word	0x3f317218
 800f9c0:	3f317200 	.word	0x3f317200
 800f9c4:	35bfbe8c 	.word	0x35bfbe8c
 800f9c8:	b5ddea0e 	.word	0xb5ddea0e
 800f9cc:	3331bb4c 	.word	0x3331bb4c
 800f9d0:	388ab355 	.word	0x388ab355
 800f9d4:	bb360b61 	.word	0xbb360b61
 800f9d8:	3e2aaaab 	.word	0x3e2aaaab
 800f9dc:	43160000 	.word	0x43160000
 800f9e0:	00000000 	.word	0x00000000

0800f9e4 <fabsf>:
 800f9e4:	ee10 3a10 	vmov	r3, s0
 800f9e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9ec:	ee00 3a10 	vmov	s0, r3
 800f9f0:	4770      	bx	lr
 800f9f2:	0000      	movs	r0, r0
 800f9f4:	0000      	movs	r0, r0
	...

0800f9f8 <scalbn>:
 800f9f8:	b570      	push	{r4, r5, r6, lr}
 800f9fa:	ec55 4b10 	vmov	r4, r5, d0
 800f9fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800fa02:	4606      	mov	r6, r0
 800fa04:	462b      	mov	r3, r5
 800fa06:	b999      	cbnz	r1, 800fa30 <scalbn+0x38>
 800fa08:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800fa0c:	4323      	orrs	r3, r4
 800fa0e:	d03f      	beq.n	800fa90 <scalbn+0x98>
 800fa10:	4b35      	ldr	r3, [pc, #212]	; (800fae8 <scalbn+0xf0>)
 800fa12:	4629      	mov	r1, r5
 800fa14:	ee10 0a10 	vmov	r0, s0
 800fa18:	2200      	movs	r2, #0
 800fa1a:	f7f0 fde5 	bl	80005e8 <__aeabi_dmul>
 800fa1e:	4b33      	ldr	r3, [pc, #204]	; (800faec <scalbn+0xf4>)
 800fa20:	429e      	cmp	r6, r3
 800fa22:	4604      	mov	r4, r0
 800fa24:	460d      	mov	r5, r1
 800fa26:	da10      	bge.n	800fa4a <scalbn+0x52>
 800fa28:	a327      	add	r3, pc, #156	; (adr r3, 800fac8 <scalbn+0xd0>)
 800fa2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2e:	e01f      	b.n	800fa70 <scalbn+0x78>
 800fa30:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800fa34:	4291      	cmp	r1, r2
 800fa36:	d10c      	bne.n	800fa52 <scalbn+0x5a>
 800fa38:	ee10 2a10 	vmov	r2, s0
 800fa3c:	4620      	mov	r0, r4
 800fa3e:	4629      	mov	r1, r5
 800fa40:	f7f0 fc1c 	bl	800027c <__adddf3>
 800fa44:	4604      	mov	r4, r0
 800fa46:	460d      	mov	r5, r1
 800fa48:	e022      	b.n	800fa90 <scalbn+0x98>
 800fa4a:	460b      	mov	r3, r1
 800fa4c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800fa50:	3936      	subs	r1, #54	; 0x36
 800fa52:	f24c 3250 	movw	r2, #50000	; 0xc350
 800fa56:	4296      	cmp	r6, r2
 800fa58:	dd0d      	ble.n	800fa76 <scalbn+0x7e>
 800fa5a:	2d00      	cmp	r5, #0
 800fa5c:	a11c      	add	r1, pc, #112	; (adr r1, 800fad0 <scalbn+0xd8>)
 800fa5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa62:	da02      	bge.n	800fa6a <scalbn+0x72>
 800fa64:	a11c      	add	r1, pc, #112	; (adr r1, 800fad8 <scalbn+0xe0>)
 800fa66:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fa6a:	a319      	add	r3, pc, #100	; (adr r3, 800fad0 <scalbn+0xd8>)
 800fa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa70:	f7f0 fdba 	bl	80005e8 <__aeabi_dmul>
 800fa74:	e7e6      	b.n	800fa44 <scalbn+0x4c>
 800fa76:	1872      	adds	r2, r6, r1
 800fa78:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800fa7c:	428a      	cmp	r2, r1
 800fa7e:	dcec      	bgt.n	800fa5a <scalbn+0x62>
 800fa80:	2a00      	cmp	r2, #0
 800fa82:	dd08      	ble.n	800fa96 <scalbn+0x9e>
 800fa84:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fa88:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fa8c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800fa90:	ec45 4b10 	vmov	d0, r4, r5
 800fa94:	bd70      	pop	{r4, r5, r6, pc}
 800fa96:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800fa9a:	da08      	bge.n	800faae <scalbn+0xb6>
 800fa9c:	2d00      	cmp	r5, #0
 800fa9e:	a10a      	add	r1, pc, #40	; (adr r1, 800fac8 <scalbn+0xd0>)
 800faa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faa4:	dac0      	bge.n	800fa28 <scalbn+0x30>
 800faa6:	a10e      	add	r1, pc, #56	; (adr r1, 800fae0 <scalbn+0xe8>)
 800faa8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800faac:	e7bc      	b.n	800fa28 <scalbn+0x30>
 800faae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fab2:	3236      	adds	r2, #54	; 0x36
 800fab4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800fab8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800fabc:	4620      	mov	r0, r4
 800fabe:	4b0c      	ldr	r3, [pc, #48]	; (800faf0 <scalbn+0xf8>)
 800fac0:	2200      	movs	r2, #0
 800fac2:	e7d5      	b.n	800fa70 <scalbn+0x78>
 800fac4:	f3af 8000 	nop.w
 800fac8:	c2f8f359 	.word	0xc2f8f359
 800facc:	01a56e1f 	.word	0x01a56e1f
 800fad0:	8800759c 	.word	0x8800759c
 800fad4:	7e37e43c 	.word	0x7e37e43c
 800fad8:	8800759c 	.word	0x8800759c
 800fadc:	fe37e43c 	.word	0xfe37e43c
 800fae0:	c2f8f359 	.word	0xc2f8f359
 800fae4:	81a56e1f 	.word	0x81a56e1f
 800fae8:	43500000 	.word	0x43500000
 800faec:	ffff3cb0 	.word	0xffff3cb0
 800faf0:	3c900000 	.word	0x3c900000

0800faf4 <with_errno>:
 800faf4:	b570      	push	{r4, r5, r6, lr}
 800faf6:	4604      	mov	r4, r0
 800faf8:	460d      	mov	r5, r1
 800fafa:	4616      	mov	r6, r2
 800fafc:	f7fc fbba 	bl	800c274 <__errno>
 800fb00:	4629      	mov	r1, r5
 800fb02:	6006      	str	r6, [r0, #0]
 800fb04:	4620      	mov	r0, r4
 800fb06:	bd70      	pop	{r4, r5, r6, pc}

0800fb08 <xflow>:
 800fb08:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fb0a:	4614      	mov	r4, r2
 800fb0c:	461d      	mov	r5, r3
 800fb0e:	b108      	cbz	r0, 800fb14 <xflow+0xc>
 800fb10:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb14:	e9cd 2300 	strd	r2, r3, [sp]
 800fb18:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fb1c:	4620      	mov	r0, r4
 800fb1e:	4629      	mov	r1, r5
 800fb20:	f7f0 fd62 	bl	80005e8 <__aeabi_dmul>
 800fb24:	2222      	movs	r2, #34	; 0x22
 800fb26:	b003      	add	sp, #12
 800fb28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fb2c:	f7ff bfe2 	b.w	800faf4 <with_errno>

0800fb30 <__math_uflow>:
 800fb30:	b508      	push	{r3, lr}
 800fb32:	2200      	movs	r2, #0
 800fb34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800fb38:	f7ff ffe6 	bl	800fb08 <xflow>
 800fb3c:	ec41 0b10 	vmov	d0, r0, r1
 800fb40:	bd08      	pop	{r3, pc}

0800fb42 <__math_oflow>:
 800fb42:	b508      	push	{r3, lr}
 800fb44:	2200      	movs	r2, #0
 800fb46:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800fb4a:	f7ff ffdd 	bl	800fb08 <xflow>
 800fb4e:	ec41 0b10 	vmov	d0, r0, r1
 800fb52:	bd08      	pop	{r3, pc}

0800fb54 <scalbnf>:
 800fb54:	ee10 3a10 	vmov	r3, s0
 800fb58:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800fb5c:	d02b      	beq.n	800fbb6 <scalbnf+0x62>
 800fb5e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800fb62:	d302      	bcc.n	800fb6a <scalbnf+0x16>
 800fb64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb68:	4770      	bx	lr
 800fb6a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800fb6e:	d123      	bne.n	800fbb8 <scalbnf+0x64>
 800fb70:	4b24      	ldr	r3, [pc, #144]	; (800fc04 <scalbnf+0xb0>)
 800fb72:	eddf 7a25 	vldr	s15, [pc, #148]	; 800fc08 <scalbnf+0xb4>
 800fb76:	4298      	cmp	r0, r3
 800fb78:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb7c:	db17      	blt.n	800fbae <scalbnf+0x5a>
 800fb7e:	ee10 3a10 	vmov	r3, s0
 800fb82:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb86:	3a19      	subs	r2, #25
 800fb88:	f24c 3150 	movw	r1, #50000	; 0xc350
 800fb8c:	4288      	cmp	r0, r1
 800fb8e:	dd15      	ble.n	800fbbc <scalbnf+0x68>
 800fb90:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800fc0c <scalbnf+0xb8>
 800fb94:	eddf 6a1e 	vldr	s13, [pc, #120]	; 800fc10 <scalbnf+0xbc>
 800fb98:	ee10 3a10 	vmov	r3, s0
 800fb9c:	eeb0 7a67 	vmov.f32	s14, s15
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	bfb8      	it	lt
 800fba4:	eef0 7a66 	vmovlt.f32	s15, s13
 800fba8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fbac:	4770      	bx	lr
 800fbae:	eddf 7a19 	vldr	s15, [pc, #100]	; 800fc14 <scalbnf+0xc0>
 800fbb2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fbb6:	4770      	bx	lr
 800fbb8:	0dd2      	lsrs	r2, r2, #23
 800fbba:	e7e5      	b.n	800fb88 <scalbnf+0x34>
 800fbbc:	4410      	add	r0, r2
 800fbbe:	28fe      	cmp	r0, #254	; 0xfe
 800fbc0:	dce6      	bgt.n	800fb90 <scalbnf+0x3c>
 800fbc2:	2800      	cmp	r0, #0
 800fbc4:	dd06      	ble.n	800fbd4 <scalbnf+0x80>
 800fbc6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbca:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fbce:	ee00 3a10 	vmov	s0, r3
 800fbd2:	4770      	bx	lr
 800fbd4:	f110 0f16 	cmn.w	r0, #22
 800fbd8:	da09      	bge.n	800fbee <scalbnf+0x9a>
 800fbda:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800fc14 <scalbnf+0xc0>
 800fbde:	eddf 6a0e 	vldr	s13, [pc, #56]	; 800fc18 <scalbnf+0xc4>
 800fbe2:	ee10 3a10 	vmov	r3, s0
 800fbe6:	eeb0 7a67 	vmov.f32	s14, s15
 800fbea:	2b00      	cmp	r3, #0
 800fbec:	e7d9      	b.n	800fba2 <scalbnf+0x4e>
 800fbee:	3019      	adds	r0, #25
 800fbf0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800fbf4:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fbf8:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800fc1c <scalbnf+0xc8>
 800fbfc:	ee07 3a90 	vmov	s15, r3
 800fc00:	e7d7      	b.n	800fbb2 <scalbnf+0x5e>
 800fc02:	bf00      	nop
 800fc04:	ffff3cb0 	.word	0xffff3cb0
 800fc08:	4c000000 	.word	0x4c000000
 800fc0c:	7149f2ca 	.word	0x7149f2ca
 800fc10:	f149f2ca 	.word	0xf149f2ca
 800fc14:	0da24260 	.word	0x0da24260
 800fc18:	8da24260 	.word	0x8da24260
 800fc1c:	33000000 	.word	0x33000000

0800fc20 <with_errnof>:
 800fc20:	b513      	push	{r0, r1, r4, lr}
 800fc22:	4604      	mov	r4, r0
 800fc24:	ed8d 0a01 	vstr	s0, [sp, #4]
 800fc28:	f7fc fb24 	bl	800c274 <__errno>
 800fc2c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800fc30:	6004      	str	r4, [r0, #0]
 800fc32:	b002      	add	sp, #8
 800fc34:	bd10      	pop	{r4, pc}

0800fc36 <xflowf>:
 800fc36:	b130      	cbz	r0, 800fc46 <xflowf+0x10>
 800fc38:	eef1 7a40 	vneg.f32	s15, s0
 800fc3c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fc40:	2022      	movs	r0, #34	; 0x22
 800fc42:	f7ff bfed 	b.w	800fc20 <with_errnof>
 800fc46:	eef0 7a40 	vmov.f32	s15, s0
 800fc4a:	e7f7      	b.n	800fc3c <xflowf+0x6>

0800fc4c <__math_uflowf>:
 800fc4c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc54 <__math_uflowf+0x8>
 800fc50:	f7ff bff1 	b.w	800fc36 <xflowf>
 800fc54:	10000000 	.word	0x10000000

0800fc58 <__math_oflowf>:
 800fc58:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800fc60 <__math_oflowf+0x8>
 800fc5c:	f7ff bfeb 	b.w	800fc36 <xflowf>
 800fc60:	70000000 	.word	0x70000000

0800fc64 <__ieee754_sqrt>:
 800fc64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc68:	ec55 4b10 	vmov	r4, r5, d0
 800fc6c:	4e67      	ldr	r6, [pc, #412]	; (800fe0c <__ieee754_sqrt+0x1a8>)
 800fc6e:	43ae      	bics	r6, r5
 800fc70:	ee10 0a10 	vmov	r0, s0
 800fc74:	ee10 2a10 	vmov	r2, s0
 800fc78:	4629      	mov	r1, r5
 800fc7a:	462b      	mov	r3, r5
 800fc7c:	d10d      	bne.n	800fc9a <__ieee754_sqrt+0x36>
 800fc7e:	f7f0 fcb3 	bl	80005e8 <__aeabi_dmul>
 800fc82:	4602      	mov	r2, r0
 800fc84:	460b      	mov	r3, r1
 800fc86:	4620      	mov	r0, r4
 800fc88:	4629      	mov	r1, r5
 800fc8a:	f7f0 faf7 	bl	800027c <__adddf3>
 800fc8e:	4604      	mov	r4, r0
 800fc90:	460d      	mov	r5, r1
 800fc92:	ec45 4b10 	vmov	d0, r4, r5
 800fc96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9a:	2d00      	cmp	r5, #0
 800fc9c:	dc0b      	bgt.n	800fcb6 <__ieee754_sqrt+0x52>
 800fc9e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800fca2:	4326      	orrs	r6, r4
 800fca4:	d0f5      	beq.n	800fc92 <__ieee754_sqrt+0x2e>
 800fca6:	b135      	cbz	r5, 800fcb6 <__ieee754_sqrt+0x52>
 800fca8:	f7f0 fae6 	bl	8000278 <__aeabi_dsub>
 800fcac:	4602      	mov	r2, r0
 800fcae:	460b      	mov	r3, r1
 800fcb0:	f7f0 fdc4 	bl	800083c <__aeabi_ddiv>
 800fcb4:	e7eb      	b.n	800fc8e <__ieee754_sqrt+0x2a>
 800fcb6:	1509      	asrs	r1, r1, #20
 800fcb8:	f000 808d 	beq.w	800fdd6 <__ieee754_sqrt+0x172>
 800fcbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fcc0:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800fcc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcc8:	07c9      	lsls	r1, r1, #31
 800fcca:	bf5c      	itt	pl
 800fccc:	005b      	lslpl	r3, r3, #1
 800fcce:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800fcd2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fcd6:	bf58      	it	pl
 800fcd8:	0052      	lslpl	r2, r2, #1
 800fcda:	2500      	movs	r5, #0
 800fcdc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fce0:	1076      	asrs	r6, r6, #1
 800fce2:	0052      	lsls	r2, r2, #1
 800fce4:	f04f 0e16 	mov.w	lr, #22
 800fce8:	46ac      	mov	ip, r5
 800fcea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800fcee:	eb0c 0001 	add.w	r0, ip, r1
 800fcf2:	4298      	cmp	r0, r3
 800fcf4:	bfde      	ittt	le
 800fcf6:	1a1b      	suble	r3, r3, r0
 800fcf8:	eb00 0c01 	addle.w	ip, r0, r1
 800fcfc:	186d      	addle	r5, r5, r1
 800fcfe:	005b      	lsls	r3, r3, #1
 800fd00:	f1be 0e01 	subs.w	lr, lr, #1
 800fd04:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd08:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd0c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fd10:	d1ed      	bne.n	800fcee <__ieee754_sqrt+0x8a>
 800fd12:	4674      	mov	r4, lr
 800fd14:	2720      	movs	r7, #32
 800fd16:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800fd1a:	4563      	cmp	r3, ip
 800fd1c:	eb01 000e 	add.w	r0, r1, lr
 800fd20:	dc02      	bgt.n	800fd28 <__ieee754_sqrt+0xc4>
 800fd22:	d113      	bne.n	800fd4c <__ieee754_sqrt+0xe8>
 800fd24:	4290      	cmp	r0, r2
 800fd26:	d811      	bhi.n	800fd4c <__ieee754_sqrt+0xe8>
 800fd28:	2800      	cmp	r0, #0
 800fd2a:	eb00 0e01 	add.w	lr, r0, r1
 800fd2e:	da57      	bge.n	800fde0 <__ieee754_sqrt+0x17c>
 800fd30:	f1be 0f00 	cmp.w	lr, #0
 800fd34:	db54      	blt.n	800fde0 <__ieee754_sqrt+0x17c>
 800fd36:	f10c 0801 	add.w	r8, ip, #1
 800fd3a:	eba3 030c 	sub.w	r3, r3, ip
 800fd3e:	4290      	cmp	r0, r2
 800fd40:	bf88      	it	hi
 800fd42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800fd46:	1a12      	subs	r2, r2, r0
 800fd48:	440c      	add	r4, r1
 800fd4a:	46c4      	mov	ip, r8
 800fd4c:	005b      	lsls	r3, r3, #1
 800fd4e:	3f01      	subs	r7, #1
 800fd50:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800fd54:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800fd58:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800fd5c:	d1dd      	bne.n	800fd1a <__ieee754_sqrt+0xb6>
 800fd5e:	4313      	orrs	r3, r2
 800fd60:	d01b      	beq.n	800fd9a <__ieee754_sqrt+0x136>
 800fd62:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800fe10 <__ieee754_sqrt+0x1ac>
 800fd66:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 800fe14 <__ieee754_sqrt+0x1b0>
 800fd6a:	e9da 0100 	ldrd	r0, r1, [sl]
 800fd6e:	e9db 2300 	ldrd	r2, r3, [fp]
 800fd72:	f7f0 fa81 	bl	8000278 <__aeabi_dsub>
 800fd76:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd7a:	4602      	mov	r2, r0
 800fd7c:	460b      	mov	r3, r1
 800fd7e:	4640      	mov	r0, r8
 800fd80:	4649      	mov	r1, r9
 800fd82:	f7f0 fead 	bl	8000ae0 <__aeabi_dcmple>
 800fd86:	b140      	cbz	r0, 800fd9a <__ieee754_sqrt+0x136>
 800fd88:	f1b4 3fff 	cmp.w	r4, #4294967295
 800fd8c:	e9da 0100 	ldrd	r0, r1, [sl]
 800fd90:	e9db 2300 	ldrd	r2, r3, [fp]
 800fd94:	d126      	bne.n	800fde4 <__ieee754_sqrt+0x180>
 800fd96:	3501      	adds	r5, #1
 800fd98:	463c      	mov	r4, r7
 800fd9a:	106a      	asrs	r2, r5, #1
 800fd9c:	0863      	lsrs	r3, r4, #1
 800fd9e:	07e9      	lsls	r1, r5, #31
 800fda0:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800fda4:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800fda8:	bf48      	it	mi
 800fdaa:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800fdae:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800fdb2:	461c      	mov	r4, r3
 800fdb4:	e76d      	b.n	800fc92 <__ieee754_sqrt+0x2e>
 800fdb6:	0ad3      	lsrs	r3, r2, #11
 800fdb8:	3815      	subs	r0, #21
 800fdba:	0552      	lsls	r2, r2, #21
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d0fa      	beq.n	800fdb6 <__ieee754_sqrt+0x152>
 800fdc0:	02dc      	lsls	r4, r3, #11
 800fdc2:	d50a      	bpl.n	800fdda <__ieee754_sqrt+0x176>
 800fdc4:	f1c1 0420 	rsb	r4, r1, #32
 800fdc8:	fa22 f404 	lsr.w	r4, r2, r4
 800fdcc:	1e4d      	subs	r5, r1, #1
 800fdce:	408a      	lsls	r2, r1
 800fdd0:	4323      	orrs	r3, r4
 800fdd2:	1b41      	subs	r1, r0, r5
 800fdd4:	e772      	b.n	800fcbc <__ieee754_sqrt+0x58>
 800fdd6:	4608      	mov	r0, r1
 800fdd8:	e7f0      	b.n	800fdbc <__ieee754_sqrt+0x158>
 800fdda:	005b      	lsls	r3, r3, #1
 800fddc:	3101      	adds	r1, #1
 800fdde:	e7ef      	b.n	800fdc0 <__ieee754_sqrt+0x15c>
 800fde0:	46e0      	mov	r8, ip
 800fde2:	e7aa      	b.n	800fd3a <__ieee754_sqrt+0xd6>
 800fde4:	f7f0 fa4a 	bl	800027c <__adddf3>
 800fde8:	e9da 8900 	ldrd	r8, r9, [sl]
 800fdec:	4602      	mov	r2, r0
 800fdee:	460b      	mov	r3, r1
 800fdf0:	4640      	mov	r0, r8
 800fdf2:	4649      	mov	r1, r9
 800fdf4:	f7f0 fe6a 	bl	8000acc <__aeabi_dcmplt>
 800fdf8:	b120      	cbz	r0, 800fe04 <__ieee754_sqrt+0x1a0>
 800fdfa:	1ca0      	adds	r0, r4, #2
 800fdfc:	bf08      	it	eq
 800fdfe:	3501      	addeq	r5, #1
 800fe00:	3402      	adds	r4, #2
 800fe02:	e7ca      	b.n	800fd9a <__ieee754_sqrt+0x136>
 800fe04:	3401      	adds	r4, #1
 800fe06:	f024 0401 	bic.w	r4, r4, #1
 800fe0a:	e7c6      	b.n	800fd9a <__ieee754_sqrt+0x136>
 800fe0c:	7ff00000 	.word	0x7ff00000
 800fe10:	200001e0 	.word	0x200001e0
 800fe14:	200001e8 	.word	0x200001e8

0800fe18 <__ieee754_sqrtf>:
 800fe18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800fe1c:	4770      	bx	lr
	...

0800fe20 <_init>:
 800fe20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe22:	bf00      	nop
 800fe24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe26:	bc08      	pop	{r3}
 800fe28:	469e      	mov	lr, r3
 800fe2a:	4770      	bx	lr

0800fe2c <_fini>:
 800fe2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe2e:	bf00      	nop
 800fe30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe32:	bc08      	pop	{r3}
 800fe34:	469e      	mov	lr, r3
 800fe36:	4770      	bx	lr
